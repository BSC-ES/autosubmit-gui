{"ast":null,"code":"// Extending Fancytree\n// ===================\n//\n// See also the [live demo](https://wwWendt.de/tech/fancytree/demo/sample-ext-childcounter.html) of this code.\n//\n// Every extension should have a comment header containing some information\n// about the author, copyright and licensing. Also a pointer to the latest\n// source code.\n// Prefix with `/*!` so the comment is not removed by the minifier.\n\n/*!\n * jquery.fancytree.childcounter.js\n *\n * Add a child counter bubble to tree nodes.\n * (Extension module for jquery.fancytree.js: https://github.com/mar10/fancytree/)\n *\n * Copyright (c) 2008-2020, Martin Wendt (https://wwWendt.de)\n *\n * Released under the MIT license\n * https://github.com/mar10/fancytree/wiki/LicenseInfo\n *\n * @version 2.37.0\n * @date 2020-09-11T18:58:08Z\n */\n// To keep the global namespace clean, we wrap everything in a closure.\n// The UMD wrapper pattern defines the dependencies on jQuery and the\n// Fancytree core module, and makes sure that we can use the `require()`\n// syntax with package loaders.\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./jquery.fancytree\"], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node/CommonJS\n    require(\"./jquery.fancytree\");\n\n    module.exports = factory(require(\"jquery\"));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  // Consider to use [strict mode](http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/)\n  \"use strict\"; // The [coding guidelines](http://contribute.jquery.org/style-guide/js/)\n  // require jshint /eslint compliance.\n  // But for this sample, we want to allow unused variables for demonstration purpose.\n\n  /*eslint-disable no-unused-vars */\n  // Adding methods\n  // --------------\n  // New member functions can be added to the `Fancytree` class.\n  // This function will be available for every tree instance:\n  //\n  //     var tree = $.ui.fancytree.getTree(\"#tree\");\n  //     tree.countSelected(false);\n\n  $.ui.fancytree._FancytreeClass.prototype.countSelected = function (topOnly) {\n    var tree = this,\n        treeOptions = tree.options;\n    return tree.getSelectedNodes(topOnly).length;\n  }; // The `FancytreeNode` class can also be easily extended. This would be called\n  // like\n  //     node.updateCounters();\n  //\n  // It is also good practice to add a docstring comment.\n\n  /**\n   * [ext-childcounter] Update counter badges for `node` and its parents.\n   * May be called in the `loadChildren` event, to update parents of lazy loaded\n   * nodes.\n   * @alias FancytreeNode#updateCounters\n   * @requires jquery.fancytree.childcounters.js\n   */\n\n\n  $.ui.fancytree._FancytreeNodeClass.prototype.updateCounters = function () {\n    var node = this,\n        $badge = $(\"span.fancytree-childcounter\", node.span),\n        extOpts = node.tree.options.childcounter,\n        count = node.countChildren(extOpts.deep);\n    node.data.childCounter = count;\n\n    if ((count || !extOpts.hideZeros) && (!node.isExpanded() || !extOpts.hideExpanded)) {\n      if (!$badge.length) {\n        $badge = $(\"<span class='fancytree-childcounter'/>\").appendTo($(\"span.fancytree-icon,span.fancytree-custom-icon\", node.span));\n      }\n\n      $badge.text(count);\n    } else {\n      $badge.remove();\n    }\n\n    if (extOpts.deep && !node.isTopLevel() && !node.isRootNode()) {\n      node.parent.updateCounters();\n    }\n  }; // Finally, we can extend the widget API and create functions that are called\n  // like so:\n  //\n  //     $(\"#tree\").fancytree(\"widgetMethod1\", \"abc\");\n\n\n  $.ui.fancytree.prototype.widgetMethod1 = function (arg1) {\n    var tree = this.tree;\n    return arg1;\n  }; // Register a Fancytree extension\n  // ------------------------------\n  // A full blown extension, extension is available for all trees and can be\n  // enabled like so (see also the [live demo](https://wwWendt.de/tech/fancytree/demo/sample-ext-childcounter.html)):\n  //\n  //    <script src=\"../src/jquery.fancytree.js\"></script>\n  //    <script src=\"../src/jquery.fancytree.childcounter.js\"></script>\n  //    ...\n  //\n  //     $(\"#tree\").fancytree({\n  //         extensions: [\"childcounter\"],\n  //         childcounter: {\n  //             hideExpanded: true\n  //         },\n  //         ...\n  //     });\n  //\n\n  /* 'childcounter' extension */\n\n\n  $.ui.fancytree.registerExtension({\n    // Every extension must be registered by a unique name.\n    name: \"childcounter\",\n    // Version information should be compliant with [semver](http://semver.org)\n    version: \"2.37.0\",\n    // Extension specific options and their defaults.\n    // This options will be available as `tree.options.childcounter.hideExpanded`\n    options: {\n      deep: true,\n      hideZeros: true,\n      hideExpanded: false\n    },\n    // Attributes other than `options` (or functions) can be defined here, and\n    // will be added to the tree.ext.EXTNAME namespace, in this case `tree.ext.childcounter.foo`.\n    // They can also be accessed as `this._local.foo` from within the extension\n    // methods.\n    foo: 42,\n    // Local functions are prefixed with an underscore '_'.\n    // Callable as `this._local._appendCounter()`.\n    _appendCounter: function (bar) {\n      var tree = this;\n    },\n    // **Override virtual methods for this extension.**\n    //\n    // Fancytree implements a number of 'hook methods', prefixed by 'node...' or 'tree...'.\n    // with a `ctx` argument (see [EventData](https://wwWendt.de/tech/fancytree/doc/jsdoc/global.html#EventData)\n    // for details) and an extended calling context:<br>\n    // `this`       : the Fancytree instance<br>\n    // `this._local`: the namespace that contains extension attributes and private methods (same as this.ext.EXTNAME)<br>\n    // `this._super`: the virtual function that was overridden (member of previous extension or Fancytree)\n    //\n    // See also the [complete list of available hook functions](https://wwWendt.de/tech/fancytree/doc/jsdoc/Fancytree_Hooks.html).\n\n    /* Init */\n    // `treeInit` is triggered when a tree is initalized. We can set up classes or\n    // bind event handlers here...\n    treeInit: function (ctx) {\n      var tree = this,\n          // same as ctx.tree,\n      opts = ctx.options,\n          extOpts = ctx.options.childcounter; // Optionally check for dependencies with other extensions\n\n      /* this._requireExtension(\"glyph\", false, false); */\n      // Call the base implementation\n\n      this._superApply(arguments); // Add a class to the tree container\n\n\n      this.$container.addClass(\"fancytree-ext-childcounter\");\n    },\n    // Destroy this tree instance (we only call the default implementation, so\n    // this method could as well be omitted).\n    treeDestroy: function (ctx) {\n      this._superApply(arguments);\n    },\n    // Overload the `renderTitle` hook, to append a counter badge\n    nodeRenderTitle: function (ctx, title) {\n      var node = ctx.node,\n          extOpts = ctx.options.childcounter,\n          count = node.data.childCounter == null ? node.countChildren(extOpts.deep) : +node.data.childCounter; // Let the base implementation render the title\n      // We use `_super()` instead of `_superApply()` here, since it is a little bit\n      // more performant when called often\n\n      this._super(ctx, title); // Append a counter badge\n\n\n      if ((count || !extOpts.hideZeros) && (!node.isExpanded() || !extOpts.hideExpanded)) {\n        $(\"span.fancytree-icon,span.fancytree-custom-icon\", node.span).append($(\"<span class='fancytree-childcounter'/>\").text(count));\n      }\n    },\n    // Overload the `setExpanded` hook, so the counters are updated\n    nodeSetExpanded: function (ctx, flag, callOpts) {\n      var tree = ctx.tree,\n          node = ctx.node; // Let the base implementation expand/collapse the node, then redraw the title\n      // after the animation has finished\n\n      return this._superApply(arguments).always(function () {\n        tree.nodeRenderTitle(ctx);\n      });\n    } // End of extension definition\n\n  }); // Value returned by `require('jquery.fancytree..')`\n\n  return $.ui.fancytree;\n}); // End of closure","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/jquery.fancytree/dist/modules/jquery.fancytree.childcounter.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","ui","fancytree","_FancytreeClass","prototype","countSelected","topOnly","tree","treeOptions","options","getSelectedNodes","length","_FancytreeNodeClass","updateCounters","node","$badge","span","extOpts","childcounter","count","countChildren","deep","data","childCounter","hideZeros","isExpanded","hideExpanded","appendTo","text","remove","isTopLevel","isRootNode","parent","widgetMethod1","arg1","registerExtension","name","version","foo","_appendCounter","bar","treeInit","ctx","opts","_superApply","arguments","$container","addClass","treeDestroy","nodeRenderTitle","title","_super","append","nodeSetExpanded","flag","callOpts","always"],"mappings":"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","sourcesContent":["// Extending Fancytree\n// ===================\n//\n// See also the [live demo](https://wwWendt.de/tech/fancytree/demo/sample-ext-childcounter.html) of this code.\n//\n// Every extension should have a comment header containing some information\n// about the author, copyright and licensing. Also a pointer to the latest\n// source code.\n// Prefix with `/*!` so the comment is not removed by the minifier.\n\n/*!\n * jquery.fancytree.childcounter.js\n *\n * Add a child counter bubble to tree nodes.\n * (Extension module for jquery.fancytree.js: https://github.com/mar10/fancytree/)\n *\n * Copyright (c) 2008-2020, Martin Wendt (https://wwWendt.de)\n *\n * Released under the MIT license\n * https://github.com/mar10/fancytree/wiki/LicenseInfo\n *\n * @version 2.37.0\n * @date 2020-09-11T18:58:08Z\n */\n\n// To keep the global namespace clean, we wrap everything in a closure.\n// The UMD wrapper pattern defines the dependencies on jQuery and the\n// Fancytree core module, and makes sure that we can use the `require()`\n// syntax with package loaders.\n\n(function(factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([\"jquery\", \"./jquery.fancytree\"], factory);\n\t} else if (typeof module === \"object\" && module.exports) {\n\t\t// Node/CommonJS\n\t\trequire(\"./jquery.fancytree\");\n\t\tmodule.exports = factory(require(\"jquery\"));\n\t} else {\n\t\t// Browser globals\n\t\tfactory(jQuery);\n\t}\n})(function($) {\n\t// Consider to use [strict mode](http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/)\n\t\"use strict\";\n\n\t// The [coding guidelines](http://contribute.jquery.org/style-guide/js/)\n\t// require jshint /eslint compliance.\n\t// But for this sample, we want to allow unused variables for demonstration purpose.\n\n\t/*eslint-disable no-unused-vars */\n\n\t// Adding methods\n\t// --------------\n\n\t// New member functions can be added to the `Fancytree` class.\n\t// This function will be available for every tree instance:\n\t//\n\t//     var tree = $.ui.fancytree.getTree(\"#tree\");\n\t//     tree.countSelected(false);\n\n\t$.ui.fancytree._FancytreeClass.prototype.countSelected = function(topOnly) {\n\t\tvar tree = this,\n\t\t\ttreeOptions = tree.options;\n\n\t\treturn tree.getSelectedNodes(topOnly).length;\n\t};\n\n\t// The `FancytreeNode` class can also be easily extended. This would be called\n\t// like\n\t//     node.updateCounters();\n\t//\n\t// It is also good practice to add a docstring comment.\n\t/**\n\t * [ext-childcounter] Update counter badges for `node` and its parents.\n\t * May be called in the `loadChildren` event, to update parents of lazy loaded\n\t * nodes.\n\t * @alias FancytreeNode#updateCounters\n\t * @requires jquery.fancytree.childcounters.js\n\t */\n\t$.ui.fancytree._FancytreeNodeClass.prototype.updateCounters = function() {\n\t\tvar node = this,\n\t\t\t$badge = $(\"span.fancytree-childcounter\", node.span),\n\t\t\textOpts = node.tree.options.childcounter,\n\t\t\tcount = node.countChildren(extOpts.deep);\n\n\t\tnode.data.childCounter = count;\n\t\tif (\n\t\t\t(count || !extOpts.hideZeros) &&\n\t\t\t(!node.isExpanded() || !extOpts.hideExpanded)\n\t\t) {\n\t\t\tif (!$badge.length) {\n\t\t\t\t$badge = $(\"<span class='fancytree-childcounter'/>\").appendTo(\n\t\t\t\t\t$(\n\t\t\t\t\t\t\"span.fancytree-icon,span.fancytree-custom-icon\",\n\t\t\t\t\t\tnode.span\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$badge.text(count);\n\t\t} else {\n\t\t\t$badge.remove();\n\t\t}\n\t\tif (extOpts.deep && !node.isTopLevel() && !node.isRootNode()) {\n\t\t\tnode.parent.updateCounters();\n\t\t}\n\t};\n\n\t// Finally, we can extend the widget API and create functions that are called\n\t// like so:\n\t//\n\t//     $(\"#tree\").fancytree(\"widgetMethod1\", \"abc\");\n\n\t$.ui.fancytree.prototype.widgetMethod1 = function(arg1) {\n\t\tvar tree = this.tree;\n\t\treturn arg1;\n\t};\n\n\t// Register a Fancytree extension\n\t// ------------------------------\n\t// A full blown extension, extension is available for all trees and can be\n\t// enabled like so (see also the [live demo](https://wwWendt.de/tech/fancytree/demo/sample-ext-childcounter.html)):\n\t//\n\t//    <script src=\"../src/jquery.fancytree.js\"></script>\n\t//    <script src=\"../src/jquery.fancytree.childcounter.js\"></script>\n\t//    ...\n\t//\n\t//     $(\"#tree\").fancytree({\n\t//         extensions: [\"childcounter\"],\n\t//         childcounter: {\n\t//             hideExpanded: true\n\t//         },\n\t//         ...\n\t//     });\n\t//\n\n\t/* 'childcounter' extension */\n\t$.ui.fancytree.registerExtension({\n\t\t// Every extension must be registered by a unique name.\n\t\tname: \"childcounter\",\n\t\t// Version information should be compliant with [semver](http://semver.org)\n\t\tversion: \"2.37.0\",\n\n\t\t// Extension specific options and their defaults.\n\t\t// This options will be available as `tree.options.childcounter.hideExpanded`\n\n\t\toptions: {\n\t\t\tdeep: true,\n\t\t\thideZeros: true,\n\t\t\thideExpanded: false,\n\t\t},\n\n\t\t// Attributes other than `options` (or functions) can be defined here, and\n\t\t// will be added to the tree.ext.EXTNAME namespace, in this case `tree.ext.childcounter.foo`.\n\t\t// They can also be accessed as `this._local.foo` from within the extension\n\t\t// methods.\n\t\tfoo: 42,\n\n\t\t// Local functions are prefixed with an underscore '_'.\n\t\t// Callable as `this._local._appendCounter()`.\n\n\t\t_appendCounter: function(bar) {\n\t\t\tvar tree = this;\n\t\t},\n\n\t\t// **Override virtual methods for this extension.**\n\t\t//\n\t\t// Fancytree implements a number of 'hook methods', prefixed by 'node...' or 'tree...'.\n\t\t// with a `ctx` argument (see [EventData](https://wwWendt.de/tech/fancytree/doc/jsdoc/global.html#EventData)\n\t\t// for details) and an extended calling context:<br>\n\t\t// `this`       : the Fancytree instance<br>\n\t\t// `this._local`: the namespace that contains extension attributes and private methods (same as this.ext.EXTNAME)<br>\n\t\t// `this._super`: the virtual function that was overridden (member of previous extension or Fancytree)\n\t\t//\n\t\t// See also the [complete list of available hook functions](https://wwWendt.de/tech/fancytree/doc/jsdoc/Fancytree_Hooks.html).\n\n\t\t/* Init */\n\t\t// `treeInit` is triggered when a tree is initalized. We can set up classes or\n\t\t// bind event handlers here...\n\t\ttreeInit: function(ctx) {\n\t\t\tvar tree = this, // same as ctx.tree,\n\t\t\t\topts = ctx.options,\n\t\t\t\textOpts = ctx.options.childcounter;\n\t\t\t// Optionally check for dependencies with other extensions\n\t\t\t/* this._requireExtension(\"glyph\", false, false); */\n\t\t\t// Call the base implementation\n\t\t\tthis._superApply(arguments);\n\t\t\t// Add a class to the tree container\n\t\t\tthis.$container.addClass(\"fancytree-ext-childcounter\");\n\t\t},\n\n\t\t// Destroy this tree instance (we only call the default implementation, so\n\t\t// this method could as well be omitted).\n\n\t\ttreeDestroy: function(ctx) {\n\t\t\tthis._superApply(arguments);\n\t\t},\n\n\t\t// Overload the `renderTitle` hook, to append a counter badge\n\t\tnodeRenderTitle: function(ctx, title) {\n\t\t\tvar node = ctx.node,\n\t\t\t\textOpts = ctx.options.childcounter,\n\t\t\t\tcount =\n\t\t\t\t\tnode.data.childCounter == null\n\t\t\t\t\t\t? node.countChildren(extOpts.deep)\n\t\t\t\t\t\t: +node.data.childCounter;\n\t\t\t// Let the base implementation render the title\n\t\t\t// We use `_super()` instead of `_superApply()` here, since it is a little bit\n\t\t\t// more performant when called often\n\t\t\tthis._super(ctx, title);\n\t\t\t// Append a counter badge\n\t\t\tif (\n\t\t\t\t(count || !extOpts.hideZeros) &&\n\t\t\t\t(!node.isExpanded() || !extOpts.hideExpanded)\n\t\t\t) {\n\t\t\t\t$(\n\t\t\t\t\t\"span.fancytree-icon,span.fancytree-custom-icon\",\n\t\t\t\t\tnode.span\n\t\t\t\t).append(\n\t\t\t\t\t$(\"<span class='fancytree-childcounter'/>\").text(count)\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t// Overload the `setExpanded` hook, so the counters are updated\n\t\tnodeSetExpanded: function(ctx, flag, callOpts) {\n\t\t\tvar tree = ctx.tree,\n\t\t\t\tnode = ctx.node;\n\t\t\t// Let the base implementation expand/collapse the node, then redraw the title\n\t\t\t// after the animation has finished\n\t\t\treturn this._superApply(arguments).always(function() {\n\t\t\t\ttree.nodeRenderTitle(ctx);\n\t\t\t});\n\t\t},\n\n\t\t// End of extension definition\n\t});\n\t// Value returned by `require('jquery.fancytree..')`\n\treturn $.ui.fancytree;\n}); // End of closure\n"]},"metadata":{},"sourceType":"script"}