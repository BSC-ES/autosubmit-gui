{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/experiment/JobMonitor.js\";\nimport React, { Component } from 'react';\n\nclass JobMonitor extends Component {\n  // const experimentContext = useContext(ExperimentContext);\n  // const { pkldata, loadingPkl } = experimentContext;\n  componentDidMount() {\n    if (this.props.experiment) {\n      this.props.getExperimentPkl(this.props.experiment.expid, this.props.experiment.pkl_timestamp);\n\n      if (this.props.experiment.running) {\n        this.interval = setInterval(() => this.props.getExperimentPkl(this.props.experiment.expid, this.props.experiment.pkl_timestamp), this.props.experiment.updateTime * 2000);\n      }\n    } // if (this.props.rundata){\n    //     console.log('DidMount Running.')\n    // }\n\n  }\n\n  componentWillUnmount() {\n    this.props.cleanPklData();\n\n    if (this.props.experiment.running) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          loadingPkl = _this$props.loadingPkl,\n          pklchanges = _this$props.pklchanges; // if (loadingPkl) return <div>Loading...</div>\n    // const currentDate = new Date();\n    // const datetime = currentDate.getHours() + \":\"\n    //                 + currentDate.getMinutes() + \":\"\n    //                 + currentDate.getSeconds();\n    // if (pklchanges) {            \n    //     return <div><small>{pklchanges}</small></div>\n    // } \n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      style: experimentStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-header text-center py-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Monitoring jobs...\")), React.createElement(\"div\", {\n      className: \"card-body p-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, pklchanges && React.createElement(\"textarea\", {\n      value: pklchanges,\n      className: \"monitorArea\",\n      style: monitorStyle,\n      readOnly: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), loadingPkl && React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Loading...\")))));\n  }\n\n}\n\nconst experimentStyle = {\n  height: 400\n};\nconst monitorStyle = {\n  height: 375\n};\nexport default JobMonitor;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/experiment/JobMonitor.js"],"names":["React","Component","JobMonitor","componentDidMount","props","experiment","getExperimentPkl","expid","pkl_timestamp","running","interval","setInterval","updateTime","componentWillUnmount","cleanPklData","clearInterval","render","loadingPkl","pklchanges","experimentStyle","monitorStyle","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAC/B;AACA;AACAE,EAAAA,iBAAiB,GAAE;AACf,QAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2B;AACvB,WAAKD,KAAL,CAAWE,gBAAX,CAA4B,KAAKF,KAAL,CAAWC,UAAX,CAAsBE,KAAlD,EAAyD,KAAKH,KAAL,CAAWC,UAAX,CAAsBG,aAA/E;;AACA,UAAI,KAAKJ,KAAL,CAAWC,UAAX,CAAsBI,OAA1B,EAAmC;AAC/B,aAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM,KAAKP,KAAL,CAAWE,gBAAX,CAA4B,KAAKF,KAAL,CAAWC,UAAX,CAAsBE,KAAlD,EAAyD,KAAKH,KAAL,CAAWC,UAAX,CAAsBG,aAA/E,CAAP,EAAuG,KAAKJ,KAAL,CAAWC,UAAX,CAAsBO,UAAtB,GAAmC,IAA1I,CAA3B;AACH;AACJ,KANc,CASf;AACA;AACA;;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKT,KAAL,CAAWU,YAAX;;AACA,QAAI,KAAKV,KAAL,CAAWC,UAAX,CAAsBI,OAA1B,EAAmC;AAC/BM,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACH;AACJ;;AAEDM,EAAAA,MAAM,GAAG;AAAA,wBAC8B,KAAKZ,KADnC;AAAA,UACGa,UADH,eACGA,UADH;AAAA,UACeC,UADf,eACeA,UADf,EAEL;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AACA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAEC,eAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,UAAU,IAEP;AACI,MAAA,KAAK,EAAEA,UADX;AAEI,MAAA,SAAS,EAAC,aAFd;AAGI,MAAA,KAAK,EAAEE,YAHX;AAII,MAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR,EAUKH,UAAU,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXJ,CAJJ,CADJ,CADJ,CADJ;AAyBH;;AA7D8B;;AAiEnC,MAAME,eAAe,GAAG;AACpBE,EAAAA,MAAM,EAAE;AADY,CAAxB;AAGA,MAAMD,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAArB;AAIA,eAAenB,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass JobMonitor extends Component {\n    // const experimentContext = useContext(ExperimentContext);\n    // const { pkldata, loadingPkl } = experimentContext;\n    componentDidMount(){\n        if (this.props.experiment) {\n            this.props.getExperimentPkl(this.props.experiment.expid, this.props.experiment.pkl_timestamp);\n            if (this.props.experiment.running) {\n                this.interval = setInterval(() => this.props.getExperimentPkl(this.props.experiment.expid, this.props.experiment.pkl_timestamp) , this.props.experiment.updateTime * 2000);\n            }\n        }\n       \n        \n        // if (this.props.rundata){\n        //     console.log('DidMount Running.')\n        // }\n    }\n\n    componentWillUnmount() {\n        this.props.cleanPklData();\n        if (this.props.experiment.running) {\n            clearInterval(this.interval);\n        }        \n    }\n\n    render() {\n        const { loadingPkl, pklchanges } = this.props;\n        // if (loadingPkl) return <div>Loading...</div>\n        // const currentDate = new Date();\n        // const datetime = currentDate.getHours() + \":\"\n        //                 + currentDate.getMinutes() + \":\"\n        //                 + currentDate.getSeconds();\n\n\n        // if (pklchanges) {            \n        //     return <div><small>{pklchanges}</small></div>\n        // } \n        return (\n            <div className='row'>\n                <div className='col-12'>\n                    <div className='card' style={experimentStyle}>\n                        <div className='card-header text-center py-0'>\n                            <small>Monitoring jobs...</small>\n                        </div>\n                        <div className='card-body p-0'>\n                            {pklchanges && \n\n                                <textarea \n                                    value={pklchanges} \n                                    className='monitorArea'\n                                    style={monitorStyle}\n                                    readOnly>                                        \n                                </textarea>                                \n                            }\n                            {loadingPkl &&\n                            <small>Loading...</small>}\n                        </div>\n                    </div>\n                </div>\n                    \n            </div>\n        );\n    }\n   \n}\n\nconst experimentStyle = {\n    height: 400\n  };\nconst monitorStyle = {\n    height: 375\n}\n\nexport default JobMonitor\n"]},"metadata":{},"sourceType":"module"}