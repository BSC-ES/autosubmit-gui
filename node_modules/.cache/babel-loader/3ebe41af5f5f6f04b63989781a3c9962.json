{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/pages/ExperimentCentral.js\";\nimport React, { Fragment, useContext } from 'react';\nimport Experiment from '../experiment/Experiment';\nimport GraphRepresentation from '../experiment/GraphRepresentation';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport Selection from '../experiment/Selection';\nimport OpenRun from '../experiment/OpenRun';\nimport Running from '../experiment/Running';\nimport JobMonitor from '../experiment/JobMonitor';\n\nconst ExperimentCentral = ({\n  match\n}) => {\n  const expid = match.params.expid;\n  const experimentContext = useContext(ExperimentContext);\n  const data = experimentContext.data,\n        updateSelection = experimentContext.updateSelection,\n        loadingGraph = experimentContext.loadingGraph,\n        loadingRun = experimentContext.loadingRun,\n        shouldUpdateGraph = experimentContext.shouldUpdateGraph,\n        cleanGraphData = experimentContext.cleanGraphData,\n        cleanRunData = experimentContext.cleanRunData,\n        getExperimentRun = experimentContext.getExperimentRun,\n        getExperimentPkl = experimentContext.getExperimentPkl,\n        cleanPklData = experimentContext.cleanPklData,\n        startAutoUpdateRun = experimentContext.startAutoUpdateRun,\n        startAutoUpdatePkl = experimentContext.startAutoUpdatePkl,\n        rundata = experimentContext.rundata,\n        pklchanges = experimentContext.pklchanges,\n        experiment = experimentContext.experiment;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Experiment, {\n    expidToken: expid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), startAutoUpdatePkl && React.createElement(JobMonitor, {\n    experiment: experiment,\n    getExperimentPkl: getExperimentPkl,\n    cleanPklData: cleanPklData,\n    pklchanges: pklchanges,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(GraphRepresentation, {\n    data: data,\n    updateSelection: updateSelection,\n    loadingGraph: loadingGraph,\n    cleanGraphData: cleanGraphData,\n    shouldUpdateGraph: shouldUpdateGraph,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Selection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(OpenRun, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), startAutoUpdateRun && React.createElement(Running, {\n    rundata: rundata,\n    loadingRun: loadingRun,\n    cleanRunData: cleanRunData,\n    getExperimentRun: getExperimentRun,\n    experiment: experiment,\n    startAutoUpdateRun: startAutoUpdateRun,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n};\n\nexport default ExperimentCentral;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/pages/ExperimentCentral.js"],"names":["React","Fragment","useContext","Experiment","GraphRepresentation","ExperimentContext","Selection","OpenRun","Running","JobMonitor","ExperimentCentral","match","expid","params","experimentContext","data","updateSelection","loadingGraph","loadingRun","shouldUpdateGraph","cleanGraphData","cleanRunData","getExperimentRun","getExperimentPkl","cleanPklData","startAutoUpdateRun","startAutoUpdatePkl","rundata","pklchanges","experiment"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport Experiment from '../experiment/Experiment';\nimport GraphRepresentation from '../experiment/GraphRepresentation';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport Selection from '../experiment/Selection';\nimport OpenRun from '../experiment/OpenRun';\nimport Running from '../experiment/Running';\nimport JobMonitor from '../experiment/JobMonitor';\n\nconst ExperimentCentral = ({ match }) => {\n    const expid = match.params.expid;\n    const experimentContext = useContext(ExperimentContext);\n    const {data, \n        updateSelection, \n        loadingGraph, \n        loadingRun, \n        shouldUpdateGraph,\n        cleanGraphData, \n        cleanRunData, \n        getExperimentRun,\n        getExperimentPkl, \n        cleanPklData,\n        startAutoUpdateRun, \n        startAutoUpdatePkl,\n        rundata,\n        pklchanges,\n        experiment } = experimentContext;\n    \n    return (\n    <Fragment>\n        <Experiment expidToken={expid} />        \n        {startAutoUpdatePkl &&\n            <JobMonitor \n                experiment={experiment} \n                getExperimentPkl={getExperimentPkl} \n                cleanPklData={cleanPklData}\n                pklchanges={pklchanges} />\n        }        \n        <GraphRepresentation data={data} updateSelection={updateSelection} loadingGraph={loadingGraph} cleanGraphData={cleanGraphData} shouldUpdateGraph={shouldUpdateGraph} />\n        <Selection />        \n        <OpenRun/>\n        {startAutoUpdateRun && <Running \n            rundata={rundata}\n            loadingRun={loadingRun} \n            cleanRunData={cleanRunData} \n            getExperimentRun={getExperimentRun}\n            experiment={experiment}  \n            startAutoUpdateRun={startAutoUpdateRun}\n        />} \n    </Fragment>\n    );\n};  \n\nexport default ExperimentCentral;"]},"metadata":{},"sourceType":"module"}