{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/context/experiment/ExperimentState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ExperimentContext from './experimentContext';\nimport ExperimentReducer from './experimentReducer';\nimport { SEARCH_EXPERIMENTS, SET_LOADING, CLEAR_EXPERIMENTS, GET_EXPERIMENT, GET_GRAPH, SET_LOADING_GRAPH, CLEAN_GRAPH_DATA, CLEAN_NAV_DATA, UPDATE_SELECTION, GET_EXPERIMENT_RUN, SET_LOADING_RUN, CLEAN_RUN_DATA, SET_AUTOUPDATE_RUN, GET_PKL_DATA, SET_LOADING_PKL, UPDATE_NODES, SHOULD_UPDATE_GRAPH, SET_AUTOUPDATE_PKL, CLEAN_PKL_DATA, SET_PKL_CHANGES, UPDATE_EXPERIMENT_TS, SET_VIS_DATA, SET_VIS_NETWORK, SET_FOUND_NODES, SET_LOADING_SEARCH_JOB, SET_LOADING_STATE, GET_RUNNING_STATE } from '../types';\n\nconst ExperimentState = props => {\n  const initialState = {\n    experiments: [],\n    experiment: {},\n    loading: false,\n    data: null,\n    rundata: null,\n    pkldata: null,\n    pklchanges: null,\n    loadingGraph: false,\n    loadingRun: false,\n    loadingState: false,\n    loadingPkl: false,\n    loadingSearchJob: false,\n    selection: null,\n    enabledGraphSearch: true,\n    startAutoUpdateRun: false,\n    startAutoUpdatePkl: false,\n    shouldUpdateGraph: false,\n    visNodes: null,\n    visNetwork: null,\n    foundNodes: null\n  };\n\n  const _useReducer = useReducer(ExperimentReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // const bscserver = 'http://192.168.11.91:8888'\n\n\n  const localserver = 'http://84.88.185.94:8081'; // Search Experiments\n\n  const searchExperiments = async text => {\n    setLoading();\n    const res = await axios.get(\"\".concat(localserver, \"/search/\").concat(text));\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: res.data.experiment\n    });\n  }; // Get Experiment\n\n\n  const getExperiment = async expid => {\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(\"\".concat(localserver, \"/expinfo/\").concat(expid));\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: res.data\n    });\n  }; // Get Experiment Graph\n\n\n  const getExperimentGraph = async expid => {\n    setLoadingGraph();\n    const res = await axios.get(\"\".concat(localserver, \"/graph/\").concat(expid));\n    console.log(res.data);\n    dispatch({\n      type: GET_GRAPH,\n      payload: res.data\n    }); //this.setState({ data: res.data, loading: false, showGraph: !res.data.error });\n  }; // Get Experiment Run\n\n\n  const getExperimentRun = async expid => {\n    setLoadingRun();\n    const res = await axios.get(\"\".concat(localserver, \"/exprun/\").concat(expid));\n    console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: res.data\n    });\n  }; // Get Running State\n\n\n  const getRunningState = async expid => {\n    setLoadingState();\n    const res = await axios.get(\"\".concat(localserver, \"/ifrun/\").concat(expid));\n    console.log(res.data);\n    let experimentLocal = state.experiment;\n    experimentLocal.running = res.data.running;\n    dispatch({\n      type: GET_RUNNING_STATE,\n      payload: experimentLocal\n    });\n  }; // Get Experiment Pkl Data\n\n\n  const getExperimentPkl = async (expid, timeStamp) => {\n    setLoadingPkl(); //timeStamp = 1000;\n\n    const res = await axios.get(\"\".concat(localserver, \"/pklinfo/\").concat(expid, \"/\").concat(timeStamp));\n    console.log(res.data); // const actualPkl = res.data;\n\n    let retrievedPkl = null;\n    var jobs = {};\n    var colorChanges = {};\n    var changes = \"\";\n    retrievedPkl = res.data;\n\n    if (state.data !== null && retrievedPkl.has_changed === true && retrievedPkl.pkl_content.length > 0) {\n      //console.log(retrievedPkl.pkl_content.length);\n      for (var j = 0, job; j < retrievedPkl.pkl_content.length; j++) {\n        job = retrievedPkl.pkl_content[j]; //console.log(job);\n\n        jobs[job.name] = job; //console.log(jobs[job.name]);git pu\n      }\n\n      let requireUpdate = false;\n      console.log('Current ts: ' + state.experiment.pkl_timestamp);\n      var newData = state.data; //console.log(newData.nodes);\n\n      var expData = state.experiment;\n\n      if (newData.nodes) {\n        for (var i = 0; i < newData.nodes.length; i++) {\n          // console.log(newNodes[i].id);\n          //console.log(newData.nodes[i]);\n          // console.log(jobs[ newNodes[i].id ]);\n          if (newData.nodes[i].status_code !== jobs[newData.nodes[i].id].status_code) {\n            // changes += newData.nodes[i].id + \" from \" + newData.nodes[i].status + \" to \" + jobs[ newData.nodes[i].id ].status + \" || \";\n            changes += timeStampToDate(retrievedPkl.pkl_timestamp) + \": \" + newData.nodes[i].id + \" to \" + jobs[newData.nodes[i].id].status + \"\\n\";\n            newData.nodes[i].status_code = jobs[newData.nodes[i].id].status_code;\n            newData.nodes[i].status_color = jobs[newData.nodes[i].id].status_color;\n            newData.nodes[i].status = jobs[newData.nodes[i].id].status; //console.log(newData.nodes[i].status_color)\n\n            colorChanges[newData.nodes[i].id] = jobs[newData.nodes[i].id].status_color;\n            requireUpdate = true;\n          }\n        }\n\n        if (requireUpdate) {\n          // console.log(newData.pkl_timestamp);\n          // console.log(expData.pkl_timestamp);\n          console.log(\"New ts: \" + retrievedPkl.pkl_timestamp);\n          newData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n          expData.pkl_timestamp = retrievedPkl.pkl_timestamp; // console.log(newData.pkl_timestamp);\n          // console.log(expData.pkl_timestamp);\n          // console.log('Call Update');\n\n          updateNodes(newData);\n          updateExperimentTimeStamp(expData); // setUpdateGraph(true);\n          // setUpdateGraph(false);\n\n          if (state.pklchanges) {\n            setPklChanges(changes + state.pklchanges);\n          } else {\n            setPklChanges(changes);\n          }\n\n          for (var key in colorChanges) {\n            //console.log( key, colorChanges[key] );\n            updateGraphColor(key, colorChanges[key]);\n          }\n        } else {\n          console.log('No changes but updating pkl anyway.');\n          expData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n          updateExperimentTimeStamp(expData);\n        }\n      }\n    } // } else {\n    //   var t = new Date( retrievedPkl.pkl_timestamp );\n    //   var formatted = t.toISOString();\n    //   setPklChanges(\"No news yet... \" + formatted)\n    // }\n\n\n    dispatch({\n      type: GET_PKL_DATA,\n      payload: res.data\n    });\n  }; // Graph manipulation\n\n\n  const updateGraphColor = (idChange, newColor) => {\n    //console.log(state.visNodes);\n    state.visNodes.update({\n      id: idChange,\n      color: {\n        background: newColor\n      }\n    });\n  };\n\n  const navigateGraph = (posx, posy) => {\n    // console.log(posx);\n    // console.log(posy);\n    // console.log(state.visNetwork);\n    // console.log(state.visNodes);\n    state.visNetwork.moveTo({\n      position: {\n        x: posx,\n        y: posy\n      },\n      scale: 0.9,\n      //offset: {x: 30, y: 30},\n      animation: false\n    });\n  };\n\n  const navToLatest = statusCode => {\n    //const statusCode = 5; // Completed\n    var currentLevel = 0; //var currentNode = null;\n\n    var latestId = \"not found\"; //console.log(state.data.nodes);\n\n    if (state.data.nodes) {\n      //console.log(\"Iterate\")\n      for (const node of state.data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level >= currentLevel) {\n            currentLevel = node.level; //currentNode = node;\n\n            latestId = node.id;\n          }\n        }\n      }\n    }\n\n    var currentPosition = state.visNetwork.getPositions([latestId]); //console.log(currentPosition);\n\n    if (currentPosition[latestId]) {\n      navigateGraph(currentPosition[latestId].x, currentPosition[latestId].y); // setMessageNavigator(latestId, true);\n\n      state.visNetwork.selectNodes([latestId]);\n      updateSelection([latestId]); //updateSelection(currentNode);\n    } else {\n      updateSelection(null); //setMessageNavigator(\"There are no nodes with that status.\", false)\n    }\n  };\n\n  const navigateTo = Id => {\n    if (state.visNetwork) {\n      var currentPosition = state.visNetwork.getPositions([Id]);\n\n      if (currentPosition[Id]) {\n        navigateGraph(currentPosition[Id].x, currentPosition[Id].y);\n        state.visNetwork.selectNodes([Id]);\n        updateSelection([Id]);\n      }\n    }\n  };\n\n  const searchJobInGraph = async string => {\n    setLoadingSearchJob();\n\n    if (state.data.nodes) {\n      const foundNodes = await state.data.nodes.filter(node => node.id.indexOf(string) >= 0); // console.log(foundNodes);\n      // console.log(foundNodes.length);\n\n      if (foundNodes && foundNodes.length > 0) {\n        dispatch({\n          type: SET_FOUND_NODES,\n          payload: foundNodes\n        }); //console.log(foundNodes[0].id);\n\n        navigateTo(foundNodes[0].id);\n        updateSelection([foundNodes[0].id]); //console.log('Life after dispatch')\n\n        return;\n      }\n    }\n\n    dispatch({\n      type: SET_FOUND_NODES,\n      payload: null\n    });\n  }; // Cleaning\n\n\n  const clearExperiments = () => dispatch({\n    type: CLEAR_EXPERIMENTS\n  });\n\n  const cleanGraphData = () => dispatch({\n    type: CLEAN_GRAPH_DATA\n  });\n\n  const cleanRunData = () => dispatch({\n    type: CLEAN_RUN_DATA\n  });\n\n  const cleanPklData = () => dispatch({\n    type: CLEAN_PKL_DATA\n  });\n\n  const cleanNavData = () => dispatch({\n    type: CLEAN_NAV_DATA\n  }); // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setLoadingGraph = () => dispatch({\n    type: SET_LOADING_GRAPH\n  });\n\n  const setLoadingRun = () => dispatch({\n    type: SET_LOADING_RUN\n  });\n\n  const setLoadingPkl = () => dispatch({\n    type: SET_LOADING_PKL\n  });\n\n  const setLoadingSearchJob = () => dispatch({\n    type: SET_LOADING_SEARCH_JOB\n  });\n\n  const setLoadingState = () => dispatch({\n    type: SET_LOADING_STATE\n  }); // Action Things\n\n\n  const updateSelection = currentSelection => dispatch({\n    type: UPDATE_SELECTION,\n    payload: currentSelection\n  });\n\n  const updateNodes = newdata => dispatch({\n    type: UPDATE_NODES,\n    payload: newdata\n  });\n\n  const updateExperimentTimeStamp = newExperiment => dispatch({\n    type: UPDATE_EXPERIMENT_TS,\n    payload: newExperiment\n  });\n\n  const setAutoUpdateRun = value => dispatch({\n    type: SET_AUTOUPDATE_RUN,\n    payload: value\n  });\n\n  const setAutoUpdatePkl = value => dispatch({\n    type: SET_AUTOUPDATE_PKL,\n    payload: value\n  });\n\n  const setUpdateGraph = value => dispatch({\n    type: SHOULD_UPDATE_GRAPH,\n    payload: value\n  });\n\n  const setPklChanges = value => dispatch({\n    type: SET_PKL_CHANGES,\n    payload: value\n  });\n\n  const setVisData = value => dispatch({\n    type: SET_VIS_DATA,\n    payload: value\n  });\n\n  const setVisNetwork = value => dispatch({\n    type: SET_VIS_NETWORK,\n    payload: value\n  }); // Other Utils\n\n\n  const hashCode = value => {\n    var hash = 0,\n        i,\n        chr;\n    if (value.length === 0) return hash;\n\n    for (i = 0; i < value.length; i++) {\n      chr = value.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    console.log(hash);\n    return hash;\n  };\n\n  const timeStampToDate = value => {\n    //console.log('Setting new format: ' + value);\n    let formattedDate = \"\";\n    var date = new Date(value * 1000);\n    var hours = date.getHours();\n    var minutes = \"0\" + date.getMinutes();\n    var seconds = \"0\" + date.getSeconds();\n    formattedDate = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2); // formattedDate = date.toISOString();\n\n    return formattedDate;\n  };\n\n  return React.createElement(ExperimentContext.Provider, {\n    value: {\n      experiments: state.experiments,\n      experiment: state.experiment,\n      loading: state.loading,\n      loadingGraph: state.loadingGraph,\n      loadingRun: state.loadingRun,\n      loadingPkl: state.loadingPkl,\n      loadingSearchJob: state.loadingSearchJob,\n      loadingState: state.loadingState,\n      data: state.data,\n      rundata: state.rundata,\n      pklchanges: state.pklchanges,\n      selection: state.selection,\n      enabledGraphSearch: state.enabledGraphSearch,\n      startAutoUpdateRun: state.startAutoUpdateRun,\n      startAutoUpdatePkl: state.startAutoUpdatePkl,\n      shouldUpdateGraph: state.shouldUpdateGraph,\n      visNodes: state.visNodes,\n      visNetwork: state.visNetwork,\n      foundNodes: state.foundNodes,\n      setAutoUpdateRun,\n      setAutoUpdatePkl,\n      searchExperiments,\n      clearExperiments,\n      getExperiment,\n      getExperimentGraph,\n      cleanGraphData,\n      cleanRunData,\n      cleanPklData,\n      cleanNavData,\n      setPklChanges,\n      updateSelection,\n      getExperimentRun,\n      getExperimentPkl,\n      hashCode,\n      timeStampToDate,\n      setVisData,\n      setVisNetwork,\n      updateGraphColor,\n      navigateGraph,\n      setUpdateGraph,\n      navToLatest,\n      searchJobInGraph,\n      navigateTo,\n      getRunningState\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ExperimentState;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/context/experiment/ExperimentState.js"],"names":["React","useReducer","axios","ExperimentContext","ExperimentReducer","SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","GET_GRAPH","SET_LOADING_GRAPH","CLEAN_GRAPH_DATA","CLEAN_NAV_DATA","UPDATE_SELECTION","GET_EXPERIMENT_RUN","SET_LOADING_RUN","CLEAN_RUN_DATA","SET_AUTOUPDATE_RUN","GET_PKL_DATA","SET_LOADING_PKL","UPDATE_NODES","SHOULD_UPDATE_GRAPH","SET_AUTOUPDATE_PKL","CLEAN_PKL_DATA","SET_PKL_CHANGES","UPDATE_EXPERIMENT_TS","SET_VIS_DATA","SET_VIS_NETWORK","SET_FOUND_NODES","SET_LOADING_SEARCH_JOB","SET_LOADING_STATE","GET_RUNNING_STATE","ExperimentState","props","initialState","experiments","experiment","loading","data","rundata","pkldata","pklchanges","loadingGraph","loadingRun","loadingState","loadingPkl","loadingSearchJob","selection","enabledGraphSearch","startAutoUpdateRun","startAutoUpdatePkl","shouldUpdateGraph","visNodes","visNetwork","foundNodes","state","dispatch","localserver","searchExperiments","text","setLoading","res","get","type","payload","getExperiment","expid","getExperimentGraph","setLoadingGraph","console","log","getExperimentRun","setLoadingRun","getRunningState","setLoadingState","experimentLocal","running","getExperimentPkl","timeStamp","setLoadingPkl","retrievedPkl","jobs","colorChanges","changes","has_changed","pkl_content","length","j","job","name","requireUpdate","pkl_timestamp","newData","expData","nodes","i","status_code","id","timeStampToDate","status","status_color","updateNodes","updateExperimentTimeStamp","setPklChanges","key","updateGraphColor","idChange","newColor","update","color","background","navigateGraph","posx","posy","moveTo","position","x","y","scale","animation","navToLatest","statusCode","currentLevel","latestId","node","level","currentPosition","getPositions","selectNodes","updateSelection","navigateTo","Id","searchJobInGraph","string","setLoadingSearchJob","filter","indexOf","clearExperiments","cleanGraphData","cleanRunData","cleanPklData","cleanNavData","currentSelection","newdata","newExperiment","setAutoUpdateRun","value","setAutoUpdatePkl","setUpdateGraph","setVisData","setVisNetwork","hashCode","hash","chr","charCodeAt","formattedDate","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ExperimentContext from './experimentContext';\nimport ExperimentReducer from './experimentReducer';\nimport {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  GET_GRAPH,\n  SET_LOADING_GRAPH,\n  CLEAN_GRAPH_DATA,\n  CLEAN_NAV_DATA,\n  UPDATE_SELECTION,\n  GET_EXPERIMENT_RUN,\n  SET_LOADING_RUN,\n  CLEAN_RUN_DATA,\n  SET_AUTOUPDATE_RUN,\n  GET_PKL_DATA,\n  SET_LOADING_PKL,\n  UPDATE_NODES,\n  SHOULD_UPDATE_GRAPH,\n  SET_AUTOUPDATE_PKL,\n  CLEAN_PKL_DATA,\n  SET_PKL_CHANGES,\n  UPDATE_EXPERIMENT_TS,\n  SET_VIS_DATA,\n  SET_VIS_NETWORK,\n  SET_FOUND_NODES,\n  SET_LOADING_SEARCH_JOB,\n  SET_LOADING_STATE,\n  GET_RUNNING_STATE,\n} from '../types';\n\nconst ExperimentState = props => {\n    const initialState = {\n        experiments: [],\n        experiment: {},\n        loading: false,\n        data: null,\n        rundata: null,\n        pkldata: null,\n        pklchanges: null,\n        loadingGraph: false,\n        loadingRun: false,\n        loadingState: false,\n        loadingPkl: false,\n        loadingSearchJob: false,\n        selection: null,\n        enabledGraphSearch: true,  \n        startAutoUpdateRun: false,  \n        startAutoUpdatePkl: false,\n        shouldUpdateGraph: false,   \n        visNodes: null, \n        visNetwork: null,\n        foundNodes: null,\n    }\n\n    const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n    // const bscserver = 'http://192.168.11.91:8888'\n    const localserver= 'http://84.88.185.94:8081'\n\n    // Search Experiments\n    const searchExperiments = async text => {\n        setLoading();\n        const res = await axios.get(`${localserver}/search/${text}`);\n        dispatch({\n            type: SEARCH_EXPERIMENTS,\n            payload: res.data.experiment,\n        });\n      };\n\n    // Get Experiment\n    const getExperiment = async expid => {\n        setLoading();\n        //cleanGraphData();\n        const res = await axios.get(`${localserver}/expinfo/${expid}`);        \n        dispatch({\n            type: GET_EXPERIMENT,\n            payload: res.data,\n        });\n      };\n    \n    // Get Experiment Graph\n    const getExperimentGraph = async expid => {\n        setLoadingGraph();\n        \n        const res = await axios.get(`${localserver}/graph/${expid}`);\n        console.log(res.data);\n        dispatch({\n            type: GET_GRAPH,\n            payload: res.data,\n        });\n        //this.setState({ data: res.data, loading: false, showGraph: !res.data.error });\n      };\n\n    // Get Experiment Run\n    const getExperimentRun = async expid => {\n        setLoadingRun();\n        const res = await axios.get(`${localserver}/exprun/${expid}`);\n        console.log(res.data);\n        dispatch({\n            type: GET_EXPERIMENT_RUN,\n            payload: res.data,\n        });\n    }\n\n    // Get Running State\n    const getRunningState = async expid => {\n      setLoadingState();\n      const res = await axios.get(`${localserver}/ifrun/${expid}`);\n      console.log(res.data);\n      let experimentLocal = state.experiment;\n      experimentLocal.running = res.data.running;\n      dispatch({\n        type: GET_RUNNING_STATE,\n        payload: experimentLocal,\n      });\n\n    }\n\n    // Get Experiment Pkl Data\n    const getExperimentPkl = async (expid, timeStamp) => {\n      setLoadingPkl();\n      //timeStamp = 1000;\n      const res = await axios.get(`${localserver}/pklinfo/${expid}/${timeStamp}`);\n      console.log(res.data);\n      // const actualPkl = res.data;\n      \n      let retrievedPkl = null;\n      var jobs = {};\n      var colorChanges = {};\n      var changes = \"\"\n      retrievedPkl = res.data;\n      if (state.data !== null && retrievedPkl.has_changed === true && retrievedPkl.pkl_content.length > 0){\n        //console.log(retrievedPkl.pkl_content.length);\n        for(var j = 0, job; j < retrievedPkl.pkl_content.length; j++){\n          job = retrievedPkl.pkl_content[j];\n          //console.log(job);\n          jobs[ job.name ] = job;\n          //console.log(jobs[job.name]);git pu\n        }\n        let requireUpdate = false;\n        console.log('Current ts: '+ state.experiment.pkl_timestamp);        \n        var newData = state.data;\n        //console.log(newData.nodes);\n        var expData = state.experiment;\n        if (newData.nodes){\n          for(var i = 0; i < newData.nodes.length; i++){\n            // console.log(newNodes[i].id);\n            //console.log(newData.nodes[i]);\n            // console.log(jobs[ newNodes[i].id ]);\n\n            if (newData.nodes[i].status_code !== jobs[ newData.nodes[i].id ].status_code){\n              // changes += newData.nodes[i].id + \" from \" + newData.nodes[i].status + \" to \" + jobs[ newData.nodes[i].id ].status + \" || \";\n              changes += timeStampToDate(retrievedPkl.pkl_timestamp) + \": \"+ newData.nodes[i].id + \" to \" + jobs[ newData.nodes[i].id ].status + \"\\n\";\n              newData.nodes[i].status_code = jobs[ newData.nodes[i].id ].status_code;\n              newData.nodes[i].status_color = jobs[ newData.nodes[i].id ].status_color;\n              newData.nodes[i].status = jobs[ newData.nodes[i].id ].status;\n              //console.log(newData.nodes[i].status_color)\n              colorChanges[ newData.nodes[i].id  ] = jobs[ newData.nodes[i].id ].status_color;\n              requireUpdate = true;\n            }\n          }\n\n\n          if (requireUpdate){            \n            // console.log(newData.pkl_timestamp);\n            // console.log(expData.pkl_timestamp);\n            console.log(\"New ts: \" + retrievedPkl.pkl_timestamp)\n            newData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            expData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            // console.log(newData.pkl_timestamp);\n            // console.log(expData.pkl_timestamp);\n            \n            // console.log('Call Update');\n            updateNodes(newData);\n            updateExperimentTimeStamp(expData);\n            // setUpdateGraph(true);\n            // setUpdateGraph(false);\n            if (state.pklchanges){\n              setPklChanges(changes + state.pklchanges);\n            } else {\n              setPklChanges(changes);\n            }\n\n            for(var key in colorChanges) {\n              //console.log( key, colorChanges[key] );\n              updateGraphColor(key, colorChanges[key]);\n            }\n            \n  \n          } else { \n            console.log('No changes but updating pkl anyway.')\n            expData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            updateExperimentTimeStamp(expData);\n          }\n        }\n      }\n      // } else {\n      //   var t = new Date( retrievedPkl.pkl_timestamp );\n      //   var formatted = t.toISOString();\n      //   setPklChanges(\"No news yet... \" + formatted)\n      // }\n\n\n      dispatch({\n        type: GET_PKL_DATA,\n        payload: res.data,\n      });\n    }\n\n    // Graph manipulation\n    const updateGraphColor = (idChange, newColor) => {\n      //console.log(state.visNodes);\n      state.visNodes.update({id:idChange, color: { background: newColor }});\n    };\n\n    const navigateGraph = (posx, posy) => {\n      // console.log(posx);\n      // console.log(posy);\n      // console.log(state.visNetwork);\n      // console.log(state.visNodes);\n      state.visNetwork.moveTo(\n        {\n          position: {x: posx, y: posy },\n          scale: 0.9,\n          //offset: {x: 30, y: 30},\n          animation: false,\n        }\n      );      \n    };\n\n    const navToLatest = (statusCode) => {\n      //const statusCode = 5; // Completed\n      var currentLevel = 0;\n      //var currentNode = null;\n      var latestId = \"not found\";\n      //console.log(state.data.nodes);\n      if (state.data.nodes) {\n        //console.log(\"Iterate\")\n        for (const node of state.data.nodes){\n          if (node.status_code === statusCode){\n            if (node.level >= currentLevel){\n              currentLevel = node.level;\n              //currentNode = node;\n              latestId = node.id;\n            }\n          }\n        }\n      }      \n      var currentPosition = state.visNetwork.getPositions([latestId]);\n      //console.log(currentPosition);\n      if (currentPosition[latestId]){\n        navigateGraph(currentPosition[latestId].x, currentPosition[latestId].y);\n        // setMessageNavigator(latestId, true);\n        state.visNetwork.selectNodes([latestId]);\n        updateSelection([latestId]);\n        //updateSelection(currentNode);\n      } else {\n        updateSelection(null);\n        //setMessageNavigator(\"There are no nodes with that status.\", false)\n      }      \n    }\n\n    const navigateTo = Id => {\n      if (state.visNetwork){\n        var currentPosition = state.visNetwork.getPositions([Id]);\n        if (currentPosition[Id]){\n          navigateGraph(currentPosition[Id].x, currentPosition[Id].y);\n          state.visNetwork.selectNodes([Id]);    \n          updateSelection([Id]);         \n        } \n      }\n      \n    }\n\n    const searchJobInGraph = async string => {\n      setLoadingSearchJob();\n      if (state.data.nodes) {\n        const foundNodes = await state.data.nodes.filter(node => node.id.indexOf(string) >= 0);\n       // console.log(foundNodes);\n        // console.log(foundNodes.length);\n        if (foundNodes && foundNodes.length > 0) {\n          dispatch({\n            type: SET_FOUND_NODES,\n            payload: foundNodes,\n          });\n\n          //console.log(foundNodes[0].id);\n          navigateTo(foundNodes[0].id);\n          updateSelection([foundNodes[0].id]);\n      \n          //console.log('Life after dispatch')\n          return;\n        }\n      }\n\n      dispatch({\n        type: SET_FOUND_NODES,\n        payload: null,\n      });\n\n    }\n\n\n\n    // Cleaning\n    const clearExperiments = () => dispatch({ type: CLEAR_EXPERIMENTS });\n    const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n    const cleanRunData = () => dispatch({ type: CLEAN_RUN_DATA });\n    const cleanPklData = () => dispatch({ type: CLEAN_PKL_DATA });\n    const cleanNavData = () => dispatch({ type: CLEAN_NAV_DATA });\n\n    // Set Loading\n    const setLoading = () => dispatch({ type: SET_LOADING });\n    const setLoadingGraph = () => dispatch({ type: SET_LOADING_GRAPH });\n    const setLoadingRun = () => dispatch({ type: SET_LOADING_RUN });\n    const setLoadingPkl = () => dispatch({ type: SET_LOADING_PKL });\n    const setLoadingSearchJob = () => dispatch({ type: SET_LOADING_SEARCH_JOB});\n    const setLoadingState = () => dispatch({ type: SET_LOADING_STATE});\n\n\n    // Action Things\n    const updateSelection = (currentSelection) => dispatch({ type: UPDATE_SELECTION, payload: currentSelection });\n    const updateNodes = (newdata) => dispatch({ type: UPDATE_NODES, payload: newdata });\n    const updateExperimentTimeStamp = (newExperiment) => dispatch({ type: UPDATE_EXPERIMENT_TS, payload: newExperiment});\n    const setAutoUpdateRun = (value) => dispatch({ type: SET_AUTOUPDATE_RUN, payload: value });\n    const setAutoUpdatePkl = (value) => dispatch({ type: SET_AUTOUPDATE_PKL, payload: value });\n    const setUpdateGraph = (value) => dispatch({ type: SHOULD_UPDATE_GRAPH, payload: value });\n    const setPklChanges = (value) => dispatch({ type: SET_PKL_CHANGES, payload: value });\n    const setVisData = (value) => dispatch({ type: SET_VIS_DATA, payload: value});\n    const setVisNetwork = (value) => dispatch({ type: SET_VIS_NETWORK, payload: value });\n\n\n    // Other Utils\n    const hashCode = (value) => {\n        var hash = 0, i, chr;\n        if (value.length === 0) return hash;\n        for (i = 0; i < value.length; i++) {\n          chr   = value.charCodeAt(i);\n          hash  = ((hash << 5) - hash) + chr;\n          hash |= 0; // Convert to 32bit integer\n        }\n        console.log(hash);\n        return hash;\n      };\n      \n    const timeStampToDate = (value) => {\n      //console.log('Setting new format: ' + value);\n      let formattedDate = \"\";\n      var date = new Date( value * 1000);\n      var hours = date.getHours();\n      var minutes = \"0\" + date.getMinutes();\n      var seconds = \"0\" + date.getSeconds();\n      formattedDate = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      // formattedDate = date.toISOString();\n      return formattedDate;\n    }\n\n    return (\n        <ExperimentContext.Provider\n        value ={{\n            experiments: state.experiments,\n            experiment: state.experiment,\n            loading: state.loading,\n            loadingGraph: state.loadingGraph,\n            loadingRun: state.loadingRun,\n            loadingPkl: state.loadingPkl,\n            loadingSearchJob: state.loadingSearchJob,\n            loadingState: state.loadingState,\n            data: state.data,\n            rundata: state.rundata,\n            pklchanges: state.pklchanges,\n            selection: state.selection,\n            enabledGraphSearch: state.enabledGraphSearch,\n            startAutoUpdateRun: state.startAutoUpdateRun,\n            startAutoUpdatePkl: state.startAutoUpdatePkl,\n            shouldUpdateGraph: state.shouldUpdateGraph,\n            visNodes: state.visNodes,\n            visNetwork: state.visNetwork,\n            foundNodes: state.foundNodes,            \n            setAutoUpdateRun,\n            setAutoUpdatePkl,\n            searchExperiments,\n            clearExperiments,\n            getExperiment,\n            getExperimentGraph,\n            cleanGraphData, \n            cleanRunData,\n            cleanPklData,\n            cleanNavData,\n            setPklChanges,\n            updateSelection,\n            getExperimentRun, \n            getExperimentPkl,           \n            hashCode,       \n            timeStampToDate,\n            setVisData,\n            setVisNetwork,\n            updateGraphColor,\n            navigateGraph,\n            setUpdateGraph,\n            navToLatest,\n            searchJobInGraph,\n            navigateTo,\n            getRunningState,\n        }}>\n            {props.children}\n        </ExperimentContext.Provider>\n    );\n};\n\nexport default ExperimentState;"]},"metadata":{},"sourceType":"module"}