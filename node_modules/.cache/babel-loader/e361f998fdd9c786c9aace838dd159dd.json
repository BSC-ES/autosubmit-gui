{"ast":null,"code":"export const timeStampToDate = value => {\n  //console.log('Setting new format: ' + value);\n  let formattedDate = \"\";\n  var date = new Date(value * 1000);\n  var hours = date.getHours();\n  var minutes = \"0\" + date.getMinutes();\n  var seconds = \"0\" + date.getSeconds();\n  var month = date.getMonth() + 1;\n  var day = date.getDate(); //console.log(date)\n\n  formattedDate = \"[\" + day + \"/\" + month + \"] \" + hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2); // formattedDate = date.toISOString();\n\n  return formattedDate;\n};\nexport const hashCode = value => {\n  var hash = 0,\n      i,\n      chr;\n  if (value.length === 0) return hash;\n\n  for (i = 0; i < value.length; i++) {\n    chr = value.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  console.log(hash);\n  return hash;\n};\nexport const commandGeneratorGraph = (expid, jobs, status) => {\n  let command = \"Invalid Command: You have to select at least one job.\"; //jobs.map((job) => arrayNames.push(job.name));\n\n  if (jobs.length > 0) {\n    command = \"autosubmit setstatus \" + expid + ' -fl \"' + jobs.join(\" \") + '\" -t ' + status + \" -s -nt -np\";\n  }\n\n  return command;\n};\nexport const commandGenerator = (expid, jobs, status) => {\n  let arrayNames = []; //let command = \"Invalid Command: You have to select at least one job.\";\n\n  jobs.map(job => arrayNames.push(job.name));\n  return commandGeneratorGraph(expid, arrayNames, status); // if (arrayNames.length > 0) {\n  //   command =\n  //     \"autosubmit setstatus \" +\n  //     expid +\n  //     ' -fl \"' +\n  //     arrayNames.join(\" \") +\n  //     '\" -t ' +\n  //     status +\n  //     \" -s -nt -np\";\n  // }\n  // return command;\n};\nexport const statusChangeTextGeneratorGraph = (expid, jobs, status) => {\n  let command = \"Invalid Command: You have to select at least one job.\"; //jobs.map((job) => arrayNames.push(job.name));\n\n  if (jobs.length > 0) {\n    command = \"autosubmit setstatus \" + expid + ' -fl \"' + jobs.join(\" \") + '\" -t ' + status + \" -s -nt -np\";\n  }\n\n  return command;\n};\nexport const secondsToDelta = SECONDS => {\n  if (SECONDS > 0) {\n    var sec_num = SECONDS; // don't forget the second param\n\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - hours * 3600) / 60);\n    var seconds = sec_num - hours * 3600 - minutes * 60;\n\n    if (hours < 10) {\n      hours = \"0\" + hours;\n    }\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return hours + \":\" + minutes + \":\" + seconds;\n  } else {\n    return \"0:00:00\";\n  }\n};\nvar startTime, endTime;\nexport const start = () => {\n  startTime = new Date();\n};\nexport const end = () => {\n  endTime = new Date();\n  var timeDiff = endTime - startTime; //in ms\n  // strip the ms\n\n  timeDiff /= 1000; // get seconds\n\n  var seconds = Math.round(timeDiff);\n  console.log(seconds + \" seconds\");\n};\nexport const approximateLoadingTreeTime = x => {\n  if (x <= 1000) return 1;\n  let y = Math.round(0.02 * x - 30);\n  return y;\n};\nexport const approximateLoadingQuickView = x => {\n  if (x <= 2000) return 1;\n  let y = Math.round(0.005 * x - 37);\n  return y;\n};\nexport const exportHistoryToCSV = (data, columnNames, title) => {\n  let date = new Date();\n  title = date.getFullYear().toString() + date.getMonth() + date.getDate() + date.getHours() + date.getMinutes() + \"_\" + title;\n  let csvContent = \"data:text/csv;charset=utf-8,\";\n  csvContent += columnNames.join(\",\") + \"\\n\";\n\n  if (data) {\n    let mapped = [];\n    data.map(item => mapped.push([item.counter, item.job_id, item.submit, item.start, item.finish, item.queue_time, item.run_time, item.status, item.energy, item.wallclock, item.ncpus, item.nodes]));\n    csvContent += mapped.map(item => item.join(\",\")).join(\"\\n\");\n  }\n\n  var encodedUri = encodeURI(csvContent);\n  var link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodedUri);\n  link.setAttribute(\"download\", title);\n  document.body.appendChild(link); // Required for FF\n\n  link.click();\n};\nexport const sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/utils.js"],"names":["timeStampToDate","value","formattedDate","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","month","getMonth","day","getDate","substr","hashCode","hash","i","chr","length","charCodeAt","console","log","commandGeneratorGraph","expid","jobs","status","command","join","commandGenerator","arrayNames","map","job","push","name","statusChangeTextGeneratorGraph","secondsToDelta","SECONDS","sec_num","Math","floor","startTime","endTime","start","end","timeDiff","round","approximateLoadingTreeTime","x","y","approximateLoadingQuickView","exportHistoryToCSV","data","columnNames","title","getFullYear","toString","csvContent","mapped","item","counter","job_id","submit","finish","queue_time","run_time","energy","wallclock","ncpus","nodes","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","sleep","ms","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["export const timeStampToDate = (value) => {\n  //console.log('Setting new format: ' + value);\n  let formattedDate = \"\";\n  var date = new Date(value * 1000);\n  var hours = date.getHours();\n  var minutes = \"0\" + date.getMinutes();\n  var seconds = \"0\" + date.getSeconds();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  //console.log(date)\n  formattedDate =\n    \"[\" +\n    day +\n    \"/\" +\n    month +\n    \"] \" +\n    hours +\n    \":\" +\n    minutes.substr(-2) +\n    \":\" +\n    seconds.substr(-2);\n  // formattedDate = date.toISOString();\n  return formattedDate;\n};\n\nexport const hashCode = (value) => {\n  var hash = 0,\n    i,\n    chr;\n  if (value.length === 0) return hash;\n  for (i = 0; i < value.length; i++) {\n    chr = value.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  console.log(hash);\n  return hash;\n};\n\nexport const commandGeneratorGraph = (expid, jobs, status) => {\n  let command = \"Invalid Command: You have to select at least one job.\";\n  //jobs.map((job) => arrayNames.push(job.name));\n  if (jobs.length > 0) {\n    command =\n      \"autosubmit setstatus \" +\n      expid +\n      ' -fl \"' +\n      jobs.join(\" \") +\n      '\" -t ' +\n      status +\n      \" -s -nt -np\";\n  }\n  return command;\n};\n\nexport const commandGenerator = (expid, jobs, status) => {\n  let arrayNames = [];\n  //let command = \"Invalid Command: You have to select at least one job.\";\n  jobs.map((job) => arrayNames.push(job.name));\n\n  return commandGeneratorGraph(expid, arrayNames, status);\n  // if (arrayNames.length > 0) {\n  //   command =\n  //     \"autosubmit setstatus \" +\n  //     expid +\n  //     ' -fl \"' +\n  //     arrayNames.join(\" \") +\n  //     '\" -t ' +\n  //     status +\n  //     \" -s -nt -np\";\n  // }\n  // return command;\n};\n\nexport const statusChangeTextGeneratorGraph = (expid, jobs, status) => {\n  let command = \"Invalid Command: You have to select at least one job.\";\n  //jobs.map((job) => arrayNames.push(job.name));\n  if (jobs.length > 0) {\n    command =\n      \"autosubmit setstatus \" +\n      expid +\n      ' -fl \"' +\n      jobs.join(\" \") +\n      '\" -t ' +\n      status +\n      \" -s -nt -np\";\n  }\n  return command;\n}\n\nexport const secondsToDelta = (SECONDS) => {\n  if (SECONDS > 0) {\n    var sec_num = SECONDS; // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - hours * 3600) / 60);\n    var seconds = sec_num - hours * 3600 - minutes * 60;\n\n    if (hours < 10) {\n      hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n    return hours + \":\" + minutes + \":\" + seconds;\n  } else {\n    return \"0:00:00\";\n  }\n};\n\nvar startTime, endTime;\n\nexport const start = () => {\n  startTime = new Date();\n};\n\nexport const end = () => {\n  endTime = new Date();\n  var timeDiff = endTime - startTime; //in ms\n  // strip the ms\n  timeDiff /= 1000;\n\n  // get seconds\n  var seconds = Math.round(timeDiff);\n  console.log(seconds + \" seconds\");\n};\n\nexport const approximateLoadingTreeTime = (x) => {\n  if (x <= 1000) return 1;\n  let y = Math.round(0.02 * x - 30);\n  return y;\n};\n\nexport const approximateLoadingQuickView = (x) => {\n  if (x <= 2000) return 1;\n  let y = Math.round(0.005 * x - 37);\n  return y;\n};\n\nexport const exportHistoryToCSV = (data, columnNames, title) => {\n  \n  let date = new Date();  \n  title =  date.getFullYear().toString() + date.getMonth() + date.getDate() + date.getHours() + date.getMinutes() + \"_\" + title;\n  let csvContent = \"data:text/csv;charset=utf-8,\";\n  csvContent += columnNames.join(\",\") + \"\\n\";\n  if (data){\n    let mapped = []\n    data.map((item) => mapped.push([item.counter,item.job_id,item.submit,item.start,item.finish,item.queue_time,item.run_time, item.status, item.energy, item.wallclock, item.ncpus, item.nodes]));\n    csvContent += mapped.map((item) => item.join(\",\")).join(\"\\n\");\n  }\n  var encodedUri = encodeURI(csvContent);\n  var link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodedUri);\n  link.setAttribute(\"download\", title);\n  document.body.appendChild(link); // Required for FF\n  link.click();\n}\n\nexport const sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n"]},"metadata":{},"sourceType":"module"}