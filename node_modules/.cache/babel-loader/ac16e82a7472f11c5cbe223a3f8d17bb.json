{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_TREE,SET_LOADING_TREE_PKL,SET_LOADING_TREE,SET_LOADING_TREE_REFRESH,SET_LOADING_FILTER,FILTER_TREEVIEW,PKL_TREE_LOADED,SET_FANCYTREE,CLEAN_TREE_DATA,CLEAN_TREE_PKL_DATA,SET_AUTOUPDATE_TREE_PKL,UPDATE_SELECTION_TREE,CLEAR_FILTER_TREE,SET_START_TREE_SELECTION,SET_NOTIFICATION_TITLE_TREE,SET_OFF_LOADING_TREE,INCREASE_LOADING_TREE//UPDATE_RUNDETAIL_ON_TREE,\n,GET_EXPERIMENT_RUN_JOBDATA,LOADING_PREVIOUS_RUN//CLEAR_RUNDETAIL_ON_TREE,\n}from\"../types\";import{updateTreeData,buildRunTitle}from\"../treeutils\";import{timeStampToDate}from\"../utils\";export default(function(state,action){switch(action.type){case GET_TREE:return _objectSpread(_objectSpread({},state),{},{treedata:action.payload,loadingTree:false,enabledTreeSearch:true,elapsedLoadingTree:1,currentRunIdOnTree:null});case SET_LOADING_TREE_PKL:return _objectSpread(_objectSpread({},state),{},{loadingTreePkl:true});case SET_LOADING_TREE:return _objectSpread(_objectSpread({},state),{},{loadingTree:true,enabledTreeSearch:false});case SET_OFF_LOADING_TREE:return _objectSpread(_objectSpread({},state),{},{loadingTree:false,enabledTreeSearch:false,elapsedLoadingTree:1,treedata:null});case INCREASE_LOADING_TREE:return _objectSpread(_objectSpread({},state),{},{elapsedLoadingTree:state.elapsedLoadingTree+1});case SET_LOADING_TREE_REFRESH:return _objectSpread(_objectSpread({},state),{},{loadingTreeRefresh:true});case SET_LOADING_FILTER:return _objectSpread(_objectSpread({},state),{},{loadingFilterTree:true});case PKL_TREE_LOADED:{var retrievedPklTree=action.payload;//console.log(retrievedPklTree);\n//console.log(state.treedata);\nvar jobs={};if(state.treedata!==null&&retrievedPklTree.has_changed===true&&retrievedPklTree.pkl_content.length>0){// Jobs currently on state\nvar changes=\"\";var changesSummarized=\"\";var currentJobs=state.treedata.jobs;//console.log(currentJobs);\nvar referenceHeaders=state.treedata.reference;var currentPackages=referenceHeaders[\"packages\"];var completed_tag=referenceHeaders[\"completed_tag\"];var running_tag=referenceHeaders[\"running_tag\"];var queuing_tag=referenceHeaders[\"queuing_tag\"];var failed_tag=referenceHeaders[\"failed_tag\"];var check_mark=referenceHeaders[\"check_mark\"];// Building dictionary of retrieved jobs\nfor(var j=0,job;j<retrievedPklTree.pkl_content.length;j++){job=retrievedPklTree.pkl_content[j];jobs[job.name]=job;//console.log(job.name);\n}// Updating current jobs\nfor(var i=0,cjob,ijob;i<currentJobs.length;i++){// Job from current jobs\ncjob=currentJobs[i];// Job from pkl. Name is id in treedata.\nijob=jobs[cjob.id];//console.log(ijob);\n// If there is a difference\nif(ijob&&(cjob.status_code!==ijob.status_code||cjob.minutes!==ijob.minutes||cjob.minutes_queue!==ijob.minutes_queue)){var is_change_status=false;var new_status=cjob.status;var old_status=ijob.status;// Detecting status change\nif(cjob.status_code!==ijob.status_code){is_change_status=true;new_status=ijob.status;old_status=cjob.status;changes+=timeStampToDate(retrievedPklTree.pkl_timestamp)+\": \"+cjob.id+\" to \"+new_status+\"\\n\";changesSummarized+=new_status+\" : \"+cjob.id+\"\\n\";}cjob.status_code=ijob.status_code;cjob.status=ijob.status;cjob.status_color=ijob.status_color;cjob.minutes=ijob.minutes;cjob.minutes_queue=ijob.minutes_queue;cjob.wrapper=ijob.wrapper;cjob.out=ijob.out;cjob.err=ijob.err;cjob.submit=ijob.submit;cjob.start=ijob.start;cjob.finish=ijob.finish;cjob.rm_id=ijob.rm_id;// Parents are those groups to which a job belongs in the tree\nvar tree_parent_wrapper=\"Wrapper: \"+ijob.wrapper;if(!cjob.tree_parents.includes(tree_parent_wrapper)){cjob.tree_parents.push(tree_parent_wrapper);}// Assign wrapper code to current job\ncjob.wrapper_code=ijob.wrapper_id;// Building title according to retrieved data\nvar newTitle=ijob.title+\" \"+(cjob.parents===0?retrievedPklTree.source_tag:\"\")+(cjob.children===0?retrievedPklTree.target_tag:\"\")+(cjob.sync===true?retrievedPklTree.sync_tag:\"\")+(ijob.wrapper_id!==0?ijob.wrapper_tag:\"\");cjob.title=newTitle;// Find the corresponding node in the existing tree\nvar thenode=state.fancyTree.getNodesByRef(cjob.id);if(thenode){// Update title of all node ocurrences\nfor(var thenode_i in thenode){thenode[thenode_i].setTitle(newTitle);}// Find all parents of node\nvar parents=cjob.tree_parents;// Make sure parents contain the children\nvar wrapper_parent=state.fancyTree.getNodesByRef(tree_parent_wrapper);//console.log(wrapper_parent);\nif(wrapper_parent&&wrapper_parent.length>0){var children=wrapper_parent[0].children;//console.log(children);\nvar found_child=false;for(var index_j in children){var current_name=children[index_j].refKey;//console.log(current_name);\nif(current_name===cjob.id){found_child=true;}}// If the job is not present in the wrapper folder, add it.\nif(found_child===false){wrapper_parent[0].children.push({title:cjob.title,refKey:cjob.id,data:\"Empty\",children:[]});}}// Traverse parents to update title\nfor(var parent in parents){var header_data=referenceHeaders[parents[parent]];if(header_data){if(is_change_status===true){if(new_status===\"COMPLETED\"){header_data.completed+=1;}if(new_status===\"RUNNING\"){header_data.running+=1;}if(new_status===\"QUEUING\"){header_data.queuing+=1;}if(new_status===\"FAILED\"){header_data.failed+=1;}if(old_status===\"RUNNING\"){header_data.running-=1;}if(old_status===\"QUEUING\"){header_data.queuing-=1;}if(old_status===\"FAILED\"){header_data.failed-=1;}if(old_status===\"COMPLETED\"){header_data.completed-=1;}}// Setting new title\nvar new_completed_tag=completed_tag.replace(\"%C\",header_data.completed).replace(\"%T\",header_data.total).replace(\"%B\",header_data.completed===header_data.total?\"yellow\":\"#ffffb3\");var new_check_mark=header_data.completed===header_data.total?check_mark:\"\";var new_running_tag=header_data.running>0?running_tag.replace(\"%R\",header_data.running):\"\";var new_queuing_tag=header_data.queuing>0?queuing_tag.replace(\"%Q\",header_data.queuing):\"\";var new_failed_tag=header_data.failed>0?failed_tag.replace(\"%F\",header_data.failed):\"\";var theparent=state.fancyTree.getNodesByRef(parents[parent]);//console.log(parent);\nif(theparent){//Sets new title\nvar new_title=parents[parent]+new_completed_tag+new_failed_tag+new_running_tag+new_queuing_tag+new_check_mark;theparent[0].setTitle(new_title);}}}}}}var packages_from_pkl=retrievedPklTree[\"packages\"];var _iterator=_createForOfIteratorHelper(packages_from_pkl),_step;try{var _loop=function _loop(){var package_pkl=_step.value;if(!currentPackages.includes(package_pkl)){changes+=timeStampToDate(retrievedPklTree.pkl_timestamp)+\": \"+package_pkl+\" has been added.\"+\"\\n\";changesSummarized+=\"Wrapper \"+package_pkl+\" added.\\n\";// If a new wrapper has been found in the pkl\n// debug && console.log(\"New wrapper found: \" + package_pkl);\ncurrentPackages.push(package_pkl);//console.log(currentPackages);\nvar wrapper_pre_title=\"Wrapper: \"+package_pkl;referenceHeaders[wrapper_pre_title]={completed:0,failed:0,queuing:0,running:0,total:0};var header_wrapper=referenceHeaders[wrapper_pre_title];// eslint-disable-next-line no-loop-func\nvar children_jobs=currentJobs.filter(function(x){return x.wrapper===package_pkl;});var children_list=[];for(var k=0;k<children_jobs.length;k++){if(children_jobs[k].status===\"COMPLETED\"){header_wrapper.completed+=1;}else if(children_jobs[k].status===\"FAILED\"){header_wrapper.failed+=1;}else if(children_jobs[k].status===\"QUEUING\"){header_wrapper.queuing+=1;}else if(children_jobs[k].status===\"RUNNING\"){header_wrapper.running+=1;}children_list.push({title:children_jobs[k].title,refKey:children_jobs[k].id,data:\"Empty\",children:[]});}header_wrapper.total=children_jobs.length;var _new_completed_tag=completed_tag.replace(\"%C\",header_wrapper.completed).replace(\"%T\",header_wrapper.total).replace(\"%B\",header_wrapper.completed===header_wrapper.total?\"yellow\":\"#ffffb3\");var _new_check_mark=header_wrapper.completed===header_wrapper.total?check_mark:\"\";var _new_running_tag=header_wrapper.running>0?running_tag.replace(\"%R\",header_wrapper.running):\"\";var _new_queuing_tag=header_wrapper.queuing>0?queuing_tag.replace(\"%Q\",header_wrapper.queuing):\"\";var _new_failed_tag=header_wrapper.failed>0?failed_tag.replace(\"%F\",header_wrapper.failed):\"\";var wrapper_title=wrapper_pre_title+_new_completed_tag+_new_failed_tag+_new_running_tag+_new_queuing_tag+_new_check_mark;var rootNode=state.fancyTree.getRootNode();// eslint-disable-next-line no-unused-vars\nvar wrapper_branch_root=rootNode.addChildren({title:wrapper_title,folder:true,refKey:wrapper_pre_title,expanded:false,children:children_list});}};for(_iterator.s();!(_step=_iterator.n()).done;){_loop();}// if require update\n}catch(err){_iterator.e(err);}finally{_iterator.f();}if(retrievedPklTree.has_changed===true){if(state.pkltreechanges){state.pkltreechanges=changes+state.pkltreechanges;state.notificationTitleTree=changesSummarized;//setPklTreeChanges(changes + state.pkltreechanges);\n}else{state.pkltreechanges=changes;//setPklTreeChanges(changes);\n}}}return _objectSpread(_objectSpread({},state),{},{loadingTreeRefresh:false,loadingTreePkl:false});}case GET_EXPERIMENT_RUN_JOBDATA:var _action$payload=action.payload,result=_action$payload.result,runId=_action$payload.runId,meta=_action$payload.meta;if(state.treedata&&state.fancyTree){updateTreeData(result,state.treedata,state.fancyTree);//updateFancyTree(runDetail, state.fancyTree);\n}return _objectSpread(_objectSpread({},state),{},{currentRunIdOnTree:{runId:runId,message:buildRunTitle(runId,meta)},startAutoUpdateTreePkl:false,loadingPreviousRun:false});case FILTER_TREEVIEW:var string=action.payload;if(state.treedata&&state.fancyTree){var count=0;if(string.indexOf(\"*\")>-1){var fields=string.split(\"*\");var _result=false;count=state.fancyTree.filterNodes(function(node){var string_test=node.title;for(var _i=0;_i<fields.length;_i++){if(fields[_i].length>0){if(string_test.indexOf(fields[_i])>-1){//debug && console.log(fields[i] + \" found in \" + string_test);\nvar found_index=string_test.indexOf(fields[_i])+fields[_i].length;string_test=string_test.substring(found_index);//debug && console.log(found_index + \" in \" + string_test);\n_result=true;}else{// debug &&\n//   console.log(fields[i] + \" Not found in \" + string_test);\n_result=false;break;}}}return _result;});}else{count=state.fancyTree.filterNodes(string);}//debug && console.log(count);\nstate.returnFilter=count;}else{state.returnFilter=0;}return _objectSpread(_objectSpread({},state),{},{loadingFilterTree:false,returnFilter:action.payload});case SET_FANCYTREE:return _objectSpread(_objectSpread({},state),{},{fancyTree:action.payload});case SET_AUTOUPDATE_TREE_PKL:return _objectSpread(_objectSpread({},state),{},{startAutoUpdateTreePkl:action.payload});case CLEAN_TREE_DATA:return _objectSpread(_objectSpread({},state),{},{treedata:null,enabledTreeSearch:true,loadingTree:false,loadingTreePkl:false,fancyTree:null,returnFiler:0,elapsedLoadingTree:1,currentRunIdOnTree:null//canSelect: false,\n});case CLEAN_TREE_PKL_DATA:return _objectSpread(_objectSpread({},state),{},{startAutoUpdateTreePkl:false,pkltreechanges:null});case CLEAR_FILTER_TREE:if(state.treedata&&state.fancyTree){state.fancyTree.clearFilter();}return _objectSpread(_objectSpread({},state),{},{returnFilter:0});case UPDATE_SELECTION_TREE:return _objectSpread(_objectSpread({},state),{},{selectedTreeNode:action.payload});case SET_START_TREE_SELECTION:if(state.fancyTree){state.fancyTree.activeNode=state.fancyTree.rootNode;}return _objectSpread({},state);case SET_NOTIFICATION_TITLE_TREE:return _objectSpread(_objectSpread({},state),{},{notificationTitleTree:action.payload});case LOADING_PREVIOUS_RUN:return _objectSpread(_objectSpread({},state),{},{loadingPreviousRun:true});default:return null;}});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/tree/treeReducer.js"],"names":["GET_TREE","SET_LOADING_TREE_PKL","SET_LOADING_TREE","SET_LOADING_TREE_REFRESH","SET_LOADING_FILTER","FILTER_TREEVIEW","PKL_TREE_LOADED","SET_FANCYTREE","CLEAN_TREE_DATA","CLEAN_TREE_PKL_DATA","SET_AUTOUPDATE_TREE_PKL","UPDATE_SELECTION_TREE","CLEAR_FILTER_TREE","SET_START_TREE_SELECTION","SET_NOTIFICATION_TITLE_TREE","SET_OFF_LOADING_TREE","INCREASE_LOADING_TREE","GET_EXPERIMENT_RUN_JOBDATA","LOADING_PREVIOUS_RUN","updateTreeData","buildRunTitle","timeStampToDate","state","action","type","treedata","payload","loadingTree","enabledTreeSearch","elapsedLoadingTree","currentRunIdOnTree","loadingTreePkl","loadingTreeRefresh","loadingFilterTree","retrievedPklTree","jobs","has_changed","pkl_content","length","changes","changesSummarized","currentJobs","referenceHeaders","reference","currentPackages","completed_tag","running_tag","queuing_tag","failed_tag","check_mark","j","job","name","i","cjob","ijob","id","status_code","minutes","minutes_queue","is_change_status","new_status","status","old_status","pkl_timestamp","status_color","wrapper","out","err","submit","start","finish","rm_id","tree_parent_wrapper","tree_parents","includes","push","wrapper_code","wrapper_id","newTitle","title","parents","source_tag","children","target_tag","sync","sync_tag","wrapper_tag","thenode","fancyTree","getNodesByRef","thenode_i","setTitle","wrapper_parent","found_child","index_j","current_name","refKey","data","parent","header_data","completed","running","queuing","failed","new_completed_tag","replace","total","new_check_mark","new_running_tag","new_queuing_tag","new_failed_tag","theparent","new_title","packages_from_pkl","package_pkl","wrapper_pre_title","header_wrapper","children_jobs","filter","x","children_list","k","wrapper_title","rootNode","getRootNode","wrapper_branch_root","addChildren","folder","expanded","pkltreechanges","notificationTitleTree","result","runId","meta","message","startAutoUpdateTreePkl","loadingPreviousRun","string","count","indexOf","fields","split","filterNodes","node","string_test","found_index","substring","returnFilter","returnFiler","clearFilter","selectedTreeNode","activeNode"],"mappings":"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","sourcesContent":["import {\n  GET_TREE,\n  SET_LOADING_TREE_PKL,\n  SET_LOADING_TREE,\n  SET_LOADING_TREE_REFRESH,\n  SET_LOADING_FILTER,\n  FILTER_TREEVIEW,\n  PKL_TREE_LOADED,\n  SET_FANCYTREE,\n  CLEAN_TREE_DATA,\n  CLEAN_TREE_PKL_DATA,\n  SET_AUTOUPDATE_TREE_PKL,\n  UPDATE_SELECTION_TREE,\n  CLEAR_FILTER_TREE,\n  SET_START_TREE_SELECTION,\n  SET_NOTIFICATION_TITLE_TREE,\n  SET_OFF_LOADING_TREE,\n  INCREASE_LOADING_TREE,\n  //UPDATE_RUNDETAIL_ON_TREE,\n  GET_EXPERIMENT_RUN_JOBDATA,\n  LOADING_PREVIOUS_RUN,\n  //CLEAR_RUNDETAIL_ON_TREE,\n} from \"../types\";\n\nimport { updateTreeData, buildRunTitle } from \"../treeutils\";\n\nimport { timeStampToDate } from \"../utils\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_TREE:\n      return {\n        ...state,\n        treedata: action.payload,\n        loadingTree: false,\n        enabledTreeSearch: true,\n        elapsedLoadingTree: 1,\n        currentRunIdOnTree: null,\n      };\n    case SET_LOADING_TREE_PKL:\n      return {\n        ...state,\n        loadingTreePkl: true,\n      };\n    case SET_LOADING_TREE:\n      return {\n        ...state,\n        loadingTree: true,\n        enabledTreeSearch: false,\n      };\n    case SET_OFF_LOADING_TREE:\n      return {\n        ...state,\n        loadingTree: false,\n        enabledTreeSearch: false,\n        elapsedLoadingTree: 1,\n        treedata: null,\n      };\n    case INCREASE_LOADING_TREE:\n      return {\n        ...state,\n        elapsedLoadingTree: state.elapsedLoadingTree + 1,\n      };\n    case SET_LOADING_TREE_REFRESH:\n      return {\n        ...state,\n        loadingTreeRefresh: true,\n      };\n    case SET_LOADING_FILTER:\n      return {\n        ...state,\n        loadingFilterTree: true,\n      };\n    case PKL_TREE_LOADED: {\n      const retrievedPklTree = action.payload;\n      //console.log(retrievedPklTree);\n      //console.log(state.treedata);\n      let jobs = {};\n      if (\n        state.treedata !== null &&\n        retrievedPklTree.has_changed === true &&\n        retrievedPklTree.pkl_content.length > 0\n      ) {\n        // Jobs currently on state\n        let changes = \"\";\n        let changesSummarized = \"\";\n        let currentJobs = state.treedata.jobs;\n        //console.log(currentJobs);\n        let referenceHeaders = state.treedata.reference;\n        let currentPackages = referenceHeaders[\"packages\"];\n        const completed_tag = referenceHeaders[\"completed_tag\"];\n        const running_tag = referenceHeaders[\"running_tag\"];\n        const queuing_tag = referenceHeaders[\"queuing_tag\"];\n        const failed_tag = referenceHeaders[\"failed_tag\"];\n        const check_mark = referenceHeaders[\"check_mark\"];\n\n        // Building dictionary of retrieved jobs\n        for (let j = 0, job; j < retrievedPklTree.pkl_content.length; j++) {\n          job = retrievedPklTree.pkl_content[j];\n          jobs[job.name] = job;\n          //console.log(job.name);\n        }\n        // Updating current jobs\n        for (let i = 0, cjob, ijob; i < currentJobs.length; i++) {\n          // Job from current jobs\n          cjob = currentJobs[i];\n          // Job from pkl. Name is id in treedata.\n          ijob = jobs[cjob.id];\n          //console.log(ijob);\n          // If there is a difference\n          if (\n            ijob &&\n            (cjob.status_code !== ijob.status_code ||\n              cjob.minutes !== ijob.minutes ||\n              cjob.minutes_queue !== ijob.minutes_queue)\n          ) {\n            let is_change_status = false;\n            let new_status = cjob.status;\n            let old_status = ijob.status;\n            // Detecting status change\n            if (cjob.status_code !== ijob.status_code) {\n              is_change_status = true;\n              new_status = ijob.status;\n              old_status = cjob.status;\n              changes +=\n                timeStampToDate(retrievedPklTree.pkl_timestamp) +\n                \": \" +\n                cjob.id +\n                \" to \" +\n                new_status +\n                \"\\n\";\n              changesSummarized += new_status + \" : \" + cjob.id + \"\\n\";\n            }\n            cjob.status_code = ijob.status_code;\n            cjob.status = ijob.status;\n            cjob.status_color = ijob.status_color;\n            cjob.minutes = ijob.minutes;\n            cjob.minutes_queue = ijob.minutes_queue;\n            cjob.wrapper = ijob.wrapper;\n            cjob.out = ijob.out;\n            cjob.err = ijob.err;\n            cjob.submit = ijob.submit;\n            cjob.start = ijob.start;\n            cjob.finish = ijob.finish;\n            cjob.rm_id = ijob.rm_id;\n            // Parents are those groups to which a job belongs in the tree\n            let tree_parent_wrapper = \"Wrapper: \" + ijob.wrapper;\n            if (!cjob.tree_parents.includes(tree_parent_wrapper)) {\n              cjob.tree_parents.push(tree_parent_wrapper);\n            }\n            // Assign wrapper code to current job\n            cjob.wrapper_code = ijob.wrapper_id;\n            // Building title according to retrieved data\n            let newTitle =\n              ijob.title +\n              \" \" +\n              (cjob.parents === 0 ? retrievedPklTree.source_tag : \"\") +\n              (cjob.children === 0 ? retrievedPklTree.target_tag : \"\") +\n              (cjob.sync === true ? retrievedPklTree.sync_tag : \"\") +\n              (ijob.wrapper_id !== 0 ? ijob.wrapper_tag : \"\");\n            cjob.title = newTitle;\n            // Find the corresponding node in the existing tree\n            let thenode = state.fancyTree.getNodesByRef(cjob.id);\n            if (thenode) {\n              // Update title of all node ocurrences\n              for (let thenode_i in thenode) {\n                thenode[thenode_i].setTitle(newTitle);\n              }\n              // Find all parents of node\n              const parents = cjob.tree_parents;\n              // Make sure parents contain the children\n              let wrapper_parent = state.fancyTree.getNodesByRef(\n                tree_parent_wrapper\n              );\n              //console.log(wrapper_parent);\n              if (wrapper_parent && wrapper_parent.length > 0) {\n                let children = wrapper_parent[0].children;\n                //console.log(children);\n                let found_child = false;\n                for (let index_j in children) {\n                  let current_name = children[index_j].refKey;\n                  //console.log(current_name);\n                  if (current_name === cjob.id) {\n                    found_child = true;\n                  }\n                }\n                // If the job is not present in the wrapper folder, add it.\n                if (found_child === false) {\n                  wrapper_parent[0].children.push({\n                    title: cjob.title,\n                    refKey: cjob.id,\n                    data: \"Empty\",\n                    children: [],\n                  });\n                }\n              }\n              // Traverse parents to update title\n              for (let parent in parents) {\n                let header_data = referenceHeaders[parents[parent]];\n                if (header_data) {\n                  if (is_change_status === true) {\n                    if (new_status === \"COMPLETED\") {\n                      header_data.completed += 1;\n                    }\n                    if (new_status === \"RUNNING\") {\n                      header_data.running += 1;\n                    }\n                    if (new_status === \"QUEUING\") {\n                      header_data.queuing += 1;\n                    }\n                    if (new_status === \"FAILED\") {\n                      header_data.failed += 1;\n                    }\n                    if (old_status === \"RUNNING\") {\n                      header_data.running -= 1;\n                    }\n                    if (old_status === \"QUEUING\") {\n                      header_data.queuing -= 1;\n                    }\n                    if (old_status === \"FAILED\") {\n                      header_data.failed -= 1;\n                    }\n                    if (old_status === \"COMPLETED\"){\n                      header_data.completed -= 1;\n                    }\n                  }\n                  // Setting new title\n                  const new_completed_tag = completed_tag\n                    .replace(\"%C\", header_data.completed)\n                    .replace(\"%T\", header_data.total)\n                    .replace(\n                      \"%B\",\n                      header_data.completed === header_data.total\n                        ? \"yellow\"\n                        : \"#ffffb3\"\n                    );\n                  const new_check_mark =\n                    header_data.completed === header_data.total\n                      ? check_mark\n                      : \"\";\n                  const new_running_tag =\n                    header_data.running > 0\n                      ? running_tag.replace(\"%R\", header_data.running)\n                      : \"\";\n                  const new_queuing_tag =\n                    header_data.queuing > 0\n                      ? queuing_tag.replace(\"%Q\", header_data.queuing)\n                      : \"\";\n                  const new_failed_tag =\n                    header_data.failed > 0\n                      ? failed_tag.replace(\"%F\", header_data.failed)\n                      : \"\";\n                  let theparent = state.fancyTree.getNodesByRef(\n                    parents[parent]\n                  );\n                  //console.log(parent);\n                  if (theparent) {\n                    //Sets new title\n                    let new_title =\n                      parents[parent] +\n                      new_completed_tag +\n                      new_failed_tag +\n                      new_running_tag +\n                      new_queuing_tag +\n                      new_check_mark;\n                    theparent[0].setTitle(new_title);\n                  }\n                }\n              }\n            }\n          }\n        }\n        const packages_from_pkl = retrievedPklTree[\"packages\"];\n        for (let package_pkl of packages_from_pkl) {\n          if (!currentPackages.includes(package_pkl)) {\n            changes +=\n              timeStampToDate(retrievedPklTree.pkl_timestamp) +\n              \": \" +\n              package_pkl +\n              \" has been added.\" +\n              \"\\n\";\n            changesSummarized += \"Wrapper \" + package_pkl + \" added.\\n\";\n            // If a new wrapper has been found in the pkl\n            // debug && console.log(\"New wrapper found: \" + package_pkl);\n            currentPackages.push(package_pkl);\n            //console.log(currentPackages);\n            let wrapper_pre_title = \"Wrapper: \" + package_pkl;\n            referenceHeaders[wrapper_pre_title] = {\n              completed: 0,\n              failed: 0,\n              queuing: 0,\n              running: 0,\n              total: 0,\n            };\n            let header_wrapper = referenceHeaders[wrapper_pre_title];\n            // eslint-disable-next-line no-loop-func\n            let children_jobs = currentJobs.filter(function (x) {\n              return x.wrapper === package_pkl;\n            });\n            let children_list = [];\n            for (let k = 0; k < children_jobs.length; k++) {\n              if (children_jobs[k].status === \"COMPLETED\") {\n                header_wrapper.completed += 1;\n              } else if (children_jobs[k].status === \"FAILED\") {\n                header_wrapper.failed += 1;\n              } else if (children_jobs[k].status === \"QUEUING\") {\n                header_wrapper.queuing += 1;\n              } else if (children_jobs[k].status === \"RUNNING\") {\n                header_wrapper.running += 1;\n              }\n              children_list.push({\n                title: children_jobs[k].title,\n                refKey: children_jobs[k].id,\n                data: \"Empty\",\n                children: [],\n              });\n            }\n            header_wrapper.total = children_jobs.length;\n\n            const new_completed_tag = completed_tag\n              .replace(\"%C\", header_wrapper.completed)\n              .replace(\"%T\", header_wrapper.total)\n              .replace(\n                \"%B\",\n                header_wrapper.completed === header_wrapper.total\n                  ? \"yellow\"\n                  : \"#ffffb3\"\n              );\n            const new_check_mark =\n              header_wrapper.completed === header_wrapper.total\n                ? check_mark\n                : \"\";\n            const new_running_tag =\n              header_wrapper.running > 0\n                ? running_tag.replace(\"%R\", header_wrapper.running)\n                : \"\";\n            const new_queuing_tag =\n              header_wrapper.queuing > 0\n                ? queuing_tag.replace(\"%Q\", header_wrapper.queuing)\n                : \"\";\n            const new_failed_tag =\n              header_wrapper.failed > 0\n                ? failed_tag.replace(\"%F\", header_wrapper.failed)\n                : \"\";\n            const wrapper_title =\n              wrapper_pre_title +\n              new_completed_tag +\n              new_failed_tag +\n              new_running_tag +\n              new_queuing_tag +\n              new_check_mark;\n            let rootNode = state.fancyTree.getRootNode();\n            // eslint-disable-next-line no-unused-vars\n            let wrapper_branch_root = rootNode.addChildren({\n              title: wrapper_title,\n              folder: true,\n              refKey: wrapper_pre_title,\n              expanded: false,\n              children: children_list,\n            });\n          }\n        }\n        // if require update\n        if (retrievedPklTree.has_changed === true) {\n          if (state.pkltreechanges) {\n            state.pkltreechanges = changes + state.pkltreechanges;\n            state.notificationTitleTree = changesSummarized;\n            //setPklTreeChanges(changes + state.pkltreechanges);\n          } else {\n            state.pkltreechanges = changes;\n            //setPklTreeChanges(changes);\n          }\n        }\n      }\n      return {\n        ...state,\n        loadingTreeRefresh: false,\n        loadingTreePkl: false,\n      };\n    }\n    case GET_EXPERIMENT_RUN_JOBDATA:\n      const { result, runId, meta } = action.payload;\n      if (state.treedata && state.fancyTree){\n        updateTreeData(result, state.treedata, state.fancyTree);\n        //updateFancyTree(runDetail, state.fancyTree);\n      }\n      return {\n        ...state,\n        currentRunIdOnTree : {runId: runId, message: buildRunTitle(runId, meta) },\n        startAutoUpdateTreePkl: false,\n        loadingPreviousRun: false,\n      }\n    case FILTER_TREEVIEW:\n      const string = action.payload;\n      if (state.treedata && state.fancyTree) {\n        let count = 0;\n        if (string.indexOf(\"*\") > -1) {\n          const fields = string.split(\"*\");\n          let result = false;\n          count = state.fancyTree.filterNodes(function (node) {\n            let string_test = node.title;\n            for (let i = 0; i < fields.length; i++) {\n              if (fields[i].length > 0) {\n                if (string_test.indexOf(fields[i]) > -1) {\n                  //debug && console.log(fields[i] + \" found in \" + string_test);\n                  let found_index =\n                    string_test.indexOf(fields[i]) + fields[i].length;\n                  string_test = string_test.substring(found_index);\n                  //debug && console.log(found_index + \" in \" + string_test);\n                  result = true;\n                } else {\n                  // debug &&\n                  //   console.log(fields[i] + \" Not found in \" + string_test);\n                  result = false;\n                  break;\n                }\n              }\n            }\n            return result;\n          });\n        } else {\n          count = state.fancyTree.filterNodes(string);\n        }\n        //debug && console.log(count);\n        state.returnFilter = count;\n      } else {\n        state.returnFilter = 0;\n      }\n      return {\n        ...state,\n        loadingFilterTree: false,\n        returnFilter: action.payload,\n      };\n    case SET_FANCYTREE:\n      return {\n        ...state,\n        fancyTree: action.payload,\n      };\n    case SET_AUTOUPDATE_TREE_PKL:\n      return {\n        ...state,\n        startAutoUpdateTreePkl: action.payload,\n      };\n    case CLEAN_TREE_DATA:\n      return {\n        ...state,\n        treedata: null,\n        enabledTreeSearch: true,\n        loadingTree: false,\n        loadingTreePkl: false,\n        fancyTree: null,\n        returnFiler: 0,\n        elapsedLoadingTree: 1,\n        currentRunIdOnTree: null,\n        //canSelect: false,\n      };\n    case CLEAN_TREE_PKL_DATA:\n      return {\n        ...state,\n        startAutoUpdateTreePkl: false,\n        pkltreechanges: null,\n      };\n    case CLEAR_FILTER_TREE:\n      if (state.treedata && state.fancyTree) {\n        state.fancyTree.clearFilter();\n      }\n      return {\n        ...state,\n        returnFilter: 0,\n      };\n    case UPDATE_SELECTION_TREE:\n      return {\n        ...state,\n        selectedTreeNode: action.payload,\n      };\n    case SET_START_TREE_SELECTION:\n      if (state.fancyTree) {\n        state.fancyTree.activeNode = state.fancyTree.rootNode;\n      }\n      return {\n        ...state,\n      };\n    case SET_NOTIFICATION_TITLE_TREE:\n      return {\n        ...state,\n        notificationTitleTree: action.payload,\n      };\n    case LOADING_PREVIOUS_RUN:\n      return {\n        ...state,\n        loadingPreviousRun: true,\n      };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}