{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/experiment/ExperimentState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ExperimentContext from \"./experimentContext\";\nimport ExperimentReducer from \"./experimentReducer\";\nimport { SEARCH_EXPERIMENTS, SET_LOADING, CLEAR_EXPERIMENTS, GET_EXPERIMENT //GET_TREE,\n//SET_LOADING_TREE,\n, GET_EXPERIMENT_RUN, SET_LOADING_RUN, CLEAN_RUN_DATA, SET_AUTOUPDATE_RUN, SET_LOADING_STATE, GET_RUNNING_STATE, UPDATE_EXPERIMENT_TS, CURRENT_RUNNING, GET_EXPERIMENT_SUMMARY, CLEAR_SUMMARY_EXP, GET_EXPERIMENT_PERFORMANCE, CLEAN_PERFORMANCE_METRICS, ACTIVATE_SELECTION_MODE, DEACTIVATE_SELECTION_MODE, REMOVE_SELECTED_JOB, SET_CURRENT_COMMAND, UPDATE_SELECTED_JOBS, SET_LOADING_SUMMARY, CLEAN_EXPERIMENT_DATA, LOADING_PERFORMANCE_METRICS, GET_JOB_HISTORY, LOADING_JOB_HISTORY, LOADING_EXPERIMENT_RUNS, GET_EXPERIMENT_RUNS } from \"../types\";\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, ERROR_MESSAGE } from \"../vars\";\nimport { timeStampToDate } from \"../utils\";\n\nconst ExperimentState = props => {\n  const initialState = {\n    experiments: [],\n    summaries: [],\n    experiment: {},\n    totalJobs: 0,\n    jobHistory: null,\n    experimentRuns: null,\n    expectedLoadingTreeTime: 0,\n    expectedLoadingQuickView: 0,\n    loadingSummary: new Map(),\n    loading: false,\n    loadingPerformance: false,\n    experimentRunning: false,\n    rundata: null,\n    performancedata: null,\n    loadingRun: false,\n    loadingState: false,\n    loadingFilterTree: false,\n    loadingExperimentRuns: false,\n    currentCommand: null,\n    currentSelected: [],\n    startAutoUpdateRun: false,\n    startAutoUpdateTreePkl: false,\n    fancyTree: null,\n    allowJobMonitor: false,\n    canSelect: false\n  };\n  const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE; //const localserver = \"http://84.88.185.94:8081\";\n\n  const debug = DEBUG; // Search Experiments\n\n  const searchExperiments = async text => {\n    setLoading();\n    const res = await axios.get(`${localserver}/search/${text}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    debug && console.log(res.data);\n    const result = res ? res.data.experiment : [];\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: result\n    });\n  };\n\n  const getSummaries = () => {\n    const experiments = state.experiments;\n\n    for (var exp in experiments) {\n      var exp_name = experiments[exp].name;\n      getExperimentSummary(exp_name);\n    }\n  };\n\n  const getJobHistory = async (expid, job_name) => {\n    setLoadingJobHistory();\n    const res = await axios.get(`${localserver}/history/${expid}/${job_name}`).catch(error => {\n      alert(error.message);\n    });\n    debug && console.log(res.data);\n    const result = res ? res.data : null;\n    dispatch({\n      type: GET_JOB_HISTORY,\n      payload: result\n    });\n  };\n\n  const getExperimentRuns = async expid => {\n    setLoadingExperimentRuns();\n    const res = await axios.get(`${localserver}/runs/${expid}`).catch(error => {\n      alert(error.message);\n    });\n    const result = res ? res.data : null;\n    debug && console.log(result); // console.log(result);\n\n    dispatch({\n      type: GET_EXPERIMENT_RUNS,\n      payload: result\n    });\n  }; // Get Summary for Search item\n\n\n  const getExperimentSummary = async expid => {\n    clearSummary(expid);\n    setLoadingSummary(expid);\n    const res = await axios.get(`${localserver}/summary/${expid}`).catch(error => {\n      alert(ERROR_MESSAGE + \"\\n\" + error.message);\n    });\n    const summary = res ? res.data : null;\n    debug && console.log(summary); // console.log(summary);\n    // console.log(state.summaries);\n    //state.summaries.push({ key: expid, value: summary });\n\n    dispatch({\n      type: GET_EXPERIMENT_SUMMARY,\n      payload: {\n        expid: expid,\n        summary: summary\n      } //payload: { currentSummaries, summary, expid }\n\n    });\n  };\n\n  const getExperimentPerformanceMetrics = async expid => {\n    cleanPerformanceMetrics();\n    setLoadingPerformanceMetrics();\n    const res = await axios.get(`${localserver}/performance/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const metrics = res ? res.data : null;\n    debug && console.log(metrics);\n    dispatch({\n      type: GET_EXPERIMENT_PERFORMANCE,\n      payload: metrics\n    });\n  };\n\n  const clearSummary = expid => {\n    dispatch({\n      type: CLEAR_SUMMARY_EXP,\n      payload: expid\n    });\n  };\n\n  const getCurrentRunning = async () => {\n    setLoading();\n    const res = await axios.get(`${localserver}/running/`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data.experiment : null;\n    debug && console.log(result);\n    dispatch({\n      type: CURRENT_RUNNING,\n      payload: result\n    });\n  }; //const updateSelection = async () => {};\n  // Get Experiment\n\n\n  const getExperiment = async expid => {\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(`${localserver}/expinfo/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data : null;\n    debug && console.log(result);\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: result\n    });\n  }; // Get Experiment Log Run\n\n\n  const getExperimentRun = async expid => {\n    setLoadingRun();\n    const res = await axios.get(`${localserver}/exprun/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data : null;\n    debug && console.log(result);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: result\n    });\n  }; // Get Running State\n\n\n  const getRunningState = async expid => {\n    setLoadingState();\n    const res = await axios.get(`${localserver}/ifrun/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data : null;\n    debug && console.log(result);\n    dispatch({\n      type: GET_RUNNING_STATE,\n      payload: result\n    });\n  };\n\n  const setCurrentCommand = async command => {\n    // for change status\n    dispatch({\n      type: SET_CURRENT_COMMAND,\n      payload: command\n    }); //return command;\n  }; // Cleaning\n\n\n  const clearExperiments = () => dispatch({\n    type: CLEAR_EXPERIMENTS\n  }); //const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n\n\n  const cleanRunData = () => dispatch({\n    type: CLEAN_RUN_DATA\n  });\n\n  const cleanPerformanceMetrics = () => dispatch({\n    type: CLEAN_PERFORMANCE_METRICS\n  });\n\n  const cleanExperimentData = () => dispatch({\n    type: CLEAN_EXPERIMENT_DATA\n  }); // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setLoadingRun = () => dispatch({\n    type: SET_LOADING_RUN\n  });\n\n  const setLoadingState = () => dispatch({\n    type: SET_LOADING_STATE\n  });\n\n  const setLoadingSummary = summExpid => dispatch({\n    type: SET_LOADING_SUMMARY,\n    payload: summExpid\n  });\n\n  const setLoadingPerformanceMetrics = () => dispatch({\n    type: LOADING_PERFORMANCE_METRICS\n  });\n\n  const setLoadingJobHistory = () => dispatch({\n    type: LOADING_JOB_HISTORY\n  });\n\n  const setLoadingExperimentRuns = () => dispatch({\n    type: LOADING_EXPERIMENT_RUNS\n  }); // Action Things\n\n\n  const updateExperimentTimeStamp = timeStamp => {\n    //console.log(timeStamp);\n    dispatch({\n      type: UPDATE_EXPERIMENT_TS,\n      payload: timeStamp\n    });\n  }; // Updates for the Selection Tool\n  // source: Tree, Graph\n\n\n  const updateCurrentSelectedTree = (selectedJob, treedata) => {\n    debug && console.log(treedata);\n\n    if (treedata) {\n      let currentNode = {\n        name: selectedJob,\n        color: \"yellow\",\n        source: \"Tree\"\n      };\n      const selectedNode = treedata.jobs.find(job => job.id === currentNode.name);\n      currentNode.color = selectedNode.status_color;\n      dispatch({\n        type: UPDATE_SELECTED_JOBS,\n        payload: currentNode\n      });\n    }\n  };\n\n  const updateCurrentSelectedGraph = (selectedJob, data) => {\n    // console.log(data);\n    // console.log(selectedJob);\n    if (data) {\n      let currentNode = {\n        name: selectedJob,\n        color: \"yellow\"\n      };\n      const selectedNode = data.nodes.find(node => {\n        return node.id === currentNode.name;\n      });\n      currentNode.color = selectedNode.status_color;\n      dispatch({\n        type: UPDATE_SELECTED_JOBS,\n        payload: currentNode\n      });\n    }\n  };\n\n  const setAutoUpdateRun = value => dispatch({\n    type: SET_AUTOUPDATE_RUN,\n    payload: value\n  });\n\n  const activateSelectionMode = () => dispatch({\n    type: ACTIVATE_SELECTION_MODE\n  });\n\n  const deactivateSelectionMode = () => dispatch({\n    type: DEACTIVATE_SELECTION_MODE\n  });\n\n  const removeSelectedJob = name => dispatch({\n    type: REMOVE_SELECTED_JOB,\n    payload: name\n  });\n\n  return /*#__PURE__*/React.createElement(ExperimentContext.Provider, {\n    value: {\n      experiments: state.experiments,\n      experiment: state.experiment,\n      summaries: state.summaries,\n      loadingSummary: state.loadingSummary,\n      loading: state.loading,\n      loadingRun: state.loadingRun,\n      loadingState: state.loadingState,\n      loadingPerformance: state.loadingPerformance,\n      jobHistory: state.jobHistory,\n      performancedata: state.performancedata,\n      experimentRuns: state.experimentRuns,\n      rundata: state.rundata,\n      currentSelected: state.currentSelected,\n      startAutoUpdateRun: state.startAutoUpdateRun,\n      experimentRunning: state.experimentRunning,\n      currentCommand: state.currentCommand,\n      canSelect: state.canSelect,\n      totalJobs: state.totalJobs,\n      expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n      expectedLoadingQuickView: state.expectedLoadingQuickView,\n      experimentRunDetailForTree: state.experimentRunDetailForTree,\n      setAutoUpdateRun,\n      searchExperiments,\n      getCurrentRunning,\n      clearExperiments,\n      getExperiment,\n      cleanPerformanceMetrics,\n      cleanRunData,\n      getExperimentRun,\n      timeStampToDate,\n      getRunningState,\n      getExperimentPerformanceMetrics,\n      getExperimentSummary,\n      clearSummary,\n      getSummaries,\n      activateSelectionMode,\n      deactivateSelectionMode,\n      removeSelectedJob,\n      setCurrentCommand,\n      updateCurrentSelectedGraph,\n      updateCurrentSelectedTree,\n      updateExperimentTimeStamp,\n      cleanExperimentData,\n      getJobHistory,\n      getExperimentRuns\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ExperimentState;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/experiment/ExperimentState.js"],"names":["React","useReducer","axios","ExperimentContext","ExperimentReducer","SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","GET_EXPERIMENT_RUN","SET_LOADING_RUN","CLEAN_RUN_DATA","SET_AUTOUPDATE_RUN","SET_LOADING_STATE","GET_RUNNING_STATE","UPDATE_EXPERIMENT_TS","CURRENT_RUNNING","GET_EXPERIMENT_SUMMARY","CLEAR_SUMMARY_EXP","GET_EXPERIMENT_PERFORMANCE","CLEAN_PERFORMANCE_METRICS","ACTIVATE_SELECTION_MODE","DEACTIVATE_SELECTION_MODE","REMOVE_SELECTED_JOB","SET_CURRENT_COMMAND","UPDATE_SELECTED_JOBS","SET_LOADING_SUMMARY","CLEAN_EXPERIMENT_DATA","LOADING_PERFORMANCE_METRICS","GET_JOB_HISTORY","LOADING_JOB_HISTORY","LOADING_EXPERIMENT_RUNS","GET_EXPERIMENT_RUNS","AUTOSUBMIT_API_SOURCE","DEBUG","ERROR_MESSAGE","timeStampToDate","ExperimentState","props","initialState","experiments","summaries","experiment","totalJobs","jobHistory","experimentRuns","expectedLoadingTreeTime","expectedLoadingQuickView","loadingSummary","Map","loading","loadingPerformance","experimentRunning","rundata","performancedata","loadingRun","loadingState","loadingFilterTree","loadingExperimentRuns","currentCommand","currentSelected","startAutoUpdateRun","startAutoUpdateTreePkl","fancyTree","allowJobMonitor","canSelect","state","dispatch","localserver","debug","searchExperiments","text","setLoading","res","get","catch","error","alert","message","console","log","data","result","type","payload","getSummaries","exp","exp_name","name","getExperimentSummary","getJobHistory","expid","job_name","setLoadingJobHistory","getExperimentRuns","setLoadingExperimentRuns","clearSummary","setLoadingSummary","summary","getExperimentPerformanceMetrics","cleanPerformanceMetrics","setLoadingPerformanceMetrics","metrics","getCurrentRunning","getExperiment","getExperimentRun","setLoadingRun","getRunningState","setLoadingState","setCurrentCommand","command","clearExperiments","cleanRunData","cleanExperimentData","summExpid","updateExperimentTimeStamp","timeStamp","updateCurrentSelectedTree","selectedJob","treedata","currentNode","color","source","selectedNode","jobs","find","job","id","status_color","updateCurrentSelectedGraph","nodes","node","setAutoUpdateRun","value","activateSelectionMode","deactivateSelectionMode","removeSelectedJob","experimentRunDetailForTree","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ExperimentContext from \"./experimentContext\";\nimport ExperimentReducer from \"./experimentReducer\";\nimport {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  //GET_TREE,\n  //SET_LOADING_TREE,\n  GET_EXPERIMENT_RUN,\n  SET_LOADING_RUN,\n  CLEAN_RUN_DATA,\n  SET_AUTOUPDATE_RUN,\n  SET_LOADING_STATE,\n  GET_RUNNING_STATE,\n  UPDATE_EXPERIMENT_TS,\n  CURRENT_RUNNING,\n  GET_EXPERIMENT_SUMMARY,\n  CLEAR_SUMMARY_EXP,\n  GET_EXPERIMENT_PERFORMANCE,\n  CLEAN_PERFORMANCE_METRICS,\n  ACTIVATE_SELECTION_MODE,\n  DEACTIVATE_SELECTION_MODE,\n  REMOVE_SELECTED_JOB,\n  SET_CURRENT_COMMAND,\n  UPDATE_SELECTED_JOBS,\n  SET_LOADING_SUMMARY,\n  CLEAN_EXPERIMENT_DATA,\n  LOADING_PERFORMANCE_METRICS,\n  GET_JOB_HISTORY,\n  LOADING_JOB_HISTORY,\n  LOADING_EXPERIMENT_RUNS,\n  GET_EXPERIMENT_RUNS,\n} from \"../types\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, ERROR_MESSAGE } from \"../vars\";\n\nimport { timeStampToDate } from \"../utils\";\n\nconst ExperimentState = (props) => {\n  const initialState = {\n    experiments: [],\n    summaries: [],\n    experiment: {},\n    totalJobs: 0,\n    jobHistory: null,\n    experimentRuns: null,        \n    expectedLoadingTreeTime: 0,\n    expectedLoadingQuickView: 0,\n    loadingSummary: new Map(),\n    loading: false,\n    loadingPerformance: false,\n    experimentRunning: false,\n    rundata: null,\n    performancedata: null,\n    loadingRun: false,\n    loadingState: false,\n    loadingFilterTree: false,\n    loadingExperimentRuns: false,\n    currentCommand: null,\n    currentSelected: [],\n    startAutoUpdateRun: false,\n    startAutoUpdateTreePkl: false,\n    fancyTree: null,\n    allowJobMonitor: false,\n    canSelect: false,\n  };\n\n  const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  //const localserver = \"http://84.88.185.94:8081\";\n  const debug = DEBUG;\n\n  // Search Experiments\n  const searchExperiments = async (text) => {\n    setLoading();\n    const res = await axios.get(`${localserver}/search/${text}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    debug && console.log(res.data);\n    const result = res ? res.data.experiment : [];\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: result,\n    });\n  };\n\n  const getSummaries = () => {\n    const experiments = state.experiments;\n    for (var exp in experiments) {\n      var exp_name = experiments[exp].name;\n      getExperimentSummary(exp_name);\n    }\n  };\n\n  const getJobHistory = async (expid, job_name) => {\n    setLoadingJobHistory();\n    const res = await axios\n      .get(`${localserver}/history/${expid}/${job_name}`)\n      .catch((error) => {\n        alert(error.message);\n      });\n    debug && console.log(res.data);\n    const result = res ? res.data : null;\n    dispatch({\n      type: GET_JOB_HISTORY,\n      payload: result,\n    });\n  };\n\n\n\n  const getExperimentRuns = async (expid) => {\n    setLoadingExperimentRuns();\n    const res = await axios.get(`${localserver}/runs/${expid}`).catch((error) => {alert(error.message);});    \n    const result = res ? res.data : null;\n    debug && console.log(result);\n    // console.log(result);\n    dispatch({\n      type: GET_EXPERIMENT_RUNS,\n      payload: result,\n    })\n  }\n\n  // Get Summary for Search item\n  const getExperimentSummary = async (expid) => {\n    clearSummary(expid);\n    setLoadingSummary(expid);\n    const res = await axios.get(`${localserver}/summary/${expid}`).catch((error) => {alert(ERROR_MESSAGE + \"\\n\" + error.message);});\n    const summary = res ? res.data : null;\n    debug && console.log(summary);\n    // console.log(summary);\n    // console.log(state.summaries);\n    //state.summaries.push({ key: expid, value: summary });\n    dispatch({\n      type: GET_EXPERIMENT_SUMMARY,\n      payload: { expid: expid, summary: summary },\n      //payload: { currentSummaries, summary, expid }\n    });\n  };\n\n  const getExperimentPerformanceMetrics = async (expid) => {\n    cleanPerformanceMetrics();\n    setLoadingPerformanceMetrics();\n    const res = await axios.get(`${localserver}/performance/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const metrics = res ? res.data : null ;\n    debug && console.log(metrics);\n    dispatch({\n      type: GET_EXPERIMENT_PERFORMANCE,\n      payload: metrics,\n    });\n  };\n\n  const clearSummary = (expid) => {\n    dispatch({\n      type: CLEAR_SUMMARY_EXP,\n      payload: expid,\n    });\n  };\n\n  const getCurrentRunning = async () => {\n    setLoading();\n    const res = await axios.get(`${localserver}/running/`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data.experiment : null;\n    debug && console.log(result);\n    dispatch({\n      type: CURRENT_RUNNING,\n      payload: result,\n    });\n  };\n\n  //const updateSelection = async () => {};\n\n  // Get Experiment\n  const getExperiment = async (expid) => {\n    setLoading();\n    //cleanGraphData();\n    const res = await axios.get(`${localserver}/expinfo/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data : null;\n    debug && console.log(result);\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: result,\n    });\n  };\n\n  // Get Experiment Log Run\n  const getExperimentRun = async (expid) => {\n    setLoadingRun();\n    const res = await axios.get(`${localserver}/exprun/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data : null;\n    debug && console.log(result);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: result,\n    });\n  };\n\n  // Get Running State\n  const getRunningState = async (expid) => {\n    setLoadingState();\n    const res = await axios.get(`${localserver}/ifrun/${expid}`).catch(error => alert(ERROR_MESSAGE + \"\\n\" + error.message));\n    const result = res ? res.data : null;\n    debug && console.log(result);\n    dispatch({\n      type: GET_RUNNING_STATE,\n      payload: result,\n    });\n  };\n\n  const setCurrentCommand = async (command) => {\n    // for change status\n    dispatch({\n      type: SET_CURRENT_COMMAND,\n      payload: command,\n    });\n    //return command;\n  };\n\n  // Cleaning\n  const clearExperiments = () => dispatch({ type: CLEAR_EXPERIMENTS });\n  //const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n\n  const cleanRunData = () => dispatch({ type: CLEAN_RUN_DATA });\n\n  const cleanPerformanceMetrics = () =>\n    dispatch({ type: CLEAN_PERFORMANCE_METRICS });\n\n  const cleanExperimentData = () => dispatch({ type: CLEAN_EXPERIMENT_DATA });\n\n  // Set Loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n  const setLoadingRun = () => dispatch({ type: SET_LOADING_RUN });\n  const setLoadingState = () => dispatch({ type: SET_LOADING_STATE });\n  const setLoadingSummary = (summExpid) =>\n    dispatch({ type: SET_LOADING_SUMMARY, payload: summExpid });\n  const setLoadingPerformanceMetrics = () =>\n    dispatch({ type: LOADING_PERFORMANCE_METRICS });\n  const setLoadingJobHistory = () => dispatch({ type: LOADING_JOB_HISTORY });\n  const setLoadingExperimentRuns = () => dispatch({ type: LOADING_EXPERIMENT_RUNS });\n  // Action Things\n  const updateExperimentTimeStamp = (timeStamp) => {\n    //console.log(timeStamp);\n    dispatch({ type: UPDATE_EXPERIMENT_TS, payload: timeStamp });\n  };\n\n  // Updates for the Selection Tool\n  // source: Tree, Graph\n  const updateCurrentSelectedTree = (selectedJob, treedata) => {\n    debug && console.log(treedata);\n    if (treedata) {\n      let currentNode = { name: selectedJob, color: \"yellow\", source: \"Tree\" };\n      const selectedNode = treedata.jobs.find(\n        (job) => job.id === currentNode.name\n      );\n      currentNode.color = selectedNode.status_color;\n      dispatch({\n        type: UPDATE_SELECTED_JOBS,\n        payload: currentNode,\n      });\n    }\n  };\n\n  const updateCurrentSelectedGraph = (selectedJob, data) => {\n    // console.log(data);\n    // console.log(selectedJob);\n    if (data) {\n      let currentNode = { name: selectedJob, color: \"yellow\" };\n      const selectedNode = data.nodes.find((node) => {\n        return node.id === currentNode.name;\n      });\n      currentNode.color = selectedNode.status_color;\n      dispatch({ type: UPDATE_SELECTED_JOBS, payload: currentNode });\n    }\n  };\n\n  const setAutoUpdateRun = (value) =>\n    dispatch({ type: SET_AUTOUPDATE_RUN, payload: value });\n\n  const activateSelectionMode = () =>\n    dispatch({ type: ACTIVATE_SELECTION_MODE });\n  const deactivateSelectionMode = () =>\n    dispatch({ type: DEACTIVATE_SELECTION_MODE });\n  const removeSelectedJob = (name) =>\n    dispatch({ type: REMOVE_SELECTED_JOB, payload: name });\n\n  return (\n    <ExperimentContext.Provider\n      value={{\n        experiments: state.experiments,\n        experiment: state.experiment,\n        summaries: state.summaries,\n        loadingSummary: state.loadingSummary,\n        loading: state.loading,\n        loadingRun: state.loadingRun,\n        loadingState: state.loadingState,\n        loadingPerformance: state.loadingPerformance,\n        jobHistory: state.jobHistory,\n        performancedata: state.performancedata,\n        experimentRuns: state.experimentRuns,\n        rundata: state.rundata,\n        currentSelected: state.currentSelected,\n        startAutoUpdateRun: state.startAutoUpdateRun,\n        experimentRunning: state.experimentRunning,\n        currentCommand: state.currentCommand,\n        canSelect: state.canSelect,\n        totalJobs: state.totalJobs,\n        expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n        expectedLoadingQuickView: state.expectedLoadingQuickView,\n        experimentRunDetailForTree: state.experimentRunDetailForTree,        \n        setAutoUpdateRun,\n        searchExperiments,\n        getCurrentRunning,\n        clearExperiments,\n        getExperiment,\n        cleanPerformanceMetrics,\n        cleanRunData,\n        getExperimentRun,\n        timeStampToDate,\n        getRunningState,\n        getExperimentPerformanceMetrics,\n        getExperimentSummary,\n        clearSummary,\n        getSummaries,\n        activateSelectionMode,\n        deactivateSelectionMode,\n        removeSelectedJob,\n        setCurrentCommand,\n        updateCurrentSelectedGraph,\n        updateCurrentSelectedTree,\n        updateExperimentTimeStamp,\n        cleanExperimentData,\n        getJobHistory,\n        getExperimentRuns,\n      }}\n    >\n      {props.children}\n    </ExperimentContext.Provider>\n  );\n};\n\nexport default ExperimentState;\n"]},"metadata":{},"sourceType":"module"}