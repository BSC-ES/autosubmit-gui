{"ast":null,"code":"export const updateTreeData = (runData, treedata, fancyTree) => {\n  //const updatedData = {};\n  // console.log(fancyTree);\n  if (!runData) {\n    return;\n  }\n\n  let currentJobNames = new Map();\n  runData.forEach(item => currentJobNames[String(item.job_name)] = item); // console.log(currentJobNames);\n  // console.log(treedata);\n\n  treedata.jobs.forEach(item => {\n    item.status = \"WAITING\";\n    item.status_code = 0;\n    item.status_color = \"gray\";\n    item.minutes = 0;\n    item.minutes_queue = 0;\n    item.submit = null;\n    item.start = null;\n    item.finish = null;\n    item.rm_id = null; // item.id is job_name\n\n    if (currentJobNames[String(item.id)]) {\n      // console.log(\"Found \" + item.id);\n      const sourceInfoJob = currentJobNames[String(item.id)];\n      item.status = sourceInfoJob.status;\n      item.status_code = sourceInfoJob.status_code;\n      item.status_color = sourceInfoJob.status_color;\n      item.minutes = sourceInfoJob.running_time_s;\n      item.minutes_queue = sourceInfoJob.queue_time_s;\n      item.submit = sourceInfoJob.submit;\n      item.start = sourceInfoJob.start;\n      item.finish = sourceInfoJob.finish;\n      item.rm_id = sourceInfoJob.job_id;\n    }\n  }); //console.log(treedata.tree);\n\n  for (const key of Object.keys(treedata.tree)) {\n    // console.log(treedata.tree[key].title);\n    traverseUpdate(treedata.tree[key], currentJobNames, fancyTree); // fancyTreeObject.keyMap[key].title = fancyTreeObject.keyMap[key].refKey;\n    // console.log(value);\n  } //return updatedData;\n\n};\n\nconst traverseUpdate = (treeNode, currentMap, fancyTree) => {\n  //fancyTreeNode.title = treeNode.refKey;\n  // const underscores = (treeNode.title.match(/_/g) || []).length;\n  //if (underscores >= 1 && treeNode.folder === false) {\n  //treeNode.title = treeNode.refKey;\n  let node = fancyTree.getNodesByRef(treeNode.refKey);\n  node = node ? node[0] : null;\n\n  if (node) {\n    const newNodeInfo = currentMap[node.refKey];\n    let currentTitle = node.title; //let newTitle = currentTitle;\n    // Setting status string        \n\n    if (!node.folder) {\n      const statusIndexStart = currentTitle.indexOf(\"#\");\n      const statusIndexEnd = currentTitle.indexOf(\"<\", statusIndexStart);\n      const statusText = currentTitle.substring(statusIndexStart, statusIndexEnd);\n      currentTitle = currentTitle.replace(statusText, '#' + (currentMap[node.refKey] ? String(newNodeInfo.status) : \"WAITING\"));\n      const bgIndexStart = currentTitle.indexOf(\"background-color:\");\n      const bgIndexEnd = currentTitle.indexOf(\"'>\");\n      const bgColor = currentTitle.substring(bgIndexStart, bgIndexEnd);\n      currentTitle = currentTitle.replace(bgColor, \"background-color:\" + (currentMap[node.refKey] ? String(newNodeInfo.status_color) : \"gray\"));\n      const timeTagIndexStart = currentTitle.indexOf(\"~\", statusIndexEnd);\n\n      if (timeTagIndexStart > 0) {\n        const timeTagIndexEnd = currentTitle.indexOf(\"<\", timeTagIndexStart);\n        let timeTag = \"\";\n\n        if (timeTagIndexEnd > 0) {\n          timeTag = currentTitle.substring(timeTagIndexStart, timeTagIndexEnd); // console.log(timeTag);\n        } else {\n          timeTag = currentTitle.substring(timeTagIndexStart); // console.log(timeTag);\n        } //console.log(timeTag);\n\n\n        currentTitle = currentTitle.replace(timeTag, currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \" \");\n      } else {\n        currentTitle = currentTitle + (currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \"\");\n      } // console.log(bgColor);\n\n    }\n\n    node.setTitle(currentTitle); //console.log(statusText);    \n\n    console.log(node); //node.setTitle(treeNode.refKey);\n  } // console.log(node);\n  //}\n\n\n  if (treeNode.children) {\n    treeNode.children.forEach(item => {\n      //console.log(item);\n      traverseUpdate(item, currentMap, fancyTree);\n    });\n  }\n};\n\nexport const buildRunTitle = (runId, meta) => {\n  let runTitle = \"Run \" + runId;\n  console.log(meta);\n\n  if (meta) {\n    const {\n      created,\n      finished,\n      completed,\n      total\n    } = meta;\n    runTitle = runTitle + \" created on \" + String(created) + (finished ? \" finished on \" + finished : \" \") + String(completed) + \" of \" + String(total) + \" jobs.\";\n  }\n\n  console.log(runTitle);\n  return runTitle;\n};","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/treeutils.js"],"names":["updateTreeData","runData","treedata","fancyTree","currentJobNames","Map","forEach","item","String","job_name","jobs","status","status_code","status_color","minutes","minutes_queue","submit","start","finish","rm_id","id","sourceInfoJob","running_time_s","queue_time_s","job_id","key","Object","keys","tree","traverseUpdate","treeNode","currentMap","node","getNodesByRef","refKey","newNodeInfo","currentTitle","title","folder","statusIndexStart","indexOf","statusIndexEnd","statusText","substring","replace","bgIndexStart","bgIndexEnd","bgColor","timeTagIndexStart","timeTagIndexEnd","timeTag","titletag","setTitle","console","log","children","buildRunTitle","runId","meta","runTitle","created","finished","completed","total"],"mappings":"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","sourcesContent":["export const updateTreeData = (runData, treedata, fancyTree) => {\n  //const updatedData = {};\n  // console.log(fancyTree);\n  if(!runData) {\n    return;\n  }\n  let currentJobNames = new Map();\n  runData.forEach((item) => currentJobNames[String(item.job_name)] = item);\n  // console.log(currentJobNames);\n  // console.log(treedata);\n  treedata.jobs.forEach((item) => {\n    item.status = \"WAITING\"; \n    item.status_code = 0; \n    item.status_color = \"gray\"; \n    item.minutes = 0; \n    item.minutes_queue = 0;\n    item.submit = null;\n    item.start = null;\n    item.finish = null;\n    item.rm_id = null;\n    // item.id is job_name\n    if (currentJobNames[String(item.id)]){\n      // console.log(\"Found \" + item.id);\n      const sourceInfoJob = currentJobNames[String(item.id)];\n      item.status = sourceInfoJob.status; \n      item.status_code = sourceInfoJob.status_code; \n      item.status_color = sourceInfoJob.status_color; \n      item.minutes = sourceInfoJob.running_time_s; \n      item.minutes_queue = sourceInfoJob.queue_time_s;\n      item.submit = sourceInfoJob.submit;\n      item.start = sourceInfoJob.start;\n      item.finish = sourceInfoJob.finish;\n      item.rm_id = sourceInfoJob.job_id;\n    }\n  });\n  \n  //console.log(treedata.tree);\n  for (const key of Object.keys(treedata.tree)) {\n    // console.log(treedata.tree[key].title);\n    traverseUpdate(treedata.tree[key], currentJobNames, fancyTree);\n    // fancyTreeObject.keyMap[key].title = fancyTreeObject.keyMap[key].refKey;\n    // console.log(value);\n  }\n  //return updatedData;\n}\n\nconst traverseUpdate = (treeNode, currentMap, fancyTree) => {\n  //fancyTreeNode.title = treeNode.refKey;\n  // const underscores = (treeNode.title.match(/_/g) || []).length;\n  //if (underscores >= 1 && treeNode.folder === false) {\n  //treeNode.title = treeNode.refKey;\n  let node = fancyTree.getNodesByRef(treeNode.refKey);\n  node = node ? node[0] : null;\n  if (node){\n    const newNodeInfo = currentMap[node.refKey];\n    let currentTitle = node.title;\n    //let newTitle = currentTitle;\n    // Setting status string        \n    if (!node.folder){\n      const statusIndexStart = currentTitle.indexOf(\"#\");\n      const statusIndexEnd = currentTitle.indexOf(\"<\", statusIndexStart);\n      const statusText = currentTitle.substring(statusIndexStart, statusIndexEnd);\n      currentTitle = currentTitle.replace(statusText, '#'+ (currentMap[node.refKey] ?String(newNodeInfo.status) : \"WAITING\" ));\n      const bgIndexStart = currentTitle.indexOf(\"background-color:\");\n      const bgIndexEnd =  currentTitle.indexOf(\"'>\");\n      const bgColor = currentTitle.substring(bgIndexStart, bgIndexEnd);\n      currentTitle = currentTitle.replace(bgColor, \"background-color:\"+(currentMap[node.refKey] ? String(newNodeInfo.status_color) : \"gray\"));\n      const timeTagIndexStart = currentTitle.indexOf(\"~\", statusIndexEnd);\n      if (timeTagIndexStart > 0){\n        const timeTagIndexEnd = currentTitle.indexOf(\"<\", timeTagIndexStart);\n        let timeTag = \"\";\n        if (timeTagIndexEnd > 0){\n          timeTag = currentTitle.substring(timeTagIndexStart, timeTagIndexEnd);\n          // console.log(timeTag);\n        } else {\n          timeTag = currentTitle.substring(timeTagIndexStart);\n          // console.log(timeTag);\n        }\n        //console.log(timeTag);\n        currentTitle = currentTitle.replace(timeTag, currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \" \")\n      } else {\n        currentTitle = currentTitle + (currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \"\");\n      }\n      // console.log(bgColor);\n    }        \n    node.setTitle(currentTitle);\n    //console.log(statusText);    \n    console.log(node);\n    //node.setTitle(treeNode.refKey);\n  }\n  // console.log(node);\n  //}\n  if (treeNode.children){\n    treeNode.children.forEach(item => {\n      //console.log(item);\n      traverseUpdate(item, currentMap, fancyTree);\n    });\n  }\n}\n\nexport const buildRunTitle = (runId, meta) => {\n  let runTitle = \"Run \" + runId;\n  console.log(meta);\n  if (meta){\n    const { created, finished, completed, total } = meta;\n    runTitle = runTitle + \" created on \" + String(created) + (finished ? \" finished on \" + finished : \" \") + String(completed) + \" of \" + String(total) + \" jobs.\";\n  }  \n  console.log(runTitle);\n  return runTitle;\n}"]},"metadata":{},"sourceType":"module"}