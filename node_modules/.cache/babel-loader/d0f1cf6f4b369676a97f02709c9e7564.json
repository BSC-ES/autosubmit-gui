{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js\";\nimport React, { Component } from \"react\";\nimport { Graph } from \"vis-network\";\n\nclass GraphRepresentation extends Component {\n  componentDidMount() {\n    console.log(\"In Graph\"); //let container = document.getElementById(\"myNetwork\");\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop !== \"undefined\" || typeof this.props.edges_prop !== \"undefined\") {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n      var nodes = new vis.DataSet(nodes_array);\n      var edges = new vis.DataSet(edges_array);\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n      var options = {\n        edges: {\n          arrows: {\n            to: {\n              enabled: true\n            }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false\n        }\n      };\n      var network = new vis.Network(container, data, options); //window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {//let container = document.getElementById('myNetwork');\n    // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"myNetwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js"],"names":["React","Component","Graph","GraphRepresentation","componentDidMount","console","log","nodes_array","edges_array","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","nodes","vis","DataSet","edges","data","options","arrows","enabled","layout","improvedLayout","hierarchical","parentCentralization","treeSpacing","nodeSpacing","interaction","dragNodes","hoverConnectedEdges","physics","network","Network","container","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,aAAtB;;AAEA,MAAMC,mBAAN,SAAkCF,SAAlC,CAA4C;AAC1CG,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADkB,CAGlB;;AAEA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,QACE,OAAO,KAAKC,KAAL,CAAWC,UAAlB,KAAiC,WAAjC,IACA,OAAO,KAAKD,KAAL,CAAWE,UAAlB,KAAiC,WAFnC,EAGE;AACA,WAAKF,KAAL,CAAWC,UAAX,CAAsBE,GAAtB,CAA0BC,IAAI,IAC5BN,WAAW,CAACO,IAAZ,CAAiB;AACfC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADM;AAEfC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAFG;AAGfC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC;AAHQ,OAAjB,CADF;AAQA,WAAKX,KAAL,CAAWE,UAAX,CAAsBC,GAAtB,CAA0BS,IAAI,IAAI;AAChCb,QAAAA,WAAW,CAACM,IAAZ,CAAiB;AAAEQ,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBC,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAA5B,SAAjB;AACD,OAFD;AAIA,UAAIC,KAAK,GAAG,IAAIC,GAAG,CAACC,OAAR,CAAgBnB,WAAhB,CAAZ;AAEA,UAAIoB,KAAK,GAAG,IAAIF,GAAG,CAACC,OAAR,CAAgBlB,WAAhB,CAAZ;AAEA,UAAIoB,IAAI,GAAG;AACTJ,QAAAA,KAAK,EAAEA,KADE;AAETG,QAAAA,KAAK,EAAEA;AAFE,OAAX;AAKA,UAAIE,OAAO,GAAG;AACZF,QAAAA,KAAK,EAAE;AACLG,UAAAA,MAAM,EAAE;AACNP,YAAAA,EAAE,EAAE;AAAEQ,cAAAA,OAAO,EAAE;AAAX;AADE;AADH,SADK;AAMZC,QAAAA,MAAM,EAAE;AACNC,UAAAA,cAAc,EAAE,IADV;AAENC,UAAAA,YAAY,EAAE;AACZC,YAAAA,oBAAoB,EAAE,IADV;AAEZC,YAAAA,WAAW,EAAE,GAFD;AAGZC,YAAAA,WAAW,EAAE;AAHD;AAFR,SANI;AAcZC,QAAAA,WAAW,EAAE;AACXC,UAAAA,SAAS,EAAE,IADA;AAEXC,UAAAA,mBAAmB,EAAE;AAFV,SAdD;AAkBZC,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAE;AADF;AAlBG,OAAd;AAuBA,UAAIW,OAAO,GAAG,IAAIjB,GAAG,CAACkB,OAAR,CAAgBC,SAAhB,EAA2BhB,IAA3B,EAAiCC,OAAjC,CAAd,CA7CA,CA8CA;AACD;AACF;;AAEDgB,EAAAA,oBAAoB,GAAG,CACrB;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAxEyC;;AA2E5C,eAAe3C,mBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Graph } from \"vis-network\";\n\nclass GraphRepresentation extends Component {\n  componentDidMount() {\n    console.log(\"In Graph\");\n\n    //let container = document.getElementById(\"myNetwork\");\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (\n      typeof this.props.nodes_prop !== \"undefined\" ||\n      typeof this.props.edges_prop !== \"undefined\"\n    ) {\n      this.props.nodes_prop.map(node =>\n        nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: { background: node.status_color, border: \"black\" }\n        })\n      );\n\n      this.props.edges_prop.map(edge => {\n        edges_array.push({ from: edge.from, to: edge.to });\n      });\n\n      var nodes = new vis.DataSet(nodes_array);\n\n      var edges = new vis.DataSet(edges_array);\n\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n\n      var options = {\n        edges: {\n          arrows: {\n            to: { enabled: true }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false\n        }\n      };\n\n      var network = new vis.Network(container, data, options);\n      //window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {\n    //let container = document.getElementById('myNetwork');\n    // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  render() {\n    return <div id='myNetwork' />;\n  }\n}\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}