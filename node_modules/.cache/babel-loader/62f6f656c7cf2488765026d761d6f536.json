{"ast":null,"code":"import { GET_LIGHTER_VIEW, SET_LOADING_LIGHTER_VIEW, CLEAN_LIGHTER_VIEW_DATA, SET_LIGHTER_FANCY_TREE, FILTER_LIGHTER_TREE_VIEW, SET_LOADING_FILTER_LIGHTER_TREE_VIEW, CLEAR_LIGHTER_FILTER, INCREASE_LOADING_QUICK_VIEW } from \"../types\"; //import { DEBUG } from \"../vars\";\n\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_LIGHTER_VIEW:\n      // const result = action.payload;\n      return { ...state,\n        lightData: action.payload,\n        elapsedLoadingQuickView: 1,\n        loadingView: false\n      };\n\n    case CLEAN_LIGHTER_VIEW_DATA:\n      return { ...state,\n        lightData: null,\n        lightFancyTree: null,\n        loadingView: false,\n        loadingFilterTreeView: false\n      };\n\n    case SET_LOADING_LIGHTER_VIEW:\n      return { ...state,\n        loadingView: true\n      };\n\n    case SET_LIGHTER_FANCY_TREE:\n      return { ...state,\n        lightFancyTree: action.payload\n      };\n\n    case SET_LOADING_FILTER_LIGHTER_TREE_VIEW:\n      return { ...state,\n        loadingFilterTreeView: true\n      };\n\n    case INCREASE_LOADING_QUICK_VIEW:\n      return { ...state,\n        elapsedLoadingQuickView: state.elapsedLoadingQuickView + 1\n      };\n\n    case FILTER_LIGHTER_TREE_VIEW:\n      const string = action.payload;\n\n      if (state.lightData && state.lightFancyTree) {\n        let count = 0;\n\n        if (string.indexOf(\"*\") > -1) {\n          const fields = string.split(\"*\");\n          let result = false;\n          count = state.lightFancyTree.filterNodes(function (node) {\n            let string_test = node.title;\n\n            for (let i = 0; i < fields.length; i++) {\n              if (fields[i].length > 0) {\n                if (string_test.indexOf(fields[i]) > -1) {\n                  //debug && console.log(fields[i] + \" found in \" + string_test);\n                  let found_index = string_test.indexOf(fields[i]) + fields[i].length;\n                  string_test = string_test.substring(found_index); //debug && console.log(found_index + \" in \" + string_test);\n\n                  result = true;\n                } else {\n                  // debug &&\n                  //   console.log(fields[i] + \" Not found in \" + string_test);\n                  result = false;\n                  break;\n                }\n              }\n            }\n\n            return result;\n          });\n        } else {\n          count = state.lightFancyTree.filterNodes(string);\n        } //debug && console.log(count);\n\n\n        state.filterCount = count;\n      } else {\n        state.filterCount = 0;\n      }\n\n      return { ...state,\n        loadingFilterTreeView: false\n      };\n\n    case CLEAR_LIGHTER_FILTER:\n      if (state.lightData && state.lightFancyTree) {\n        state.lightFancyTree.clearFilter();\n      }\n\n      return { ...state,\n        filterCount: 0\n      };\n\n    default:\n      return null;\n  }\n});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/lighter/lighterReducer.js"],"names":["GET_LIGHTER_VIEW","SET_LOADING_LIGHTER_VIEW","CLEAN_LIGHTER_VIEW_DATA","SET_LIGHTER_FANCY_TREE","FILTER_LIGHTER_TREE_VIEW","SET_LOADING_FILTER_LIGHTER_TREE_VIEW","CLEAR_LIGHTER_FILTER","INCREASE_LOADING_QUICK_VIEW","state","action","type","lightData","payload","elapsedLoadingQuickView","loadingView","lightFancyTree","loadingFilterTreeView","string","count","indexOf","fields","split","result","filterNodes","node","string_test","title","i","length","found_index","substring","filterCount","clearFilter"],"mappings":"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","sourcesContent":["import {\n  GET_LIGHTER_VIEW,\n  SET_LOADING_LIGHTER_VIEW,\n  CLEAN_LIGHTER_VIEW_DATA,\n  SET_LIGHTER_FANCY_TREE,\n  FILTER_LIGHTER_TREE_VIEW,\n  SET_LOADING_FILTER_LIGHTER_TREE_VIEW,\n  CLEAR_LIGHTER_FILTER,\n  INCREASE_LOADING_QUICK_VIEW,\n} from \"../types\";\n\n//import { DEBUG } from \"../vars\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_LIGHTER_VIEW:\n      // const result = action.payload;\n      return {\n        ...state,\n        lightData: action.payload,\n        elapsedLoadingQuickView: 1,\n        loadingView: false,\n      };\n    case CLEAN_LIGHTER_VIEW_DATA:\n      return {\n        ...state,\n        lightData: null,\n        lightFancyTree: null,\n        loadingView: false,\n        loadingFilterTreeView: false,\n      };\n    case SET_LOADING_LIGHTER_VIEW:\n      return {\n        ...state,\n        loadingView: true,\n      };\n    case SET_LIGHTER_FANCY_TREE:\n      return {\n        ...state,\n        lightFancyTree: action.payload,\n      };\n    case SET_LOADING_FILTER_LIGHTER_TREE_VIEW:\n      return {\n        ...state,\n        loadingFilterTreeView: true,\n      };\n    case INCREASE_LOADING_QUICK_VIEW:\n      return {\n        ...state,\n        elapsedLoadingQuickView: state.elapsedLoadingQuickView + 1,\n      };\n    case FILTER_LIGHTER_TREE_VIEW:\n      const string = action.payload;\n      if (state.lightData && state.lightFancyTree) {\n        let count = 0;\n        if (string.indexOf(\"*\") > -1) {\n          const fields = string.split(\"*\");\n          let result = false;\n          count = state.lightFancyTree.filterNodes(function (node) {\n            let string_test = node.title;\n            for (let i = 0; i < fields.length; i++) {\n              if (fields[i].length > 0) {\n                if (string_test.indexOf(fields[i]) > -1) {\n                  //debug && console.log(fields[i] + \" found in \" + string_test);\n                  let found_index =\n                    string_test.indexOf(fields[i]) + fields[i].length;\n                  string_test = string_test.substring(found_index);\n                  //debug && console.log(found_index + \" in \" + string_test);\n                  result = true;\n                } else {\n                  // debug &&\n                  //   console.log(fields[i] + \" Not found in \" + string_test);\n                  result = false;\n                  break;\n                }\n              }\n            }\n            return result;\n          });\n        } else {\n          count = state.lightFancyTree.filterNodes(string);\n        }\n        //debug && console.log(count);\n        state.filterCount = count;\n      } else {\n        state.filterCount = 0;\n      }\n      return {\n        ...state,\n        loadingFilterTreeView: false,\n      };\n    case CLEAR_LIGHTER_FILTER:\n      if (state.lightData && state.lightFancyTree) {\n        state.lightFancyTree.clearFilter();\n      }\n      return {\n        ...state,\n        filterCount: 0,\n      };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}