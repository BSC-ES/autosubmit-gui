{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/experiment/GraphNativeRep.js\";\nimport React, { Component, createRef } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport vis from \"vis-network\";\nimport { DEBUG } from \"../context/vars\";\n\nclass GraphNativeRep extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.shouldUpdateGraph === true) {\n      //console.log(\"should Rerender\")\n      return true;\n    } else if (nextProps.data && this.props.data && nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp) {\n      //console.log(\"Rerendering\")\n      return true;\n    } else if (nextProps.loadingGraph !== this.props.loadingGraph) {\n      //console.log(\"Render because changed loading\")\n      return true;\n    } else {\n      //console.log(\"NO RERENDER\")\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    DEBUG && console.log(\"Unmounting Nav Rep\");\n    this.props.cleanGraphData();\n    this.props.clearStats();\n  }\n\n  render() {\n    if (this.props.loadingGraph) return /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 41\n      }\n    });\n\n    if (!this.props.data) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body text-left\",\n        style: experimentStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }, \"Press \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"badge badge-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 19\n        }\n      }, \"Classic\"), \" to see the standard graph representation of the experiment.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }, \"For the classic approach, the algorithm will first try to use graphviz, there are some constraints in place that try to identify those instances that could potentially make graphviz run forever. If an experiment is identified to be time-wise out of bounds for graphviz, it will be sent to the regular algorithm. Currently, the regular algorithm does not handle well wrappers; work is being done to developed a general algorithm.\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, \"Press \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"badge badge-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }\n      }, \"Grouped\"), \" to see the grouped by date-member graph representation of the experiment.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \"If the experiment instance cannot be handled by graphviz, then it would not be possible to group it. Again, work is being done to overcome this.\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, \"If the experiment is\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"badge badge-success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, \"RUNNING\"), \" and the Graph has been rendered, press\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"badge badge-dark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, \"Start Job Monitor\"), \" to start a live tracker of the changes on the experiment's jobs. This process will automatically update the graph's nodes colors and show a log of the detected changes.\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, \"If there are any defined wrappers, they will be shown on the corresponding tab at the right side of the Graph. You can click on any member of that list and the nodes belonging to that wrapper will be highlighted.\"));\n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n    const graphviz = this.props.data.graphviz;\n    const groups = this.props.data.groups;\n    const groups_data = this.props.data.groups_data;\n    const current_grouped = this.props.current_grouped;\n\n    if (this.props.data.nodes.length > 0 && this.props.data.edges !== null) {\n      if (graphviz === true) {\n        this.props.data.nodes.map(node => nodes_array.push({\n          id: node.id,\n          label: node.label,\n          shape: node.shape,\n          color: {\n            background: node.status_color,\n            border: \"black\"\n          },\n          status: node.status,\n          // level: node.level, // receiving x and y from API\n          // fixed: { x: true, y: true},\n          x: node.x,\n          y: node.y,\n          shapeProperties: {\n            borderDashes: node.dashed\n          }\n        }));\n      } else {\n        this.props.data.nodes.map(node => nodes_array.push({\n          id: node.id,\n          label: node.label,\n          shape: node.shape,\n          color: {\n            background: node.status_color,\n            border: \"black\"\n          },\n          status: node.status,\n          //level: node.level,\n          //y: node.level*80,\n          shapeProperties: {\n            borderDashes: node.dashed\n          },\n          // fixed: { x: true, y: true},\n          x: node.x,\n          y: node.y // x: node.x * -90,\n          // y: node.y * -100,\n\n        }));\n      }\n\n      if (this.props.data.edges) {\n        this.props.data.edges.map(edge => edges_array.push({\n          id: edge.id,\n          from: edge.from,\n          to: edge.to,\n          dashes: edge.dashed,\n          background: {\n            enabled: edge.is_wrapper,\n            color: \"rgba(63, 191, 63, 0.5)\"\n          },\n          arrows: {\n            to: {\n              enabled: !edge.dashed\n            }\n          }\n        }));\n      }\n\n      if (this.props.data.fake_edges) {\n        this.props.data.fake_edges.map(edge => edges_array.push({\n          id: edge.id,\n          from: edge.from,\n          to: edge.to,\n          dashes: edge.dashed,\n          background: {\n            enabled: edge.is_wrapper,\n            color: \"rgba(63, 191, 63, 0.5)\"\n          },\n          arrows: {\n            to: {\n              enabled: !edge.dashed\n            }\n          }\n        }));\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body text-left\",\n        style: experimentStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, \"Something has gone very wrong.\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }\n      }, this.props.data.error_message));\n    }\n\n    var nodes = new vis.DataSet(nodes_array);\n    var edges = new vis.DataSet(edges_array);\n    var shouldEdge = false;\n\n    if (this.props.data.total_jobs <= 500) {\n      shouldEdge = true;\n    }\n\n    const options = {\n      autoResize: true,\n      edges: {\n        arrows: {\n          to: {\n            enabled: true\n          }\n        }\n      },\n      layout: {\n        improvedLayout: false,\n        hierarchical: {\n          nodeSpacing: 190,\n          blockShifting: false,\n          edgeMinimization: shouldEdge,\n          parentCentralization: true,\n          sortMethod: \"hubsize\",\n          direction: \"UD\",\n          enabled: false\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        hideEdgesOnDrag: true,\n        //hideEdgesOnZoom: true,\n        multiselect: true,\n        navigationButtons: true\n      },\n      physics: {\n        enabled: false,\n        stabilization: {\n          // Determines an initial layout; enabled by default\n          enabled: true,\n          iterations: 1000\n        }\n      },\n      nodes: {\n        shape: \"dot\",\n        font: {\n          size: 10\n        }\n      }\n    };\n    const graph = {\n      nodes: nodes,\n      edges: edges\n    };\n\n    class VisNetwork extends Component {\n      constructor() {\n        super();\n        this.appRef = createRef();\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.shouldUpdateGraph === true) {\n          DEBUG && console.log(\"Should rerender form inside\");\n          return true;\n        } else {\n          //console.log(\"No RERENDER\")\n          DEBUG && console.log(\"No rerender\");\n          return false;\n        }\n      }\n\n      componentDidMount() {\n        let network = new vis.Network(this.appRef.current, this.props.graph, this.props.options);\n        const groups_data = this.props.groups_data;\n        const current_grouped = this.props.current_grouped;\n        this.props.setVisNetwork(network);\n        network.on(\"select\", params => {\n          if (params.nodes) {\n            if (params.nodes.length === 1) {\n              if (network.isCluster(params.nodes[0])) {} else {\n                //console.log(params.nodes);\n                this.props.updateSelection(params.nodes); // this.props.updateGraphSelectedNodes(params.nodes);\n\n                this.props.updateCurrentSelected(params.nodes[0], this.props.data);\n              }\n            } // } else {\n            //   this.props.updateSelection(params.nodes);\n            // }\n\n          }\n        }); // network.on(\"stabilized\", () => {\n        //   this.props.navigateAfterLoadGraph(this.props.experimentRunning);\n        // });\n\n        network.on(\"doubleClick\", params => {\n          if (params.nodes) {\n            if (params.nodes.length === 1) {\n              if (network.isCluster(params.nodes[0])) {\n                var OpenClusterObj = {};\n\n                OpenClusterObj.releaseFunction = function (clusterPosition, containedNodesPositions) {\n                  return containedNodesPositions;\n                };\n\n                network.openCluster(params.nodes[0], OpenClusterObj);\n              }\n            }\n          }\n        }); //network.enableEditMode();\n        //console.log(this.props.isGraphViz);\n\n        if (this.props.clusterGroups) {\n          const groups = this.props.clusterGroups;\n\n          if (current_grouped === \"date-member\") {\n            var clusterOptionsByDateMember;\n\n            for (var i = 0; i < groups.length; i++) {\n              var startingName = groups[i]; // if (positions[startingName]){\n              //   console.log(positions[startingName]);\n              // }\n\n              clusterOptionsByDateMember = {\n                // eslint-disable-next-line no-loop-func\n                joinCondition: function (options) {\n                  return options.id.startsWith(startingName);\n                },\n                processProperties: function (clusterOptions, childNodes, childEdges) {\n                  var totalMass = 0;\n\n                  for (var i = 0; i < childNodes.length; i++) {\n                    totalMass += childNodes[i].mass;\n                  }\n\n                  clusterOptions.mass = totalMass;\n                  return clusterOptions;\n                },\n                clusterNodeProperties: {\n                  id: \"cluster:\" + startingName,\n                  borderWidth: 3,\n                  shape: \"box\",\n                  label: startingName.split(\"_\").join(\"\\n\"),\n                  color: groups_data[startingName].color,\n                  font: {\n                    size: 50\n                  },\n                  x: groups_data[startingName].x,\n                  y: groups_data[startingName].y\n                }\n              };\n              network.clustering.cluster(clusterOptionsByDateMember);\n            }\n          } else if (current_grouped === \"status\") {\n            var clusterOptionsByStatus;\n\n            for (var j = 0; j < groups.length; j++) {\n              var statusName = groups[j]; // console.log(statusName);\n\n              clusterOptionsByStatus = {\n                // eslint-disable-next-line no-loop-func\n                joinCondition: function (options) {\n                  // console.log(options);\n                  return options.status === statusName && options.shape === \"dot\";\n                },\n                processProperties: function (clusterOptions, childNodes, childEdges) {\n                  var totalMass = 0;\n\n                  for (var i = 0; i < childNodes.length; i++) {\n                    totalMass += childNodes[i].mass;\n                  }\n\n                  clusterOptions.mass = totalMass;\n                  return clusterOptions;\n                },\n                clusterNodeProperties: {\n                  id: statusName,\n                  borderWidth: 3,\n                  shape: \"box\",\n                  label: statusName,\n                  color: groups_data[statusName].color,\n                  font: {\n                    size: 50\n                  }\n                }\n              };\n              network.clustering.cluster(clusterOptionsByStatus);\n            }\n          }\n        }\n\n        this.props.navigateAfterLoadGraph(this.props.experimentRunning);\n      }\n\n      componentWillUnmount() {\n        DEBUG && console.log(\"Unmounting VisNetwork\");\n        this.props.cleanNavData();\n      }\n\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card-body p-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          ref: \"{this.appRef}\",\n          style: experimentStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }\n        }));\n      }\n\n    }\n\n    return /*#__PURE__*/React.createElement(VisNetwork, {\n      data: this.props.data,\n      graph: graph,\n      options: options,\n      updateSelection: this.props.updateSelection,\n      shouldUpdateGraph: this.props.shouldUpdateGraph,\n      setVisNetwork: this.props.setVisNetwork,\n      cleanNavData: this.props.cleanNavData,\n      isGraphViz: graphviz,\n      clusterGroups: groups,\n      groups_data: groups_data,\n      current_grouped: current_grouped,\n      experimentRunning: this.props.experimentRunning,\n      navigateAfterLoadGraph: this.props.navigateAfterLoadGraph,\n      updateCurrentSelected: this.props.updateCurrentSelected,\n      updateGraphSelectedNodes: this.props.updateGraphSelectedNodes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst experimentStyle = {\n  height: 755\n};\nexport default GraphNativeRep;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/experiment/GraphNativeRep.js"],"names":["React","Component","createRef","Spinner","vis","DEBUG","GraphNativeRep","shouldComponentUpdate","nextProps","nextState","props","shouldUpdateGraph","data","pkl_timestamp","loadingGraph","componentWillUnmount","console","log","cleanGraphData","clearStats","render","experimentStyle","nodes_array","edges_array","graphviz","groups","groups_data","current_grouped","nodes","length","edges","map","node","push","id","label","shape","color","background","status_color","border","status","x","y","shapeProperties","borderDashes","dashed","edge","from","to","dashes","enabled","is_wrapper","arrows","fake_edges","error_message","DataSet","shouldEdge","total_jobs","options","autoResize","layout","improvedLayout","hierarchical","nodeSpacing","blockShifting","edgeMinimization","parentCentralization","sortMethod","direction","interaction","dragNodes","hoverConnectedEdges","hideEdgesOnDrag","multiselect","navigationButtons","physics","stabilization","iterations","font","size","graph","VisNetwork","constructor","appRef","componentDidMount","network","Network","current","setVisNetwork","on","params","isCluster","updateSelection","updateCurrentSelected","OpenClusterObj","releaseFunction","clusterPosition","containedNodesPositions","openCluster","clusterGroups","clusterOptionsByDateMember","i","startingName","joinCondition","startsWith","processProperties","clusterOptions","childNodes","childEdges","totalMass","mass","clusterNodeProperties","borderWidth","split","join","clustering","cluster","clusterOptionsByStatus","j","statusName","navigateAfterLoadGraph","experimentRunning","cleanNavData","updateGraphSelectedNodes","height"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport vis from \"vis-network\";\nimport { DEBUG } from \"../context/vars\";\nclass GraphNativeRep extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.shouldUpdateGraph === true) {\n      //console.log(\"should Rerender\")\n      return true;\n    } else if (\n      nextProps.data &&\n      this.props.data &&\n      nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp\n    ) {\n      //console.log(\"Rerendering\")\n      return true;\n    } else if (nextProps.loadingGraph !== this.props.loadingGraph) {\n      //console.log(\"Render because changed loading\")\n      return true;\n    } else {\n      //console.log(\"NO RERENDER\")\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    DEBUG && console.log(\"Unmounting Nav Rep\");\n    this.props.cleanGraphData();\n    this.props.clearStats();\n  }\n\n  render() {\n    if (this.props.loadingGraph) return <Spinner></Spinner>;\n    if (!this.props.data) {\n      return (\n        <div className='card-body text-left' style={experimentStyle}>\n          <p className='lead'>\n            Press <span className='badge badge-info'>Classic</span> to see the\n            standard graph representation of the experiment.\n          </p>\n          <p>\n            For the classic approach, the algorithm will first try to use\n            graphviz, there are some constraints in place that try to identify\n            those instances that could potentially make graphviz run forever. If\n            an experiment is identified to be time-wise out of bounds for\n            graphviz, it will be sent to the regular algorithm. Currently, the\n            regular algorithm does not handle well wrappers; work is being done\n            to developed a general algorithm.\n          </p>\n          <p className='lead'>\n            Press <span className='badge badge-info'>Grouped</span> to see the\n            grouped by date-member graph representation of the experiment.\n          </p>\n          <p>\n            If the experiment instance cannot be handled by graphviz, then it\n            would not be possible to group it. Again, work is being done to\n            overcome this.\n          </p>\n          <p className='lead'>\n            If the experiment is{\" \"}\n            <span className='badge badge-success'>RUNNING</span> and the Graph\n            has been rendered, press{\" \"}\n            <span className='badge badge-dark'>Start Job Monitor</span> to start\n            a live tracker of the changes on the experiment's jobs. This process\n            will automatically update the graph's nodes colors and show a log of\n            the detected changes.\n          </p>\n          <p className='lead'>\n            If there are any defined wrappers, they will be shown on the\n            corresponding tab at the right side of the Graph. You can click on\n            any member of that list and the nodes belonging to that wrapper will\n            be highlighted.\n          </p>\n        </div>\n      );\n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n    const graphviz = this.props.data.graphviz;\n    const groups = this.props.data.groups;\n    const groups_data = this.props.data.groups_data;\n    const current_grouped = this.props.current_grouped;\n\n    if (this.props.data.nodes.length > 0 && this.props.data.edges !== null) {\n      if (graphviz === true) {\n        this.props.data.nodes.map((node) =>\n          nodes_array.push({\n            id: node.id,\n            label: node.label,\n            shape: node.shape,\n            color: { background: node.status_color, border: \"black\" },\n            status: node.status,\n            // level: node.level, // receiving x and y from API\n            // fixed: { x: true, y: true},\n            x: node.x,\n            y: node.y,\n            shapeProperties: { borderDashes: node.dashed },\n          })\n        );\n      } else {\n        this.props.data.nodes.map((node) =>\n          nodes_array.push({\n            id: node.id,\n            label: node.label,\n            shape: node.shape,\n            color: { background: node.status_color, border: \"black\" },\n            status: node.status,\n            //level: node.level,\n            //y: node.level*80,\n            shapeProperties: { borderDashes: node.dashed },\n            // fixed: { x: true, y: true},\n            x: node.x,\n            y: node.y,\n            // x: node.x * -90,\n            // y: node.y * -100,\n          })\n        );\n      }\n\n      if (this.props.data.edges) {\n        this.props.data.edges.map((edge) =>\n          edges_array.push({\n            id: edge.id,\n            from: edge.from,\n            to: edge.to,\n            dashes: edge.dashed,\n            background: {\n              enabled: edge.is_wrapper,\n              color: \"rgba(63, 191, 63, 0.5)\",\n            },\n            arrows: { to: { enabled: !edge.dashed } },\n          })\n        );\n      }\n\n      if (this.props.data.fake_edges) {\n        this.props.data.fake_edges.map((edge) =>\n          edges_array.push({\n            id: edge.id,\n            from: edge.from,\n            to: edge.to,\n            dashes: edge.dashed,\n            background: {\n              enabled: edge.is_wrapper,\n              color: \"rgba(63, 191, 63, 0.5)\",\n            },\n            arrows: { to: { enabled: !edge.dashed } },\n          })\n        );\n      }\n    } else {\n      return (\n        <div className='card-body text-left' style={experimentStyle}>\n          <p className='lead'>Something has gone very wrong.</p>\n          <p className='lead text-danger'>{this.props.data.error_message}</p>\n        </div>\n      );\n    }\n\n    var nodes = new vis.DataSet(nodes_array);\n    var edges = new vis.DataSet(edges_array);\n\n    var shouldEdge = false;\n    if (this.props.data.total_jobs <= 500) {\n      shouldEdge = true;\n    }\n    const options = {\n      autoResize: true,\n      edges: {\n        arrows: {\n          to: { enabled: true },\n        },\n      },\n      layout: {\n        improvedLayout: false,\n        hierarchical: {\n          nodeSpacing: 190,\n          blockShifting: false,\n          edgeMinimization: shouldEdge,\n          parentCentralization: true,\n          sortMethod: \"hubsize\",\n          direction: \"UD\",\n          enabled: false,\n        },\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        hideEdgesOnDrag: true,\n        //hideEdgesOnZoom: true,\n        multiselect: true,\n        navigationButtons: true,\n      },\n      physics: {\n        enabled: false,\n        stabilization: {\n          // Determines an initial layout; enabled by default\n          enabled: true,\n          iterations: 1000,\n        },\n      },\n      nodes: {\n        shape: \"dot\",\n        font: {\n          size: 10,\n        },\n      },\n    };\n\n    const graph = {\n      nodes: nodes,\n      edges: edges,\n    };\n\n    class VisNetwork extends Component {\n\n      constructor() {\n        super();\n        this.appRef = createRef();\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.shouldUpdateGraph === true) {\n          DEBUG && console.log(\"Should rerender form inside\");\n          return true;\n        } else {\n          //console.log(\"No RERENDER\")\n          DEBUG && console.log(\"No rerender\");\n          return false;\n        }\n      }\n\n      componentDidMount() {\n        let network = new vis.Network(\n          this.appRef.current,\n          this.props.graph,\n          this.props.options\n        );\n        const groups_data = this.props.groups_data;\n        const current_grouped = this.props.current_grouped;\n\n        this.props.setVisNetwork(network);\n        network.on(\"select\", (params) => {\n          if (params.nodes) {\n            if (params.nodes.length === 1) {\n              if (network.isCluster(params.nodes[0])) {\n              } else {\n                //console.log(params.nodes);\n                this.props.updateSelection(params.nodes);\n                // this.props.updateGraphSelectedNodes(params.nodes);\n                this.props.updateCurrentSelected(\n                  params.nodes[0],\n                  this.props.data\n                );\n              }\n            }\n            // } else {\n            //   this.props.updateSelection(params.nodes);\n            // }\n          }\n        });\n\n        // network.on(\"stabilized\", () => {\n        //   this.props.navigateAfterLoadGraph(this.props.experimentRunning);\n        // });\n\n        network.on(\"doubleClick\", (params) => {\n          if (params.nodes) {\n            if (params.nodes.length === 1) {\n              if (network.isCluster(params.nodes[0])) {\n                var OpenClusterObj = {};\n                OpenClusterObj.releaseFunction = function (\n                  clusterPosition,\n                  containedNodesPositions\n                ) {\n                  return containedNodesPositions;\n                };\n                network.openCluster(params.nodes[0], OpenClusterObj);\n              }\n            }\n          }\n        });\n\n        //network.enableEditMode();\n        //console.log(this.props.isGraphViz);\n        if (this.props.clusterGroups) {\n          const groups = this.props.clusterGroups;\n          if (current_grouped === \"date-member\") {\n            var clusterOptionsByDateMember;\n            for (var i = 0; i < groups.length; i++) {\n              var startingName = groups[i];\n              // if (positions[startingName]){\n              //   console.log(positions[startingName]);\n              // }\n              clusterOptionsByDateMember = {\n                // eslint-disable-next-line no-loop-func\n                joinCondition: function (options) {\n                  return options.id.startsWith(startingName);\n                },\n                processProperties: function (\n                  clusterOptions,\n                  childNodes,\n                  childEdges\n                ) {\n                  var totalMass = 0;\n                  for (var i = 0; i < childNodes.length; i++) {\n                    totalMass += childNodes[i].mass;\n                  }\n                  clusterOptions.mass = totalMass;\n                  return clusterOptions;\n                },\n                clusterNodeProperties: {\n                  id: \"cluster:\" + startingName,\n                  borderWidth: 3,\n                  shape: \"box\",\n                  label: startingName.split(\"_\").join(\"\\n\"),\n                  color: groups_data[startingName].color,\n                  font: { size: 50 },\n                  x: groups_data[startingName].x,\n                  y: groups_data[startingName].y,\n                },\n              };\n              network.clustering.cluster(clusterOptionsByDateMember);\n            }\n          } else if (current_grouped === \"status\") {\n            var clusterOptionsByStatus;\n            for (var j = 0; j < groups.length; j++) {\n              var statusName = groups[j];\n              // console.log(statusName);\n              clusterOptionsByStatus = {\n                // eslint-disable-next-line no-loop-func\n                joinCondition: function (options) {\n                  // console.log(options);\n                  return (\n                    options.status === statusName && options.shape === \"dot\"\n                  );\n                },\n                processProperties: function (\n                  clusterOptions,\n                  childNodes,\n                  childEdges\n                ) {\n                  var totalMass = 0;\n                  for (var i = 0; i < childNodes.length; i++) {\n                    totalMass += childNodes[i].mass;\n                  }\n                  clusterOptions.mass = totalMass;\n                  return clusterOptions;\n                },\n                clusterNodeProperties: {\n                  id: statusName,\n                  borderWidth: 3,\n                  shape: \"box\",\n                  label: statusName,\n                  color: groups_data[statusName].color,\n                  font: { size: 50 },\n                },\n              };\n              network.clustering.cluster(clusterOptionsByStatus);\n            }\n          }\n        }\n\n        this.props.navigateAfterLoadGraph(this.props.experimentRunning);\n      }\n\n      componentWillUnmount() {\n        DEBUG && console.log(\"Unmounting VisNetwork\");\n        this.props.cleanNavData();\n      }\n\n      render() {\n        return (\n          <div className='card-body p-0'>\n            <div ref='{this.appRef}' style={experimentStyle}></div>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <VisNetwork\n        data={this.props.data}\n        graph={graph}\n        options={options}\n        updateSelection={this.props.updateSelection}\n        shouldUpdateGraph={this.props.shouldUpdateGraph}\n        setVisNetwork={this.props.setVisNetwork}\n        cleanNavData={this.props.cleanNavData}\n        isGraphViz={graphviz}\n        clusterGroups={groups}\n        groups_data={groups_data}\n        current_grouped={current_grouped}\n        experimentRunning={this.props.experimentRunning}\n        navigateAfterLoadGraph={this.props.navigateAfterLoadGraph}\n        updateCurrentSelected={this.props.updateCurrentSelected}\n        updateGraphSelectedNodes={this.props.updateGraphSelectedNodes}\n      />\n    );\n  }\n}\n\nconst experimentStyle = {\n  height: 755,\n};\n\nexport default GraphNativeRep;\n"]},"metadata":{},"sourceType":"module"}