{"ast":null,"code":"import { GET_GRAPH, GET_PKL_DATA, SET_LOADING_GRAPH, SET_OFF_LOADING_GRAPH, CLEAN_ONLY_GRAH_DATA, SET_VIS_DATA, SET_VIS_NETWORK, SET_FOUND_NODES, SET_LOADING_SEARCH_JOB, SET_LOADING_JOB_MONITOR, SET_LOADING_PKL, CLEAN_GRAPH_DATA, UPDATE_NODES, SET_PKL_CHANGES, SHOULD_UPDATE_GRAPH, CLEAN_PKL_DATA, CLEAN_NAV_DATA, UPDATE_SELECTION, SET_AUTOUPDATE_PKL, NAVIGATE_AFTER_LOADING_GRAPH, NAVIGATE_GRAPH_TO, NAVIGATE_TO_GROUP_GRAPH, NAVIGATE_TO_LATEST, UPDATE_GRAPH_SELECTED_NODES, SET_CURRENT_COMMAND, SET_NOTIFICATION_TITLE_GRAPH //DEACTIVATE_COPY_TO,\n} from \"../types\";\nimport { DEBUG } from \"../vars\";\nimport { WaitingCode, FailedCode, CompletedCode, RunningCode, QueueCode, SubmittedCode } from \"../vars\";\nimport { addFakeEdge, updateEdgeStyle, updateGraphBorder, updateGraphColor, updateGraphShape, navToLatest, navigateGraph, findIdinGraph } from \"../graphutils\";\nimport { timeStampToDate } from \"../utils\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_GRAPH:\n      const {\n        resdata,\n        grouped,\n        layout\n      } = action.payload;\n      return { ...state,\n        data: resdata,\n        current_grouped: grouped,\n        current_layout: layout,\n        loadingGraph: false,\n        enabledGraphSearch: true,\n        graphSelectedNodes: null\n      };\n\n    case GET_PKL_DATA:\n      let retrievedPkl = action.payload;\n\n      if (state.data !== null && retrievedPkl.has_changed === true && retrievedPkl.pkl_content.length > 0) {\n        let current_jobs = {};\n        let jobs = {};\n        let colorChanges = {};\n        let shapeChanges = {};\n        let edgeUpdates = {};\n        let new_fakeEdges = {};\n        let changes = \"\";\n        let changesSummarized = \"\";\n        let pkl_packages = retrievedPkl[\"packages\"];\n        let current_packages = state.data[\"packages\"]; // Saving current state data into a dictionary\n\n        for (let k = 0, kjob; k < state.data.nodes.length; k++) {\n          kjob = state.data.nodes[k];\n          current_jobs[kjob.id] = kjob;\n        } // Saving retrieved jobs into a dictionary\n\n\n        for (let j = 0, job; j < retrievedPkl.pkl_content.length; j++) {\n          job = retrievedPkl.pkl_content[j];\n          jobs[job.name] = job;\n        } // Updating list of packages and adding to shape change\n        // Shape change currently not working\n\n\n        for (let pkl_package in pkl_packages) {\n          if (!Object.keys(current_packages).includes(pkl_package)) {\n            current_packages[pkl_package] = pkl_packages[pkl_package]; //console.log(pkl_packages[pkl_package]);\n\n            for (let index in pkl_packages[pkl_package]) {\n              let index_i = parseInt(index);\n              let job_name = pkl_packages[pkl_package][index_i]; //console.log(job_name);\n\n              shapeChanges[job_name] = \"hexagon\"; //console.log(index_i);\n              //console.log(pkl_packages[pkl_package].length);\n\n              let next = index_i + 1; //console.log(next);\n\n              if (next < pkl_packages[pkl_package].length) {\n                //console.log(pkl_packages[pkl_package][index_i]);\n                //console.log(pkl_packages[pkl_package][next]);\n                if (current_jobs[pkl_packages[pkl_package][index_i]].level === current_jobs[pkl_packages[pkl_package][next]].level) {\n                  new_fakeEdges[pkl_packages[pkl_package][index_i]] = pkl_packages[pkl_package][next];\n                }\n              }\n            }\n          }\n        }\n\n        let requireUpdate = false;\n        DEBUG && console.log(\"Current ts: \" + retrievedPkl.pkl_timestamp);\n\n        if (state.data.nodes) {\n          for (let i = 0; i < state.data.nodes.length; i++) {\n            // console.log(newNodes[i].id);\n            //console.log(state.data.nodes[i]);\n            // console.log(jobs[ newNodes[i].id ]);\n            let jobPkl = jobs[state.data.nodes[i].id];\n\n            if (jobPkl && (state.data.nodes[i].status_code !== jobPkl.status_code || state.data.nodes[i].package !== jobPkl.package || state.data.nodes[i].minutes !== jobPkl.minutes || state.data.nodes[i].minutes_queue !== jobPkl.minutes_queue)) {\n              // changes += state.data.nodes[i].id + \" from \" + state.data.nodes[i].status + \" to \" + jobs[ state.data.nodes[i].id ].status + \" || \";\n              if (state.data.nodes[i].status_code !== jobs[state.data.nodes[i].id].status_code) {\n                changes += timeStampToDate(retrievedPkl.pkl_timestamp) + \": \" + state.data.nodes[i].id + \" to \" + jobs[state.data.nodes[i].id].status + \"\\n\";\n                changesSummarized += jobs[state.data.nodes[i].id].status + \" : \" + state.data.nodes[i].id + \"\\n\";\n              } else {// Not decided.\n              }\n\n              if (state.data.nodes[i].package !== jobs[state.data.nodes[i].id].package) {\n                changes += timeStampToDate(retrievedPkl.pkl_timestamp) + \": \" + state.data.nodes[i].id + \" added to \" + jobs[state.data.nodes[i].id].package + \"\\n\";\n                changesSummarized += \"Wrapper \" + jobs[state.data.nodes[i].id].package + \" added.\\n\";\n                let current_job = current_jobs[state.data.nodes[i].id];\n                let children_current = current_job.children_list;\n\n                for (let child in children_current) {\n                  if (jobs[children_current[child]].package === jobs[state.data.nodes[i].id].package) {\n                    edgeUpdates[state.data.nodes[i].id] = children_current[child];\n                  }\n                }\n              } // If status change, add to change colors. Set to new status color.\n\n\n              if (state.data.nodes[i].status_code !== jobs[state.data.nodes[i].id].status_code) {\n                colorChanges[state.data.nodes[i].id] = jobs[state.data.nodes[i].id].status_color;\n                state.data.nodes[i].status_code = jobs[state.data.nodes[i].id].status_code;\n                state.data.nodes[i].status_color = jobs[state.data.nodes[i].id].status_color;\n                state.data.nodes[i].status = jobs[state.data.nodes[i].id].status;\n              }\n\n              state.data.nodes[i].package = jobs[state.data.nodes[i].id].package;\n              state.data.nodes[i].dashed = jobs[state.data.nodes[i].id].dashed;\n              state.data.nodes[i].shape = jobs[state.data.nodes[i].id].shape;\n              state.data.nodes[i].out = jobs[state.data.nodes[i].id].out;\n              state.data.nodes[i].err = jobs[state.data.nodes[i].id].err;\n              state.data.nodes[i].minutes = jobs[state.data.nodes[i].id].minutes;\n              state.data.nodes[i].minutes_queue = jobs[state.data.nodes[i].id].minutes_queue;\n              state.data.nodes[i].submit = jobs[state.data.nodes[i].id].submit;\n              state.data.nodes[i].start = jobs[state.data.nodes[i].id].start;\n              state.data.nodes[i].finish = jobs[state.data.nodes[i].id].finish;\n              state.data.nodes[i].rm_id = jobs[state.data.nodes[i].id].rm_id; //console.log(state.data.nodes[i].status_color)\n\n              requireUpdate = true;\n            }\n          }\n\n          if (requireUpdate) {\n            DEBUG && console.log(\"New ts: \" + retrievedPkl.pkl_timestamp);\n            state.data.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            state.notificationTitleGraph = changesSummarized;\n\n            if (state.pklchanges) {\n              state.pklchanges = changes + state.pklchanges;\n            } else {\n              state.pklchanges = changes;\n            }\n\n            for (var key in colorChanges) {\n              //console.log( key, colorChanges[key] );\n              updateGraphColor(key, colorChanges[key], state);\n            }\n\n            for (var key_shape in shapeChanges) {\n              updateGraphShape(key_shape, shapeChanges[key_shape], state);\n              updateGraphBorder(key_shape, state);\n            }\n\n            for (var key_edge in edgeUpdates) {\n              updateEdgeStyle(key_edge + \"-\" + edgeUpdates[key_edge], state);\n            }\n\n            for (var key_added in new_fakeEdges) {\n              addFakeEdge(key_added, new_fakeEdges[key_added], state);\n            }\n          } else {\n            DEBUG && console.log(\"No changes but updating pkl anyway.\");\n          }\n        }\n      }\n\n      return { ...state,\n        pkldata: retrievedPkl,\n        loadingPkl: false,\n        loadingJobMonitor: false\n      };\n\n    case NAVIGATE_AFTER_LOADING_GRAPH:\n      const running = action.payload;\n\n      if (state.visNetwork) {\n        var found = false;\n        const cScale = 0.5;\n\n        if (running === true) {\n          //console.log(\"Search Running\")\n          found = navToLatest(RunningCode, true, cScale, state.visNetwork, state.data, state);\n\n          if (!found) {\n            found = navToLatest(QueueCode, true, cScale, state.visNetwork, state.data, state);\n\n            if (!found) {\n              found = navToLatest(SubmittedCode, true, cScale, state.visNetwork, state.data, state);\n\n              if (!found) {\n                found = navToLatest(CompletedCode, true, cScale, state.visNetwork, state.data, state);\n              }\n            }\n          }\n        } else {\n          found = navToLatest(FailedCode, true, cScale, state.visNetwork, state.data, state);\n\n          if (!found) {\n            found = navToLatest(CompletedCode, true, cScale, state.visNetwork, state.data, state);\n          }\n        }\n\n        if (!found) {\n          navToLatest(WaitingCode, false, cScale, state.visNetwork, state.data, state);\n        }\n      }\n\n      return { ...state\n      };\n\n    case NAVIGATE_GRAPH_TO:\n      const Id = action.payload;\n\n      if (state.visNetwork) {\n        const position = findIdinGraph(Id, state); //const currentPosition = state.visNetwork.getPositions([Id]);\n\n        if (position.x && position.y) {\n          navigateGraph(Id, position.x, position.y, 0.9, state.visNetwork); //state.visNetwork.selectNodes([Id]);\n\n          state.selection = [Id];\n        }\n      }\n\n      return { ...state\n      };\n\n    case NAVIGATE_TO_GROUP_GRAPH:\n      const IdList = action.payload;\n\n      if (state.visNetwork) {\n        state.visNetwork.unselectAll();\n        const currentLength = IdList.length;\n        const Id = IdList[parseInt(Math.floor(IdList.length / 2))];\n        const rescale = Math.sqrt(currentLength) * 0.065;\n        var currentPosition = state.visNetwork.getPositions(Id);\n\n        if (currentPosition[Id]) {\n          navigateGraph(null, currentPosition[Id].x, currentPosition[Id].y, 0.6 - rescale, state.visNetwork);\n          state.visNetwork.selectNodes(IdList);\n        }\n      }\n\n      return { ...state\n      };\n\n    case NAVIGATE_TO_LATEST:\n      const {\n        status,\n        latest\n      } = action.payload;\n      navToLatest(status, latest, 0.9, state.visNetwork, state.data, state);\n      return { ...state\n      };\n\n    case SET_LOADING_GRAPH:\n      return { ...state,\n        loadingGraph: true,\n        enabledGraphSearch: false\n      };\n\n    case SET_OFF_LOADING_GRAPH:\n      return { ...state,\n        loadingGraph: false,\n        enabledGraphSearch: true\n      };\n\n    case SET_VIS_DATA:\n      return { ...state,\n        visNodes: action.payload\n      };\n\n    case SET_VIS_NETWORK:\n      return { ...state,\n        visNetwork: action.payload\n      };\n\n    case SET_FOUND_NODES:\n      const string = action.payload;\n\n      if (state.data && state.data.nodes) {\n        const foundNodes = state.data.nodes.filter(node => node.id.toUpperCase().indexOf(string) >= 0);\n\n        if (foundNodes && foundNodes.length > 0) {\n          state.foundNodes = foundNodes;\n          const position = findIdinGraph(foundNodes[0].id, state);\n\n          if (position.x && position.y) {\n            navigateGraph(foundNodes[0].id, position.x, position.y, 0.9, state.visNetwork);\n            state.selection = [foundNodes[0].id];\n          }\n        } else {\n          state.foundNodes = null;\n        }\n      }\n\n      return { ...state,\n        loadingSearchJob: false //foundNodes: action.payload,\n\n      };\n\n    case SET_PKL_CHANGES:\n      return { ...state,\n        pklchanges: action.payload\n      };\n\n    case SET_LOADING_SEARCH_JOB:\n      return { ...state,\n        loadingSearchJob: true\n      };\n\n    case SET_LOADING_JOB_MONITOR:\n      return { ...state,\n        loadingJobMonitor: true\n      };\n\n    case SET_LOADING_PKL:\n      return { ...state,\n        loadingPkl: true\n      };\n\n    case SET_AUTOUPDATE_PKL:\n      return { ...state,\n        startAutoUpdatePkl: action.payload\n      };\n\n    case UPDATE_NODES:\n      return { ...state,\n        data: action.payload\n      };\n\n    case CLEAN_ONLY_GRAH_DATA:\n      return { ...state,\n        data: null,\n        selection: null,\n        enabledGraphSearch: true,\n        visNodes: null,\n        visNetwork: null,\n        foundNodes: null,\n        current_grouped: \"none\",\n        current_layout: \"standard\",\n        graphSelectedNodes: null\n      };\n\n    case SHOULD_UPDATE_GRAPH:\n      return { ...state,\n        shouldUpdateGraph: action.payload\n      };\n\n    case CLEAN_GRAPH_DATA:\n      return { ...state,\n        data: null,\n        selection: null,\n        enabledGraphSearch: true,\n        loadingGraph: false,\n        loadingPkl: false,\n        visNodes: null,\n        visNetwork: null,\n        foundNodes: null,\n        experimentRunning: false,\n        experiment: null,\n        current_grouped: \"none\",\n        current_layout: \"standard\",\n        //allowJobMonitor: false,\n        performancedata: null,\n        canSelect: false,\n        currentSelected: [],\n        currentCommand: null,\n        graphSelectedNodes: null //startAutoUpdatePkl: false,\n\n      };\n\n    case CLEAN_PKL_DATA:\n      return { ...state,\n        shouldUpdateGraph: false,\n        startAutoUpdatePkl: false,\n        pklchanges: null\n      };\n\n    case CLEAN_NAV_DATA:\n      return { ...state,\n        foundNodes: null,\n        startAutoUpdatePkl: false,\n        selection: null\n      };\n\n    case UPDATE_SELECTION:\n      return { ...state,\n        selection: action.payload\n      };\n\n    case UPDATE_GRAPH_SELECTED_NODES:\n      //const selectedNodes = action.payload;\n      state.graphSelectedNodes = null;\n      state.currentCommandGraph = null;\n\n      if (state.selection) {\n        const currentSelectedNodes = state.visNetwork.getSelectedNodes();\n        DEBUG && console.log(currentSelectedNodes);\n        state.graphSelectedNodes = currentSelectedNodes;\n      }\n\n      return { ...state\n      };\n\n    case SET_CURRENT_COMMAND:\n      return { ...state,\n        currentCommandGraph: action.payload,\n        canCopyToClipboard: true\n      };\n\n    case SET_NOTIFICATION_TITLE_GRAPH:\n      return { ...state,\n        notificationTitleGraph: action.payload\n      };\n    // case DEACTIVATE_COPY_TO:\n    //   return {\n    //     ...state,\n    //     canCopyToClipboard: false,\n    //   };\n\n    default:\n      return null;\n  }\n});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/graph/graphReducer.js"],"names":["GET_GRAPH","GET_PKL_DATA","SET_LOADING_GRAPH","SET_OFF_LOADING_GRAPH","CLEAN_ONLY_GRAH_DATA","SET_VIS_DATA","SET_VIS_NETWORK","SET_FOUND_NODES","SET_LOADING_SEARCH_JOB","SET_LOADING_JOB_MONITOR","SET_LOADING_PKL","CLEAN_GRAPH_DATA","UPDATE_NODES","SET_PKL_CHANGES","SHOULD_UPDATE_GRAPH","CLEAN_PKL_DATA","CLEAN_NAV_DATA","UPDATE_SELECTION","SET_AUTOUPDATE_PKL","NAVIGATE_AFTER_LOADING_GRAPH","NAVIGATE_GRAPH_TO","NAVIGATE_TO_GROUP_GRAPH","NAVIGATE_TO_LATEST","UPDATE_GRAPH_SELECTED_NODES","SET_CURRENT_COMMAND","SET_NOTIFICATION_TITLE_GRAPH","DEBUG","WaitingCode","FailedCode","CompletedCode","RunningCode","QueueCode","SubmittedCode","addFakeEdge","updateEdgeStyle","updateGraphBorder","updateGraphColor","updateGraphShape","navToLatest","navigateGraph","findIdinGraph","timeStampToDate","state","action","type","resdata","grouped","layout","payload","data","current_grouped","current_layout","loadingGraph","enabledGraphSearch","graphSelectedNodes","retrievedPkl","has_changed","pkl_content","length","current_jobs","jobs","colorChanges","shapeChanges","edgeUpdates","new_fakeEdges","changes","changesSummarized","pkl_packages","current_packages","k","kjob","nodes","id","j","job","name","pkl_package","Object","keys","includes","index","index_i","parseInt","job_name","next","level","requireUpdate","console","log","pkl_timestamp","i","jobPkl","status_code","package","minutes","minutes_queue","status","current_job","children_current","children_list","child","status_color","dashed","shape","out","err","submit","start","finish","rm_id","notificationTitleGraph","pklchanges","key","key_shape","key_edge","key_added","pkldata","loadingPkl","loadingJobMonitor","running","visNetwork","found","cScale","Id","position","x","y","selection","IdList","unselectAll","currentLength","Math","floor","rescale","sqrt","currentPosition","getPositions","selectNodes","latest","visNodes","string","foundNodes","filter","node","toUpperCase","indexOf","loadingSearchJob","startAutoUpdatePkl","shouldUpdateGraph","experimentRunning","experiment","performancedata","canSelect","currentSelected","currentCommand","currentCommandGraph","currentSelectedNodes","getSelectedNodes","canCopyToClipboard"],"mappings":"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","sourcesContent":["import {\n  GET_GRAPH,\n  GET_PKL_DATA,\n  SET_LOADING_GRAPH,\n  SET_OFF_LOADING_GRAPH,\n  CLEAN_ONLY_GRAH_DATA,\n  SET_VIS_DATA,\n  SET_VIS_NETWORK,\n  SET_FOUND_NODES,\n  SET_LOADING_SEARCH_JOB,\n  SET_LOADING_JOB_MONITOR,\n  SET_LOADING_PKL,\n  CLEAN_GRAPH_DATA,\n  UPDATE_NODES,\n  SET_PKL_CHANGES,\n  SHOULD_UPDATE_GRAPH,\n  CLEAN_PKL_DATA,\n  CLEAN_NAV_DATA,\n  UPDATE_SELECTION,\n  SET_AUTOUPDATE_PKL,\n  NAVIGATE_AFTER_LOADING_GRAPH,\n  NAVIGATE_GRAPH_TO,\n  NAVIGATE_TO_GROUP_GRAPH,\n  NAVIGATE_TO_LATEST,\n  UPDATE_GRAPH_SELECTED_NODES,\n  SET_CURRENT_COMMAND,\n  SET_NOTIFICATION_TITLE_GRAPH,\n  //DEACTIVATE_COPY_TO,\n} from \"../types\";\n\nimport { DEBUG } from \"../vars\";\n\nimport {\n  WaitingCode,\n  FailedCode,\n  CompletedCode,\n  RunningCode,\n  QueueCode,\n  SubmittedCode,\n} from \"../vars\";\n\nimport {\n  addFakeEdge,\n  updateEdgeStyle,\n  updateGraphBorder,\n  updateGraphColor,\n  updateGraphShape,\n  navToLatest,\n  navigateGraph,\n  findIdinGraph,\n} from \"../graphutils\";\n\nimport { timeStampToDate } from \"../utils\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_GRAPH:\n      const { resdata, grouped, layout } = action.payload;\n      return {\n        ...state,\n        data: resdata,\n        current_grouped: grouped,\n        current_layout: layout,\n        loadingGraph: false,\n        enabledGraphSearch: true,\n        graphSelectedNodes: null,\n      };\n    case GET_PKL_DATA:\n      let retrievedPkl = action.payload;\n      if (\n        state.data !== null &&\n        retrievedPkl.has_changed === true &&\n        retrievedPkl.pkl_content.length > 0\n      ) {\n        let current_jobs = {};\n        let jobs = {};\n        let colorChanges = {};\n        let shapeChanges = {};\n        let edgeUpdates = {};\n        let new_fakeEdges = {};\n        let changes = \"\";\n        let changesSummarized = \"\";\n        let pkl_packages = retrievedPkl[\"packages\"];\n        let current_packages = state.data[\"packages\"];\n\n        // Saving current state data into a dictionary\n        for (let k = 0, kjob; k < state.data.nodes.length; k++) {\n          kjob = state.data.nodes[k];\n          current_jobs[kjob.id] = kjob;\n        }\n        // Saving retrieved jobs into a dictionary\n        for (let j = 0, job; j < retrievedPkl.pkl_content.length; j++) {\n          job = retrievedPkl.pkl_content[j];\n          jobs[job.name] = job;\n        }\n\n        // Updating list of packages and adding to shape change\n        // Shape change currently not working\n        for (let pkl_package in pkl_packages) {\n          if (!Object.keys(current_packages).includes(pkl_package)) {\n            current_packages[pkl_package] = pkl_packages[pkl_package];\n            //console.log(pkl_packages[pkl_package]);\n            for (let index in pkl_packages[pkl_package]) {\n              let index_i = parseInt(index);\n              let job_name = pkl_packages[pkl_package][index_i];\n              //console.log(job_name);\n              shapeChanges[job_name] = \"hexagon\";\n              //console.log(index_i);\n              //console.log(pkl_packages[pkl_package].length);\n              let next = index_i + 1;\n              //console.log(next);\n              if (next < pkl_packages[pkl_package].length) {\n                //console.log(pkl_packages[pkl_package][index_i]);\n                //console.log(pkl_packages[pkl_package][next]);\n                if (\n                  current_jobs[pkl_packages[pkl_package][index_i]].level ===\n                  current_jobs[pkl_packages[pkl_package][next]].level\n                ) {\n                  new_fakeEdges[pkl_packages[pkl_package][index_i]] =\n                    pkl_packages[pkl_package][next];\n                }\n              }\n            }\n          }\n        }\n\n        let requireUpdate = false;\n        DEBUG && console.log(\"Current ts: \" + retrievedPkl.pkl_timestamp);\n\n        if (state.data.nodes) {\n          for (let i = 0; i < state.data.nodes.length; i++) {\n            // console.log(newNodes[i].id);\n            //console.log(state.data.nodes[i]);\n            // console.log(jobs[ newNodes[i].id ]);\n            let jobPkl = jobs[state.data.nodes[i].id];\n            if (\n              jobPkl &&\n              (state.data.nodes[i].status_code !== jobPkl.status_code ||\n                state.data.nodes[i].package !== jobPkl.package ||\n                state.data.nodes[i].minutes !== jobPkl.minutes ||\n                state.data.nodes[i].minutes_queue !== jobPkl.minutes_queue)\n            ) {\n              // changes += state.data.nodes[i].id + \" from \" + state.data.nodes[i].status + \" to \" + jobs[ state.data.nodes[i].id ].status + \" || \";\n              if (\n                state.data.nodes[i].status_code !==\n                jobs[state.data.nodes[i].id].status_code\n              ) {\n                changes +=\n                  timeStampToDate(retrievedPkl.pkl_timestamp) +\n                  \": \" +\n                  state.data.nodes[i].id +\n                  \" to \" +\n                  jobs[state.data.nodes[i].id].status +\n                  \"\\n\";\n                changesSummarized +=\n                  jobs[state.data.nodes[i].id].status +\n                  \" : \" +\n                  state.data.nodes[i].id +\n                  \"\\n\";\n              } else {\n                // Not decided.\n              }\n\n              if (\n                state.data.nodes[i].package !==\n                jobs[state.data.nodes[i].id].package\n              ) {\n                changes +=\n                  timeStampToDate(retrievedPkl.pkl_timestamp) +\n                  \": \" +\n                  state.data.nodes[i].id +\n                  \" added to \" +\n                  jobs[state.data.nodes[i].id].package +\n                  \"\\n\";\n                changesSummarized +=\n                  \"Wrapper \" +\n                  jobs[state.data.nodes[i].id].package +\n                  \" added.\\n\";\n                let current_job = current_jobs[state.data.nodes[i].id];\n                let children_current = current_job.children_list;\n                for (let child in children_current) {\n                  if (\n                    jobs[children_current[child]].package ===\n                    jobs[state.data.nodes[i].id].package\n                  ) {\n                    edgeUpdates[state.data.nodes[i].id] =\n                      children_current[child];\n                  }\n                }\n              }\n              // If status change, add to change colors. Set to new status color.\n              if (\n                state.data.nodes[i].status_code !==\n                jobs[state.data.nodes[i].id].status_code\n              ) {\n                colorChanges[state.data.nodes[i].id] =\n                  jobs[state.data.nodes[i].id].status_color;\n                state.data.nodes[i].status_code =\n                  jobs[state.data.nodes[i].id].status_code;\n                state.data.nodes[i].status_color =\n                  jobs[state.data.nodes[i].id].status_color;\n                state.data.nodes[i].status =\n                  jobs[state.data.nodes[i].id].status;\n              }\n\n              state.data.nodes[i].package =\n                jobs[state.data.nodes[i].id].package;\n              state.data.nodes[i].dashed = jobs[state.data.nodes[i].id].dashed;\n              state.data.nodes[i].shape = jobs[state.data.nodes[i].id].shape;\n              state.data.nodes[i].out = jobs[state.data.nodes[i].id].out;\n              state.data.nodes[i].err = jobs[state.data.nodes[i].id].err;\n              state.data.nodes[i].minutes =\n                jobs[state.data.nodes[i].id].minutes;\n              state.data.nodes[i].minutes_queue =\n                jobs[state.data.nodes[i].id].minutes_queue;\n              state.data.nodes[i].submit = jobs[state.data.nodes[i].id].submit;\n              state.data.nodes[i].start = jobs[state.data.nodes[i].id].start;\n              state.data.nodes[i].finish = jobs[state.data.nodes[i].id].finish;\n              state.data.nodes[i].rm_id = jobs[state.data.nodes[i].id].rm_id;\n              //console.log(state.data.nodes[i].status_color)\n\n              requireUpdate = true;\n            }\n          }\n\n          if (requireUpdate) {\n            DEBUG && console.log(\"New ts: \" + retrievedPkl.pkl_timestamp);\n            state.data.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            state.notificationTitleGraph = changesSummarized;\n            if (state.pklchanges) {\n              state.pklchanges = changes + state.pklchanges;\n            } else {\n              state.pklchanges = changes;\n            }\n\n            for (var key in colorChanges) {\n              //console.log( key, colorChanges[key] );\n              updateGraphColor(key, colorChanges[key], state);\n            }\n\n            for (var key_shape in shapeChanges) {\n              updateGraphShape(key_shape, shapeChanges[key_shape], state);\n              updateGraphBorder(key_shape, state);\n            }\n\n            for (var key_edge in edgeUpdates) {\n              updateEdgeStyle(key_edge + \"-\" + edgeUpdates[key_edge], state);\n            }\n\n            for (var key_added in new_fakeEdges) {\n              addFakeEdge(key_added, new_fakeEdges[key_added], state);\n            }\n          } else {\n            DEBUG && console.log(\"No changes but updating pkl anyway.\");\n          }\n        }\n      }\n      return {\n        ...state,\n        pkldata: retrievedPkl,\n        loadingPkl: false,\n        loadingJobMonitor: false,\n      };\n    case NAVIGATE_AFTER_LOADING_GRAPH:\n      const running = action.payload;\n      if (state.visNetwork) {\n        var found = false;\n        const cScale = 0.5;\n        if (running === true) {\n          //console.log(\"Search Running\")\n          found = navToLatest(\n            RunningCode,\n            true,\n            cScale,\n            state.visNetwork,\n            state.data,\n            state\n          );\n          if (!found) {\n            found = navToLatest(\n              QueueCode,\n              true,\n              cScale,\n              state.visNetwork,\n              state.data,\n              state\n            );\n            if (!found) {\n              found = navToLatest(\n                SubmittedCode,\n                true,\n                cScale,\n                state.visNetwork,\n                state.data,\n                state\n              );\n              if (!found) {\n                found = navToLatest(\n                  CompletedCode,\n                  true,\n                  cScale,\n                  state.visNetwork,\n                  state.data,\n                  state\n                );\n              }\n            }\n          }\n        } else {\n          found = navToLatest(\n            FailedCode,\n            true,\n            cScale,\n            state.visNetwork,\n            state.data,\n            state\n          );\n          if (!found) {\n            found = navToLatest(\n              CompletedCode,\n              true,\n              cScale,\n              state.visNetwork,\n              state.data,\n              state\n            );\n          }\n        }\n        if (!found) {\n          navToLatest(\n            WaitingCode,\n            false,\n            cScale,\n            state.visNetwork,\n            state.data,\n            state\n          );\n        }\n      }\n      return {\n        ...state,\n      };\n    case NAVIGATE_GRAPH_TO:\n      const Id = action.payload;\n      if (state.visNetwork) {\n        const position = findIdinGraph(Id, state);\n        //const currentPosition = state.visNetwork.getPositions([Id]);\n        if (position.x && position.y) {\n          navigateGraph(Id, position.x, position.y, 0.9, state.visNetwork);\n          //state.visNetwork.selectNodes([Id]);\n          state.selection = [Id];\n        }\n      }\n      return {\n        ...state,\n      };\n    case NAVIGATE_TO_GROUP_GRAPH:\n      const IdList = action.payload;\n      if (state.visNetwork) {\n        state.visNetwork.unselectAll();\n        const currentLength = IdList.length;\n        const Id = IdList[parseInt(Math.floor(IdList.length / 2))];\n        const rescale = Math.sqrt(currentLength) * 0.065;\n        var currentPosition = state.visNetwork.getPositions(Id);\n        if (currentPosition[Id]) {\n          navigateGraph(\n            null,\n            currentPosition[Id].x,\n            currentPosition[Id].y,\n            0.6 - rescale,\n            state.visNetwork\n          );\n          state.visNetwork.selectNodes(IdList);\n        }\n      }\n      return {\n        ...state,\n      };\n    case NAVIGATE_TO_LATEST:\n      const { status, latest } = action.payload;\n      navToLatest(status, latest, 0.9, state.visNetwork, state.data, state);\n      return {\n        ...state,\n      };\n    case SET_LOADING_GRAPH:\n      return {\n        ...state,\n        loadingGraph: true,\n        enabledGraphSearch: false,\n      };\n    case SET_OFF_LOADING_GRAPH:\n      return {\n        ...state,\n        loadingGraph: false,\n        enabledGraphSearch: true,\n      };\n    case SET_VIS_DATA:\n      return {\n        ...state,\n        visNodes: action.payload,\n      };\n    case SET_VIS_NETWORK:\n      return {\n        ...state,\n        visNetwork: action.payload,\n      };\n    case SET_FOUND_NODES:\n      const string = action.payload;\n      if (state.data && state.data.nodes) {\n        const foundNodes = state.data.nodes.filter(\n          (node) => node.id.toUpperCase().indexOf(string) >= 0\n        );\n\n        if (foundNodes && foundNodes.length > 0) {\n          state.foundNodes = foundNodes;\n          const position = findIdinGraph(foundNodes[0].id, state);\n          if (position.x && position.y) {\n            navigateGraph(\n              foundNodes[0].id,\n              position.x,\n              position.y,\n              0.9,\n              state.visNetwork\n            );\n            state.selection = [foundNodes[0].id];\n          }\n        } else {\n          state.foundNodes = null;\n        }\n      }\n      return {\n        ...state,\n        loadingSearchJob: false,\n        //foundNodes: action.payload,\n      };\n    case SET_PKL_CHANGES:\n      return {\n        ...state,\n        pklchanges: action.payload,\n      };\n    case SET_LOADING_SEARCH_JOB:\n      return {\n        ...state,\n        loadingSearchJob: true,\n      };\n    case SET_LOADING_JOB_MONITOR:\n      return {\n        ...state,\n        loadingJobMonitor: true,\n      };\n    case SET_LOADING_PKL:\n      return {\n        ...state,\n        loadingPkl: true,\n      };\n    case SET_AUTOUPDATE_PKL:\n      return {\n        ...state,\n        startAutoUpdatePkl: action.payload,\n      };\n    case UPDATE_NODES:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case CLEAN_ONLY_GRAH_DATA:\n      return {\n        ...state,\n        data: null,\n        selection: null,\n        enabledGraphSearch: true,\n        visNodes: null,\n        visNetwork: null,\n        foundNodes: null,\n        current_grouped: \"none\",\n        current_layout: \"standard\",\n        graphSelectedNodes: null,\n      };\n    case SHOULD_UPDATE_GRAPH:\n      return {\n        ...state,\n        shouldUpdateGraph: action.payload,\n      };\n    case CLEAN_GRAPH_DATA:\n      return {\n        ...state,\n        data: null,\n        selection: null,\n        enabledGraphSearch: true,\n        loadingGraph: false,\n        loadingPkl: false,\n        visNodes: null,\n        visNetwork: null,\n        foundNodes: null,\n        experimentRunning: false,\n        experiment: null,\n        current_grouped: \"none\",\n        current_layout: \"standard\",\n        //allowJobMonitor: false,\n        performancedata: null,\n        canSelect: false,\n        currentSelected: [],\n        currentCommand: null,\n        graphSelectedNodes: null,\n        //startAutoUpdatePkl: false,\n      };\n    case CLEAN_PKL_DATA:\n      return {\n        ...state,\n        shouldUpdateGraph: false,\n        startAutoUpdatePkl: false,\n        pklchanges: null,\n      };\n    case CLEAN_NAV_DATA:\n      return {\n        ...state,\n        foundNodes: null,\n        startAutoUpdatePkl: false,\n        selection: null,\n      };\n    case UPDATE_SELECTION:\n      return {\n        ...state,\n        selection: action.payload,\n      };\n    case UPDATE_GRAPH_SELECTED_NODES:\n      //const selectedNodes = action.payload;\n      state.graphSelectedNodes = null;\n      state.currentCommandGraph = null;\n      if (state.selection) {\n        const currentSelectedNodes = state.visNetwork.getSelectedNodes();\n        DEBUG && console.log(currentSelectedNodes);\n        state.graphSelectedNodes = currentSelectedNodes;\n      }\n      return {\n        ...state,\n      };\n    case SET_CURRENT_COMMAND:\n      return {\n        ...state,\n        currentCommandGraph: action.payload,\n        canCopyToClipboard: true,\n      };\n    case SET_NOTIFICATION_TITLE_GRAPH:\n      return {\n        ...state,\n        notificationTitleGraph: action.payload,\n      };\n    // case DEACTIVATE_COPY_TO:\n    //   return {\n    //     ...state,\n    //     canCopyToClipboard: false,\n    //   };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}