{"ast":null,"code":"import React,{useEffect,useContext}from\"react\";import TreeContext from\"../context/tree/treeContext\";import LighterContext from\"../context/lighter/lighterContext\";import ExperimentContext from\"../context/experiment/experimentContext\";import{maxReponseTimeThreshold}from\"../context/vars\";var LoadingCounter=function LoadingCounter(_ref){var loadsource=_ref.loadsource;//const { source_load } = source;\n//console.log(loadsource);\nvar treeContext=useContext(TreeContext);var lighterContext=useContext(LighterContext);var experimentContext=useContext(ExperimentContext);var expectedLoadingTreeTime=experimentContext.expectedLoadingTreeTime,expectedLoadingQuickView=experimentContext.expectedLoadingQuickView;var increaseElapsedLoadingTree=treeContext.increaseElapsedLoadingTree,elapsedLoadingTree=treeContext.elapsedLoadingTree;var increaseElapsedLoadingQuickView=lighterContext.increaseElapsedLoadingQuickView,elapsedLoadingQuickView=lighterContext.elapsedLoadingQuickView;var increaseFunction=loadsource===\"tree\"?increaseElapsedLoadingTree:increaseElapsedLoadingQuickView;var elapsedTime=loadsource===\"tree\"?elapsedLoadingTree:elapsedLoadingQuickView;var approximatedTime=loadsource===\"tree\"?expectedLoadingTreeTime:expectedLoadingQuickView;//const { expectedLoadingTreeTime } = experimentContext;\nvar fetchMessage=loadsource===\"tree\"?\"Fetching this tree view will take about \"+approximatedTime+\" seconds.\":\"Loading this not-so-quick view will take about \"+approximatedTime+\" seconds.\";useEffect(function(){var interval=setInterval(function(){increaseFunction();},1000);return function(){return clearInterval(interval);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"pb-4 text-center\"},approximatedTime>maxReponseTimeThreshold&&/*#__PURE__*/React.createElement(\"p\",null,\"This experiment might be too heavy to fetch in due time. If an error message is prompted, try the \",/*#__PURE__*/React.createElement(\"b\",null,\"Quick View\"),\".\"),/*#__PURE__*/React.createElement(\"p\",null,fetchMessage),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",style:{width:approximatedTime>0&&elapsedTime<=approximatedTime?elapsedTime/approximatedTime*100+\"%\":\"100%\"},\"aria-valuenow\":elapsedTime,\"aria-valuemin\":\"0\",\"aria-valuemax\":approximatedTime},elapsedTime)))));};export default LoadingCounter;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/layout/LoadingCounter.js"],"names":["React","useEffect","useContext","TreeContext","LighterContext","ExperimentContext","maxReponseTimeThreshold","LoadingCounter","loadsource","treeContext","lighterContext","experimentContext","expectedLoadingTreeTime","expectedLoadingQuickView","increaseElapsedLoadingTree","elapsedLoadingTree","increaseElapsedLoadingQuickView","elapsedLoadingQuickView","increaseFunction","elapsedTime","approximatedTime","fetchMessage","interval","setInterval","clearInterval","width"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,UAA3B,KAA6C,OAA7C,CACA,MAAOC,CAAAA,WAAP,KAAwB,6BAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,mCAA3B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,yCAA9B,CACA,OAASC,uBAAT,KAAwC,iBAAxC,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAoB,IAAjBC,CAAAA,UAAiB,MAAjBA,UAAiB,CACzC;AACA;AACA,GAAMC,CAAAA,WAAW,CAAGP,UAAU,CAACC,WAAD,CAA9B,CACA,GAAMO,CAAAA,cAAc,CAAGR,UAAU,CAACE,cAAD,CAAjC,CACA,GAAMO,CAAAA,iBAAiB,CAAGT,UAAU,CAACG,iBAAD,CAApC,CALyC,GAOvCO,CAAAA,uBAPuC,CASrCD,iBATqC,CAOvCC,uBAPuC,CAQvCC,wBARuC,CASrCF,iBATqC,CAQvCE,wBARuC,IAUjCC,CAAAA,0BAViC,CAUkBL,WAVlB,CAUjCK,0BAViC,CAULC,kBAVK,CAUkBN,WAVlB,CAULM,kBAVK,IAYvCC,CAAAA,+BAZuC,CAcrCN,cAdqC,CAYvCM,+BAZuC,CAavCC,uBAbuC,CAcrCP,cAdqC,CAavCO,uBAbuC,CAgBzC,GAAMC,CAAAA,gBAAgB,CACpBV,UAAU,GAAK,MAAf,CACIM,0BADJ,CAEIE,+BAHN,CAIA,GAAMG,CAAAA,WAAW,CACfX,UAAU,GAAK,MAAf,CAAwBO,kBAAxB,CAA6CE,uBAD/C,CAEA,GAAMG,CAAAA,gBAAgB,CACpBZ,UAAU,GAAK,MAAf,CAAwBI,uBAAxB,CAAkDC,wBADpD,CAEA;AACA,GAAMQ,CAAAA,YAAY,CAChBb,UAAU,GAAK,MAAf,CACI,2CACAY,gBADA,CAEA,WAHJ,CAII,kDACAA,gBADA,CAEA,WAPN,CASAnB,SAAS,CAAC,UAAM,CACd,GAAMqB,CAAAA,QAAQ,CAAGC,WAAW,CAAC,UAAM,CACjCL,gBAAgB,GACjB,CAF2B,CAEzB,IAFyB,CAA5B,CAGA,MAAO,kBAAMM,CAAAA,aAAa,CAACF,QAAD,CAAnB,EAAP,CACA;AACD,CANQ,CAMN,EANM,CAAT,CAQA,mBACE,2BAAK,SAAS,CAAC,kBAAf,EACGF,gBAAgB,CAAGd,uBAAnB,eACC,+IAE+B,0CAF/B,KAFJ,cAOE,6BAAIe,YAAJ,CAPF,cAQE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,UAAf,eACE,2BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,aAFP,CAGE,KAAK,CAAE,CACLI,KAAK,CACHL,gBAAgB,CAAG,CAAnB,EAAwBD,WAAW,EAAIC,gBAAvC,CACKD,WAAW,CAAGC,gBAAf,CAAmC,GAAnC,CAAyC,GAD7C,CAEI,MAJD,CAHT,CASE,gBAAeD,WATjB,CAUE,gBAAc,GAVhB,CAWE,gBAAeC,gBAXjB,EAaGD,WAbH,CADF,CADF,CADF,CARF,CADF,CAgCD,CA1ED,CA4EA,cAAeZ,CAAAA,cAAf","sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport TreeContext from \"../context/tree/treeContext\";\nimport LighterContext from \"../context/lighter/lighterContext\";\nimport ExperimentContext from \"../context/experiment/experimentContext\";\nimport { maxReponseTimeThreshold } from \"../context/vars\";\n\nconst LoadingCounter = ({ loadsource }) => {\n  //const { source_load } = source;\n  //console.log(loadsource);\n  const treeContext = useContext(TreeContext);\n  const lighterContext = useContext(LighterContext);\n  const experimentContext = useContext(ExperimentContext);\n  const {\n    expectedLoadingTreeTime,\n    expectedLoadingQuickView,\n  } = experimentContext;\n  const { increaseElapsedLoadingTree, elapsedLoadingTree } = treeContext;\n  const {\n    increaseElapsedLoadingQuickView,\n    elapsedLoadingQuickView,\n  } = lighterContext;\n\n  const increaseFunction =\n    loadsource === \"tree\"\n      ? increaseElapsedLoadingTree\n      : increaseElapsedLoadingQuickView;\n  const elapsedTime =\n    loadsource === \"tree\" ? elapsedLoadingTree : elapsedLoadingQuickView;\n  const approximatedTime =\n    loadsource === \"tree\" ? expectedLoadingTreeTime : expectedLoadingQuickView;\n  //const { expectedLoadingTreeTime } = experimentContext;\n  const fetchMessage =\n    loadsource === \"tree\"\n      ? \"Fetching this tree view will take about \" +\n        approximatedTime +\n        \" seconds.\"\n      : \"Loading this not-so-quick view will take about \" +\n        approximatedTime +\n        \" seconds.\";\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      increaseFunction();\n    }, 1000);\n    return () => clearInterval(interval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className='pb-4 text-center'>\n      {approximatedTime > maxReponseTimeThreshold && (\n        <p>\n          This experiment might be too heavy to fetch in due time. If an error\n          message is prompted, try the <b>Quick View</b>.\n        </p>\n      )}\n      <p>{fetchMessage}</p>\n      <div className='row'>\n        <div className='col'>\n          <div className='progress'>\n            <div\n              className='progress-bar'\n              role='progressbar'\n              style={{\n                width:\n                  approximatedTime > 0 && elapsedTime <= approximatedTime\n                    ? (elapsedTime / approximatedTime) * 100 + \"%\"\n                    : \"100%\",\n              }}\n              aria-valuenow={elapsedTime}\n              aria-valuemin='0'\n              aria-valuemax={approximatedTime}\n            >\n              {elapsedTime}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingCounter;\n"]},"metadata":{},"sourceType":"module"}