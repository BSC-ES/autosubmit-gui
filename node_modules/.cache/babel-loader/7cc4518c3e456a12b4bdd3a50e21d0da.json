{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/statistics/StatsSearch.js\";\nimport React, { useState, useContext } from 'react';\nimport StatsContext from '../context/statistics/statsContext';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport Chart from 'react-google-charts';\nimport Spinner from '../layout/Spinner';\n\nconst StatsSearch = () => {\n  const statsContext = useContext(StatsContext);\n  const experimentContext = useContext(ExperimentContext);\n  const getExperimentStats = statsContext.getExperimentStats,\n        statdata = statsContext.statdata,\n        loading = statsContext.loading,\n        clearStats = statsContext.clearStats,\n        isError = statsContext.isError,\n        errorMessage = statsContext.errorMessage,\n        totaldata = statsContext.totaldata,\n        ticksdata = statsContext.ticksdata;\n  const experiment = experimentContext.experiment; // const data = [\n  //     [\"Year\", \"Visitations\", \"Crashes\", { role: \"style\" }],\n  //     [\"2010\", 10, 30, \"color: gray\"],\n  //     [\"2020\", 14, 25, \"color: #76A7FA\"],\n  //     [\"2030\", 16, 24, \"color: blue\"],\n  //     [\"2040\", 22, 32, \"stroke-color: #703593; stroke-width: 4; fill-color: #C5A5CF\"],\n  //     [\n  //       \"2050\",\n  //       28,\n  //       23,\n  //       \"stroke-color: #871B47; stroke-opacity: 0.6; stroke-width: 8; fill-color: #BC5679; fill-opacity: 0.2\"\n  //     ]\n  // ];\n  // const jsonTicks = JSON.stringify({ticksdata});\n  // console.log(jsonTicks['ticksdata'])\n\n  const options = {\n    chartArea: {\n      width: '90%',\n      height: '700px'\n    },\n    hAxis: {\n      title: 'Jobs',\n      ticks: ticksdata //ticks: [{v:1, f:'job_1-2323'}, {v:2, f:'job_other'}],\n\n    },\n    vAxis: {\n      title: 'Hours'\n    },\n    legend: {\n      position: 'top'\n    },\n    explorer: {\n      actions: [\"dragToZoom\", \"rightClickToReset\"],\n      axis: 'horizontal' // maxZoomIn: 4.0,\n\n    } // console.log(options);\n\n  };\n  var summary = null;\n\n  if (totaldata && totaldata.stats && totaldata.stats.totals) {\n    summary = totaldata.stats.totals.map((item, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, item)); // console.log(totaldata.stats.totals[0]);\n    // for(var i = 0; i < totaldata.stats.totals.length; i++){\n    //     console.log(totaldata.stats.totals[i]);\n    //     summary += <li key={i}>{totaldata.stats.totals[i]}</li>\n    // }\n  }\n\n  const onSubmitStats = e => {\n    e.preventDefault();\n    console.log(experiment.expid);\n    console.log(\"Hours : \" + hour);\n    console.log(\"Type : \" + section);\n    getExperimentStats(experiment.expid, hour, section);\n  };\n\n  const onSubmitClear = e => {\n    e.preventDefault();\n    setHour('');\n    setSection('');\n    clearStats();\n  };\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        hour = _useState2[0],\n        setHour = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        section = _useState4[0],\n        setSection = _useState4[1];\n\n  const onChangeHour = e => setHour(e.target.value);\n\n  const onChangeSection = e => setSection(e.target.value);\n\n  const pStyle = {\n    'listStyleType': 'none'\n  };\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-4 offset-md-4 text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, !statdata && experiment && experimentContext.loading === false && React.createElement(\"form\", {\n    onSubmit: onSubmitStats,\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group input-group-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    name: \"section\",\n    placeholder: \"Section\",\n    onChange: onChangeSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    name: \"hours\",\n    placeholder: \"Hours\",\n    onChange: onChangeHour,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Get Statistics\",\n    className: \"btn btn-info\",\n    disabled: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })))), statdata && React.createElement(\"form\", {\n    onSubmit: onSubmitClear,\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Clear Statistics\",\n    className: \"btn btn-dark btn-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, !statdata && experiment && React.createElement(\"div\", {\n    className: \"col-md-12 p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Supply a Section (Type) in the appropriate textbox to filter the jobs that will be included in the query. Also, you can also supply the Hours value that determines how many hours before the current time you want to query. Leave both empty and a query for Any Section since the date of creation of the experiment will be executed.\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Press \", React.createElement(\"span\", {\n    className: \"badge badge-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Get Statistics\"), \" to generate the statistics, this will generate a Bar Chart and some extra statistics below. Drag the mouse inside the chart to zoom in; however, zoom in capabilities are not unlimited, so try to narrow your query.\")), loading && React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), statdata && !isError && React.createElement(Chart, {\n    chartType: \"ColumnChart\",\n    loader: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Loading Chart\"),\n    width: '100%',\n    height: '700px',\n    data: statdata,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), statdata && isError && React.createElement(\"div\", {\n    className: \"col-md-12 text-center p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, errorMessage), totaldata && React.createElement(\"div\", {\n    className: \"col-md-8 offset-md-4 mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, totaldata && React.createElement(\"ul\", {\n    style: pStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, summary && summary))));\n};\n\nexport default StatsSearch;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/statistics/StatsSearch.js"],"names":["React","useState","useContext","StatsContext","ExperimentContext","Chart","Spinner","StatsSearch","statsContext","experimentContext","getExperimentStats","statdata","loading","clearStats","isError","errorMessage","totaldata","ticksdata","experiment","options","chartArea","width","height","hAxis","title","ticks","vAxis","legend","position","explorer","actions","axis","summary","stats","totals","map","item","index","onSubmitStats","e","preventDefault","console","log","expid","hour","section","onSubmitClear","setHour","setSection","onChangeHour","target","value","onChangeSection","pStyle"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport StatsContext from '../context/statistics/statsContext';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport Chart from 'react-google-charts';\nimport Spinner from '../layout/Spinner';\n\nconst StatsSearch = () => {\n    const statsContext = useContext(StatsContext); \n    const experimentContext = useContext(ExperimentContext);\n    \n    const { getExperimentStats, \n            statdata,             \n            loading, \n            clearStats, \n            isError, \n            errorMessage,\n            totaldata,\n            ticksdata, } = statsContext;\n    const { experiment } = experimentContext;\n\n    // const data = [\n    //     [\"Year\", \"Visitations\", \"Crashes\", { role: \"style\" }],\n    //     [\"2010\", 10, 30, \"color: gray\"],\n    //     [\"2020\", 14, 25, \"color: #76A7FA\"],\n    //     [\"2030\", 16, 24, \"color: blue\"],\n    //     [\"2040\", 22, 32, \"stroke-color: #703593; stroke-width: 4; fill-color: #C5A5CF\"],\n    //     [\n    //       \"2050\",\n    //       28,\n    //       23,\n    //       \"stroke-color: #871B47; stroke-opacity: 0.6; stroke-width: 8; fill-color: #BC5679; fill-opacity: 0.2\"\n    //     ]\n    // ];\n\n    // const jsonTicks = JSON.stringify({ticksdata});\n    // console.log(jsonTicks['ticksdata'])\n    const options = {   \n        chartArea: { width: '90%',\n                    height: '700px'},\n        hAxis: {\n            title: 'Jobs',\n            ticks: ticksdata, //ticks: [{v:1, f:'job_1-2323'}, {v:2, f:'job_other'}],\n        },\n        vAxis: {\n            title: 'Hours',\n            \n        }, \n        legend: {\n            position: 'top',\n        },\n        explorer: {\n            actions: [\"dragToZoom\", \"rightClickToReset\"],\n            axis: 'horizontal',\n            // maxZoomIn: 4.0,\n        },\n    }\n\n    // console.log(options);\n    \n    var summary = null;\n    if (totaldata && totaldata.stats && totaldata.stats.totals) {\n        summary = totaldata.stats.totals.map((item, index) =>\n            <li key={index}>\n                {item}\n            </li>\n        );\n        // console.log(totaldata.stats.totals[0]);\n        // for(var i = 0; i < totaldata.stats.totals.length; i++){\n        //     console.log(totaldata.stats.totals[i]);\n        //     summary += <li key={i}>{totaldata.stats.totals[i]}</li>\n        // }\n    }\n    \n    const onSubmitStats = e => {\n        e.preventDefault();    \n        console.log(experiment.expid);\n        console.log(\"Hours : \" + hour);\n        console.log(\"Type : \" + section);\n        getExperimentStats(experiment.expid, hour, section)\n    }\n\n    const onSubmitClear = e => {\n        e.preventDefault();\n        setHour('');\n        setSection('');\n        clearStats();\n\n    }\n    \n    const [hour, setHour] = useState('');\n    const [section, setSection] = useState('');\n    const onChangeHour = e => setHour(e.target.value);\n    const onChangeSection = e => setSection(e.target.value);\n    const pStyle = {\n        'listStyleType': 'none',\n    };\n    \n\n    return (\n        <div className='row'>\n            <div className='col-md-4 offset-md-4 text-center'>\n                {!statdata && experiment && experimentContext.loading === false &&\n                    <form onSubmit={onSubmitStats} className='form'>\n                        <div className=\"input-group input-group-sm\">                      \n                            <input\n                                className=\"form-control\"\n                                type='text'\n                                name='section'\n                                placeholder='Section'                          \n                                onChange={onChangeSection}\n                            />\n                            <input\n                                className=\"form-control\"\n                                type='text'\n                                name='hours'\n                                placeholder='Hours'                          \n                                onChange={onChangeHour}\n                            />                    \n                            <div className=\"input-group-append\">\n                                <input          \n                                type='submit'\n                                value='Get Statistics'\n                                className='btn btn-info'\n                                disabled={loading}\n                                />\n                            </div>                    \n                        </div>\n                    </form>\n                }                \n                {statdata &&\n                    <form onSubmit={onSubmitClear} className='form'> \n                        <div className=\"\">\n                            <input          \n                            type='submit'\n                            value='Clear Statistics'\n                            className='btn btn-dark btn-sm'\n                            />\n                        </div>        \n                    </form>\n                }   \n            </div>\n            <div className=\"col-md-12\">\n                {!statdata && experiment && \n                    <div className=\"col-md-12 p-3\">\n                        <p className=\"lead\">Supply a Section (Type) in the appropriate textbox to filter the jobs that will be included in the query. Also, you can also supply the Hours value that determines how many hours before the current time you want to query. Leave both empty and a query for Any Section since the date of creation of the experiment will be executed.</p>\n                        <p className=\"lead\">Press <span className=\"badge badge-info\">Get Statistics</span> to generate the statistics, this will generate a Bar Chart and some extra statistics below. Drag the mouse inside the chart to zoom in; however, zoom in capabilities are not unlimited, so try to narrow your query.</p>\n                    </div>\n                }\n                {loading && <Spinner />}\n                {statdata && !isError &&\n                    <Chart\n                    chartType=\"ColumnChart\"\n                    loader={<div>Loading Chart</div>}\n                    width={'100%'}\n                    height={'700px'}\n                    data={statdata}\n                    options={options}\n                    /> \n                }\n                {statdata && isError &&\n                    <div className=\"col-md-12 text-center p-3\">\n                        {errorMessage}\n                    </div>\n                }\n                {totaldata &&\n                    <div className=\"col-md-8 offset-md-4 mt-2\">\n                        {totaldata && \n                            <ul style={pStyle}>\n                                {summary && \n                                summary}\n                            </ul>                            \n                        }\n                    </div>    \n                }\n            </div>\n        </div>\n        \n    )\n}\n\nexport default StatsSearch;\n"]},"metadata":{},"sourceType":"module"}