{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/context/experiment/ExperimentState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ExperimentContext from './experimentContext';\nimport ExperimentReducer from './experimentReducer';\nimport { SEARCH_EXPERIMENTS, SET_LOADING, CLEAR_EXPERIMENTS, GET_EXPERIMENT, GET_GRAPH, SET_LOADING_GRAPH, CLEAN_GRAPH_DATA, UPDATE_SELECTION, GET_EXPERIMENT_RUN, SET_LOADING_RUN, CLEAN_RUN_DATA, SET_AUTOUPDATE_RUN, GET_PKL_DATA, SET_LOADING_PKL, UPDATE_NODES, SHOULD_UPDATE_GRAPH, SET_AUTOUPDATE_PKL, CLEAN_PKL_DATA, SET_PKL_CHANGES, UPDATE_EXPERIMENT_TS } from '../types';\n\nconst ExperimentState = props => {\n  const initialState = {\n    experiments: [],\n    experiment: {},\n    loading: false,\n    data: null,\n    rundata: null,\n    pkldata: null,\n    pklchanges: null,\n    loadingGraph: false,\n    loadingRun: false,\n    loadingPkl: false,\n    selection: null,\n    enabledGraphSearch: true,\n    startAutoUpdateRun: false,\n    startAutoUpdatePkl: false,\n    shouldUpdateGraph: false\n  };\n\n  const _useReducer = useReducer(ExperimentReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Search Experiments\n\n\n  const searchExperiments = async text => {\n    setLoading();\n    const res = await axios.get(\"http://84.88.185.30:8888/search/\".concat(text));\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: res.data.experiment\n    });\n  }; // Get Experiment\n\n\n  const getExperiment = async expid => {\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(\"http://84.88.185.30:8888/expinfo/\".concat(expid));\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: res.data\n    });\n  }; // Get Experiment Graph\n\n\n  const getExperimentGraph = async expid => {\n    setLoadingGraph();\n    const res = await axios.get(\"http://84.88.185.30:8888/graph/\".concat(expid));\n    console.log(res.data);\n    dispatch({\n      type: GET_GRAPH,\n      payload: res.data\n    }); //this.setState({ data: res.data, loading: false, showGraph: !res.data.error });\n  }; // Get Experiment Run\n\n\n  const getExperimentRun = async expid => {\n    setLoadingRun();\n    const res = await axios.get(\"http://84.88.185.30:8888/exprun/\".concat(expid));\n    console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: res.data\n    });\n  }; // Get Experiment Pkl Data\n\n\n  const getExperimentPkl = async (expid, timeStamp) => {\n    setLoadingPkl(); //timeStamp = 1000;\n\n    const res = await axios.get(\"http://84.88.185.30:8888/pklinfo/\".concat(expid, \"/\").concat(timeStamp));\n    console.log(res.data); // const actualPkl = res.data;\n\n    let retrievedPkl = null;\n    var jobs = {};\n    var changes = \"\";\n    retrievedPkl = res.data;\n\n    if (state.data !== null && retrievedPkl.has_changed === true) {\n      //console.log(retrievedPkl.pkl_content.length);\n      for (var j = 0, job; j < retrievedPkl.pkl_content.length; j++) {\n        job = retrievedPkl.pkl_content[j]; //console.log(job);\n\n        jobs[job.name] = job; //console.log(jobs[job.name]);\n      }\n\n      let requireUpdate = false;\n      console.log('Current ts: ' + state.data.pkl_timestamp);\n      var newData = state.data; //console.log(newData.nodes);\n\n      var expData = state.experiment;\n\n      if (newData.nodes) {\n        for (var i = 0; i < newData.nodes.length; i++) {\n          // console.log(newNodes[i].id);\n          //console.log(newData.nodes[i]);\n          // console.log(jobs[ newNodes[i].id ]);\n          if (newData.nodes[i].status_code !== jobs[newData.nodes[i].id].status_code) {\n            changes += newData.nodes[i].id + \" from \" + newData.nodes[i].status + \" to \" + jobs[newData.nodes[i].id].status + \" || \";\n            newData.nodes[i].status_code = jobs[newData.nodes[i].id].status_code;\n            newData.nodes[i].status_color = jobs[newData.nodes[i].id].status_color;\n            newData.nodes[i].status = jobs[newData.nodes[i].id].status; //console.log(newData.nodes[i].status_color)\n\n            requireUpdate = true;\n          }\n        }\n\n        if (requireUpdate) {\n          // console.log(newData.pkl_timestamp);\n          // console.log(expData.pkl_timestamp);\n          console.log(\"New ts: \" + retrievedPkl.pkl_timestamp);\n          newData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n          expData.pkl_timestamp = retrievedPkl.pkl_timestamp; // console.log(newData.pkl_timestamp);\n          // console.log(expData.pkl_timestamp);\n          // console.log('Call Update');\n\n          updateNodes(newData);\n          updateExperimentTimeStamp(expData);\n          setUpdateGraph(true);\n          setUpdateGraph(false);\n          setPklChanges(changes);\n        }\n      }\n    } // } else {\n    //   var t = new Date( retrievedPkl.pkl_timestamp );\n    //   var formatted = t.toISOString();\n    //   setPklChanges(\"No news yet... \" + formatted)\n    // }\n\n\n    dispatch({\n      type: GET_PKL_DATA,\n      payload: res.data\n    });\n  }; // Cleaning\n\n\n  const clearExperiments = () => dispatch({\n    type: CLEAR_EXPERIMENTS\n  });\n\n  const cleanGraphData = () => dispatch({\n    type: CLEAN_GRAPH_DATA\n  });\n\n  const cleanRunData = () => dispatch({\n    type: CLEAN_RUN_DATA\n  });\n\n  const cleanPklData = () => dispatch({\n    type: CLEAN_PKL_DATA\n  }); // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setLoadingGraph = () => dispatch({\n    type: SET_LOADING_GRAPH\n  });\n\n  const setLoadingRun = () => dispatch({\n    type: SET_LOADING_RUN\n  });\n\n  const setLoadingPkl = () => dispatch({\n    type: SET_LOADING_PKL\n  }); // Action Things\n\n\n  const updateSelection = currentSelection => dispatch({\n    type: UPDATE_SELECTION,\n    payload: currentSelection\n  });\n\n  const updateNodes = newdata => dispatch({\n    type: UPDATE_NODES,\n    payload: newdata\n  });\n\n  const updateExperimentTimeStamp = newExperiment => dispatch({\n    type: UPDATE_EXPERIMENT_TS,\n    payload: newExperiment\n  });\n\n  const setAutoUpdateRun = value => dispatch({\n    type: SET_AUTOUPDATE_RUN,\n    payload: value\n  });\n\n  const setAutoUpdatePkl = () => dispatch({\n    type: SET_AUTOUPDATE_PKL\n  });\n\n  const setUpdateGraph = value => dispatch({\n    type: SHOULD_UPDATE_GRAPH,\n    payload: value\n  });\n\n  const setPklChanges = value => dispatch({\n    type: SET_PKL_CHANGES,\n    payload: value\n  }); // Other Utils\n\n\n  const hashCode = value => {\n    var hash = 0,\n        i,\n        chr;\n    if (value.length === 0) return hash;\n\n    for (i = 0; i < value.length; i++) {\n      chr = value.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    console.log(hash);\n    return hash;\n  };\n\n  const timeStampToDate = value => {\n    let formattedDate = \"\";\n    var date = new Date(value * 1000);\n    var hours = date.getHours();\n    var minutes = \"0\" + date.getMinutes();\n    var seconds = \"0\" + date.getSeconds();\n    formattedDate = str(hours) + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    return formattedDate;\n  };\n\n  return React.createElement(ExperimentContext.Provider, {\n    value: {\n      experiments: state.experiments,\n      experiment: state.experiment,\n      loading: state.loading,\n      loadingGraph: state.loadingGraph,\n      loadingRun: state.loadingRun,\n      loadingPkl: state.loadingPkl,\n      data: state.data,\n      rundata: state.rundata,\n      pklchanges: state.pklchanges,\n      selection: state.selection,\n      enabledGraphSearch: state.enabledGraphSearch,\n      startAutoUpdateRun: state.startAutoUpdateRun,\n      startAutoUpdatePkl: state.startAutoUpdatePkl,\n      shouldUpdateGraph: state.shouldUpdateGraph,\n      setAutoUpdateRun,\n      setAutoUpdatePkl,\n      searchExperiments,\n      clearExperiments,\n      getExperiment,\n      getExperimentGraph,\n      cleanGraphData,\n      cleanRunData,\n      cleanPklData,\n      setPklChanges,\n      updateSelection,\n      getExperimentRun,\n      getExperimentPkl,\n      hashCode,\n      timeStampToDate\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ExperimentState;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/context/experiment/ExperimentState.js"],"names":["React","useReducer","axios","ExperimentContext","ExperimentReducer","SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","GET_GRAPH","SET_LOADING_GRAPH","CLEAN_GRAPH_DATA","UPDATE_SELECTION","GET_EXPERIMENT_RUN","SET_LOADING_RUN","CLEAN_RUN_DATA","SET_AUTOUPDATE_RUN","GET_PKL_DATA","SET_LOADING_PKL","UPDATE_NODES","SHOULD_UPDATE_GRAPH","SET_AUTOUPDATE_PKL","CLEAN_PKL_DATA","SET_PKL_CHANGES","UPDATE_EXPERIMENT_TS","ExperimentState","props","initialState","experiments","experiment","loading","data","rundata","pkldata","pklchanges","loadingGraph","loadingRun","loadingPkl","selection","enabledGraphSearch","startAutoUpdateRun","startAutoUpdatePkl","shouldUpdateGraph","state","dispatch","searchExperiments","text","setLoading","res","get","type","payload","getExperiment","expid","getExperimentGraph","setLoadingGraph","console","log","getExperimentRun","setLoadingRun","getExperimentPkl","timeStamp","setLoadingPkl","retrievedPkl","jobs","changes","has_changed","j","job","pkl_content","length","name","requireUpdate","pkl_timestamp","newData","expData","nodes","i","status_code","id","status","status_color","updateNodes","updateExperimentTimeStamp","setUpdateGraph","setPklChanges","clearExperiments","cleanGraphData","cleanRunData","cleanPklData","updateSelection","currentSelection","newdata","newExperiment","setAutoUpdateRun","value","setAutoUpdatePkl","hashCode","hash","chr","charCodeAt","timeStampToDate","formattedDate","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","str","substr","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ExperimentContext from './experimentContext';\nimport ExperimentReducer from './experimentReducer';\nimport {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  GET_GRAPH,\n  SET_LOADING_GRAPH,\n  CLEAN_GRAPH_DATA,\n  UPDATE_SELECTION,\n  GET_EXPERIMENT_RUN,\n  SET_LOADING_RUN,\n  CLEAN_RUN_DATA,\n  SET_AUTOUPDATE_RUN,\n  GET_PKL_DATA,\n  SET_LOADING_PKL,\n  UPDATE_NODES,\n  SHOULD_UPDATE_GRAPH,\n  SET_AUTOUPDATE_PKL,\n  CLEAN_PKL_DATA,\n  SET_PKL_CHANGES,\n  UPDATE_EXPERIMENT_TS,\n} from '../types';\n\nconst ExperimentState = props => {\n    const initialState = {\n        experiments: [],\n        experiment: {},\n        loading: false,\n        data: null,\n        rundata: null,\n        pkldata: null,\n        pklchanges: null,\n        loadingGraph: false,\n        loadingRun: false,\n        loadingPkl: false,\n        selection: null,\n        enabledGraphSearch: true,  \n        startAutoUpdateRun: false,  \n        startAutoUpdatePkl: false,\n        shouldUpdateGraph: false,    \n    }\n\n    const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n\n    // Search Experiments\n    const searchExperiments = async text => {\n        setLoading();\n        const res = await axios.get(`http://84.88.185.30:8888/search/${text}`);\n        dispatch({\n            type: SEARCH_EXPERIMENTS,\n            payload: res.data.experiment,\n        });\n      };\n\n    // Get Experiment\n    const getExperiment = async expid => {\n        setLoading();\n        //cleanGraphData();\n        const res = await axios.get(`http://84.88.185.30:8888/expinfo/${expid}`);        \n        dispatch({\n            type: GET_EXPERIMENT,\n            payload: res.data,\n        });\n      };\n    \n    // Get Experiment Graph\n    const getExperimentGraph = async expid => {\n        setLoadingGraph();\n        \n        const res = await axios.get(`http://84.88.185.30:8888/graph/${expid}`);\n        console.log(res.data);\n        dispatch({\n            type: GET_GRAPH,\n            payload: res.data,\n        });\n        //this.setState({ data: res.data, loading: false, showGraph: !res.data.error });\n      };\n\n    // Get Experiment Run\n    const getExperimentRun = async expid => {\n        setLoadingRun();\n        const res = await axios.get(`http://84.88.185.30:8888/exprun/${expid}`);\n        console.log(res.data);\n        dispatch({\n            type: GET_EXPERIMENT_RUN,\n            payload: res.data,\n        });\n    }\n\n    // Get Experiment Pkl Data\n    const getExperimentPkl = async (expid, timeStamp) => {\n      setLoadingPkl();\n      //timeStamp = 1000;\n      const res = await axios.get(`http://84.88.185.30:8888/pklinfo/${expid}/${timeStamp}`);\n      console.log(res.data);\n      // const actualPkl = res.data;\n      \n      let retrievedPkl = null;\n      var jobs = {}\n      var changes = \"\"\n      retrievedPkl = res.data;\n      if (state.data !== null && retrievedPkl.has_changed === true){\n        //console.log(retrievedPkl.pkl_content.length);\n        for(var j = 0, job; j < retrievedPkl.pkl_content.length; j++){\n          job = retrievedPkl.pkl_content[j];\n          //console.log(job);\n          jobs[ job.name ] = job;\n          //console.log(jobs[job.name]);\n        }\n        let requireUpdate = false;\n        console.log('Current ts: '+ state.data.pkl_timestamp);        \n        var newData = state.data;\n        //console.log(newData.nodes);\n        var expData = state.experiment;\n        if (newData.nodes){\n          for(var i = 0; i < newData.nodes.length; i++){\n            // console.log(newNodes[i].id);\n            //console.log(newData.nodes[i]);\n            // console.log(jobs[ newNodes[i].id ]);\n\n            if (newData.nodes[i].status_code !== jobs[ newData.nodes[i].id ].status_code){\n              changes += newData.nodes[i].id + \" from \" + newData.nodes[i].status + \" to \" + jobs[ newData.nodes[i].id ].status + \" || \";\n              newData.nodes[i].status_code = jobs[ newData.nodes[i].id ].status_code;\n              newData.nodes[i].status_color = jobs[ newData.nodes[i].id ].status_color;\n              newData.nodes[i].status = jobs[ newData.nodes[i].id ].status;\n              //console.log(newData.nodes[i].status_color)\n              requireUpdate = true;\n            }\n          }\n          if (requireUpdate){\n            // console.log(newData.pkl_timestamp);\n            // console.log(expData.pkl_timestamp);\n            console.log(\"New ts: \" + retrievedPkl.pkl_timestamp)\n            newData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            expData.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            // console.log(newData.pkl_timestamp);\n            // console.log(expData.pkl_timestamp);\n            \n            // console.log('Call Update');\n            updateNodes(newData);\n            updateExperimentTimeStamp(expData);\n            setUpdateGraph(true);\n            setUpdateGraph(false);\n            setPklChanges(changes);\n  \n          }\n        }\n      }\n      // } else {\n      //   var t = new Date( retrievedPkl.pkl_timestamp );\n      //   var formatted = t.toISOString();\n      //   setPklChanges(\"No news yet... \" + formatted)\n      // }\n\n\n      dispatch({\n        type: GET_PKL_DATA,\n        payload: res.data,\n      });\n    }\n\n    // Cleaning\n    const clearExperiments = () => dispatch({ type: CLEAR_EXPERIMENTS });\n    const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n    const cleanRunData = () => dispatch({ type: CLEAN_RUN_DATA });\n    const cleanPklData = () => dispatch({ type: CLEAN_PKL_DATA });\n\n    // Set Loading\n    const setLoading = () => dispatch({ type: SET_LOADING });\n    const setLoadingGraph = () => dispatch({ type: SET_LOADING_GRAPH });\n    const setLoadingRun = () => dispatch({ type: SET_LOADING_RUN });\n    const setLoadingPkl = () => dispatch({ type: SET_LOADING_PKL });\n\n\n    // Action Things\n    const updateSelection = (currentSelection) => dispatch({ type: UPDATE_SELECTION, payload: currentSelection });\n    const updateNodes = (newdata) => dispatch({ type: UPDATE_NODES, payload: newdata });\n    const updateExperimentTimeStamp = (newExperiment) => dispatch({ type: UPDATE_EXPERIMENT_TS, payload: newExperiment});\n    const setAutoUpdateRun = (value) => dispatch({ type: SET_AUTOUPDATE_RUN, payload: value });\n    const setAutoUpdatePkl = () => dispatch({ type: SET_AUTOUPDATE_PKL });\n    const setUpdateGraph = (value) => dispatch({ type: SHOULD_UPDATE_GRAPH, payload: value });\n    const setPklChanges = (value) => dispatch({ type: SET_PKL_CHANGES, payload: value });\n\n    // Other Utils\n    const hashCode = (value) => {\n        var hash = 0, i, chr;\n        if (value.length === 0) return hash;\n        for (i = 0; i < value.length; i++) {\n          chr   = value.charCodeAt(i);\n          hash  = ((hash << 5) - hash) + chr;\n          hash |= 0; // Convert to 32bit integer\n        }\n        console.log(hash);\n        return hash;\n      };\n      \n    const timeStampToDate = (value) => {\n      let formattedDate = \"\";\n      var date = new Date( value * 1000);\n      var hours = date.getHours();\n      var minutes = \"0\" + date.getMinutes();\n      var seconds = \"0\" + date.getSeconds();\n      formattedDate = str(hours) + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      return formattedDate;\n    }\n\n    return (\n        <ExperimentContext.Provider\n        value ={{\n            experiments: state.experiments,\n            experiment: state.experiment,\n            loading: state.loading,\n            loadingGraph: state.loadingGraph,\n            loadingRun: state.loadingRun,\n            loadingPkl: state.loadingPkl,\n            data: state.data,\n            rundata: state.rundata,\n            pklchanges: state.pklchanges,\n            selection: state.selection,\n            enabledGraphSearch: state.enabledGraphSearch,\n            startAutoUpdateRun: state.startAutoUpdateRun,\n            startAutoUpdatePkl: state.startAutoUpdatePkl,\n            shouldUpdateGraph: state.shouldUpdateGraph,\n            setAutoUpdateRun,\n            setAutoUpdatePkl,\n            searchExperiments,\n            clearExperiments,\n            getExperiment,\n            getExperimentGraph,\n            cleanGraphData, \n            cleanRunData,\n            cleanPklData,\n            setPklChanges,\n            updateSelection,\n            getExperimentRun, \n            getExperimentPkl,           \n            hashCode,       \n            timeStampToDate,\n        }}>\n            {props.children}\n        </ExperimentContext.Provider>\n    );\n};\n\nexport default ExperimentState;"]},"metadata":{},"sourceType":"module"}