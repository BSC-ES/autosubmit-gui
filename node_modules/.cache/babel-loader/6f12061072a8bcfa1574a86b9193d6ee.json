{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js\";\nimport React, { Fragment, Component } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\n\nclass GraphRepresentation extends Component {\n  // { data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n  // console.log(\"Entering GraphRep\")\n  // useEffect(() => {\n  //   return () => {\n  //     cleanGraphData();\n  //   };\n  //   // eslint-disable-next-line\n  // }, []);\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    //const experimentContext = useContext(ExperimentContext);\n    //{ data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.data.nodes !== \"undefined\" || typeof this.props.data.edges !== \"undefined\") {\n      this.props.data.nodes.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        }\n      }));\n      this.props.data.edges.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n    }\n\n    const graph = {\n      nodes: nodes_array,\n      edges: edges_array\n    };\n    const options = {\n      edges: {\n        arrows: {\n          to: {\n            enabled: true\n          }\n        }\n      },\n      layout: {\n        improvedLayout: true,\n        hierarchical: {\n          nodeSpacing: 250,\n          edgeMinimization: false,\n          blockShifting: false,\n          parentCentralization: false,\n          direction: 'UD',\n          sortMethod: 'directed'\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        multiselect: true,\n        navigationButtons: true\n      },\n      physics: {\n        enabled: false\n      },\n      nodes: {\n        shape: 'dot'\n      }\n    };\n    const events = {\n      select: event => {\n        var nodes = event.nodes,\n            edges = event.edges; //setCurrent(nodes);\n\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        this.props.updateSelection(nodes); //setCurrent(nodes);\n        // console.log(\"Selected edges:\");\n        // console.log(edges);\n      }\n    };\n    if (this.props.loadingGraph) return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Graph, {\n      style: experimentStyle,\n      graph: graph,\n      options: options,\n      events: events,\n      getNetwork: network => {//  if you want access to vis.js network api you can set the state in a parent component using this property\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst experimentStyle = {\n  height: 800\n};\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js"],"names":["React","Fragment","Component","Spinner","Graph","GraphRepresentation","shouldComponentUpdate","nextProps","nextState","render","nodes_array","edges_array","props","data","nodes","edges","map","node","push","id","label","color","background","status_color","border","edge","from","to","graph","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","edgeMinimization","blockShifting","parentCentralization","direction","sortMethod","interaction","dragNodes","hoverConnectedEdges","multiselect","navigationButtons","physics","shape","events","select","event","console","log","updateSelection","loadingGraph","experimentStyle","network","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAEA,MAAMC,mBAAN,SAAkCH,SAAlC,CAA4C;AAG1C;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEAI,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACzC,WAAO,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN;AACA;AAEA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,QACE,OAAO,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,KAAvB,KAAiC,WAAjC,IACA,OAAO,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,KAAvB,KAAiC,WAFnC,EAGE;AACA,WAAKH,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBE,GAAtB,CAA0BC,IAAI,IAC5BP,WAAW,CAACQ,IAAZ,CAAiB;AACfC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADM;AAEfC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAFG;AAGfC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC;AAHQ,OAAjB,CADF;AAQA,WAAKZ,KAAL,CAAWC,IAAX,CAAgBE,KAAhB,CAAsBC,GAAtB,CAA0BS,IAAI,IAAI;AAChCd,QAAAA,WAAW,CAACO,IAAZ,CAAiB;AAAEQ,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBC,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAA5B,SAAjB;AACD,OAFD;AAGD;;AAED,UAAMC,KAAK,GAAG;AACZd,MAAAA,KAAK,EAAGJ,WADI;AAEZK,MAAAA,KAAK,EAAGJ;AAFI,KAAd;AAMA,UAAMkB,OAAO,GAAG;AACdd,MAAAA,KAAK,EAAE;AACLe,QAAAA,MAAM,EAAE;AACNH,UAAAA,EAAE,EAAE;AAAEI,YAAAA,OAAO,EAAE;AAAX;AADE;AADH,OADO;AAMdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,cAAc,EAAE,IADV;AAENC,QAAAA,YAAY,EAAE;AAEZC,UAAAA,WAAW,EAAE,GAFD;AAGZC,UAAAA,gBAAgB,EAAE,KAHN;AAIZC,UAAAA,aAAa,EAAE,KAJH;AAKZC,UAAAA,oBAAoB,EAAE,KALV;AAMZC,UAAAA,SAAS,EAAE,IANC;AAOZC,UAAAA,UAAU,EAAE;AAPA;AAFR,OANM;AAkBdC,MAAAA,WAAW,EAAE;AACXC,QAAAA,SAAS,EAAE,IADA;AAEXC,QAAAA,mBAAmB,EAAE,IAFV;AAGXC,QAAAA,WAAW,EAAE,IAHF;AAIXC,QAAAA,iBAAiB,EAAE;AAJR,OAlBC;AAwBdC,MAAAA,OAAO,EAAE;AACPf,QAAAA,OAAO,EAAE;AADF,OAxBK;AA2BdjB,MAAAA,KAAK,EAAE;AACLiC,QAAAA,KAAK,EAAE;AADF;AA3BO,KAAhB;AAkCA,UAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAGC,KAAD,IAAW;AAAA,YACXpC,KADW,GACMoC,KADN,CACXpC,KADW;AAAA,YACJC,KADI,GACMmC,KADN,CACJnC,KADI,EAEjB;;AACAoC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYtC,KAAZ;AACA,aAAKF,KAAL,CAAWyC,eAAX,CAA2BvC,KAA3B,EALiB,CAMjB;AACA;AACA;AACD;AAVY,KAAf;AAaA,QAAI,KAAKF,KAAL,CAAW0C,YAAf,EAA6B,OAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAE7B,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAEC,eADT;AAEE,MAAA,KAAK,EAAE3B,KAFT;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,MAAM,EAAEmB,MAJV;AAKE,MAAA,UAAU,EAAEQ,OAAO,IAAI,CACrB;AACD,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAcD;;AA9GyC;;AAkH5C,MAAMD,eAAe,GAAG;AACpBE,EAAAA,MAAM,EAAE;AADY,CAAxB;AAIA,eAAepD,mBAAf","sourcesContent":["import React, { Fragment, Component } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\n\nclass GraphRepresentation extends Component {\n\n \n  // { data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n  // console.log(\"Entering GraphRep\")\n\n  // useEffect(() => {\n  //   return () => {\n  //     cleanGraphData();\n  //   };\n  //   // eslint-disable-next-line\n  // }, []);\n\n  shouldComponentUpdate(nextProps, nextState){\n    return false;\n  }\n\n  render(){\n    //const experimentContext = useContext(ExperimentContext);\n    //{ data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (\n      typeof this.props.data.nodes !== \"undefined\" ||\n      typeof this.props.data.edges !== \"undefined\"\n    ) {\n      this.props.data.nodes.map(node =>\n        nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: { background: node.status_color, border: \"black\" }\n        })\n      );\n\n      this.props.data.edges.map(edge => {\n        edges_array.push({ from: edge.from, to: edge.to });\n      });\n    }\n\n    const graph = {\n      nodes : nodes_array,\n      edges : edges_array\n    };\n\n\n    const options = {\n      edges: {\n        arrows: {\n          to: { enabled: true }\n        }\n      },\n      layout: {\n        improvedLayout: true,\n        hierarchical: {\n\n          nodeSpacing: 250,\n          edgeMinimization: false,\n          blockShifting: false,\n          parentCentralization: false,\n          direction: 'UD',\n          sortMethod: 'directed',\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        multiselect: true,\n        navigationButtons: true,\n      },\n      physics: {\n        enabled: false,\n      },\n      nodes: {\n        shape: 'dot',\n      }\n    };\n    \n    \n\n    const events = {\n      select: (event) => {\n        var { nodes, edges } = event;\n        //setCurrent(nodes);\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        this.props.updateSelection(nodes);\n        //setCurrent(nodes);\n        // console.log(\"Selected edges:\");\n        // console.log(edges);\n      }\n    };\n\n    if (this.props.loadingGraph) return <Spinner />;\n\n    return (\n      <Fragment>\n        <Graph\n          style={experimentStyle}\n          graph={graph}\n          options={options}\n          events={events}\n          getNetwork={network => {\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\n          }}\n        />\n        {/* <Selection selectionList={current} /> */}\n      </Fragment> \n    );    \n  }\n   \n}\n\nconst experimentStyle = {\n    height: 800\n  };\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}