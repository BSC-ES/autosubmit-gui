{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js\";\nimport React, { useState, Fragment } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\nimport Selection from \"./Selection\";\n\nfunction GraphRepresentation({\n  nodes_prop,\n  edges_prop,\n  loading\n}) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        current = _useState2[0],\n        setCurrent = _useState2[1]; // var data = {\n  //   nodes: nodes,\n  //   edges: edges\n  // };\n\n\n  var nodes_array = [];\n  var edges_array = [];\n\n  if (typeof nodes_prop !== \"undefined\" || typeof edges_prop !== \"undefined\") {\n    nodes_prop.map(node => nodes_array.push({\n      id: node.id,\n      label: node.label,\n      color: {\n        background: node.status_color,\n        border: \"black\"\n      }\n    }));\n    edges_prop.map(edge => {\n      edges_array.push({\n        from: edge.from,\n        to: edge.to\n      });\n    }); // var nodes = new vis.DataSet(nodes_array);\n    // var edges = new vis.DataSet(edges_array);\n    //var network = new vis.Network(container, data, options);\n    //window.test(nodes_array, edges_array);\n  }\n\n  const graph = {\n    nodes: nodes_array,\n    edges: edges_array\n  };\n  const options = {\n    edges: {\n      arrows: {\n        to: {\n          enabled: true\n        }\n      }\n    },\n    layout: {\n      improvedLayout: true,\n      hierarchical: {\n        //parentCentralization: true,\n        //treeSpacing: 180,\n        nodeSpacing: 250,\n        edgeMinimization: false,\n        blockShifting: false,\n        parentCentralization: false,\n        direction: 'UD',\n        sortMethod: 'directed'\n      }\n    },\n    interaction: {\n      dragNodes: true,\n      hoverConnectedEdges: true,\n      multiselect: true,\n      navigationButtons: true\n    },\n    physics: {\n      enabled: false\n    },\n    nodes: {\n      shape: 'dot' // configure: {\n      //   enabled: true,\n      //   filter: 'nodes,edges',\n      //   container: undefined,\n      //   showButton: true\n      // }\n\n    }\n  };\n  const events = {\n    select: function (event) {\n      var nodes = event.nodes,\n          edges = event.edges; //setCurrent(nodes);\n\n      console.log(\"Selected nodes:\");\n      console.log(nodes);\n      setCurrent(nodes); // console.log(\"Selected edges:\");\n      // console.log(edges);\n    }\n  };\n  if (loading) return React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Graph, {\n    style: experimentStyle,\n    graph: graph,\n    options: options,\n    events: events,\n    getNetwork: network => {//  if you want access to vis.js network api you can set the state in a parent component using this property\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }));\n}\n\nconst experimentStyle = {\n  height: 800\n};\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js"],"names":["React","useState","Fragment","Spinner","Graph","Selection","GraphRepresentation","nodes_prop","edges_prop","loading","current","setCurrent","nodes_array","edges_array","map","node","push","id","label","color","background","status_color","border","edge","from","to","graph","nodes","edges","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","edgeMinimization","blockShifting","parentCentralization","direction","sortMethod","interaction","dragNodes","hoverConnectedEdges","multiselect","navigationButtons","physics","shape","events","select","event","console","log","experimentStyle","network","height"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\nimport Selection from \"./Selection\";\n\nfunction GraphRepresentation({nodes_prop, edges_prop, loading}) {\n  \n  const [current, setCurrent] = useState([]);\n  // var data = {\n  //   nodes: nodes,\n  //   edges: edges\n  // };\n  var nodes_array = [];\n  var edges_array = [];\n\n  if (\n    typeof nodes_prop !== \"undefined\" ||\n    typeof edges_prop !== \"undefined\"\n  ) {\n    nodes_prop.map(node =>\n      nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: { background: node.status_color, border: \"black\" }\n      })\n    );\n\n    edges_prop.map(edge => {\n      edges_array.push({ from: edge.from, to: edge.to });\n    });\n\n    // var nodes = new vis.DataSet(nodes_array);\n\n    // var edges = new vis.DataSet(edges_array);\n\n    //var network = new vis.Network(container, data, options);\n    //window.test(nodes_array, edges_array);\n  }\n\n  const graph = {\n    nodes : nodes_array,\n    edges : edges_array\n  };\n\n\n    const options = {\n      edges: {\n        arrows: {\n          to: { enabled: true }\n        }\n      },\n      layout: {\n        improvedLayout: true,\n        hierarchical: {\n          //parentCentralization: true,\n          //treeSpacing: 180,\n          nodeSpacing: 250,\n          edgeMinimization: false,\n          blockShifting: false,\n          parentCentralization: false,\n          direction: 'UD',\n          sortMethod: 'directed',\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        multiselect: true,\n        navigationButtons: true,\n      },\n      physics: {\n        enabled: false,\n      },\n      nodes: {\n        shape: 'dot',\n      }\n      // configure: {\n      //   enabled: true,\n      //   filter: 'nodes,edges',\n      //   container: undefined,\n      //   showButton: true\n      // }\n    };\n  \n    const events = {\n      select: function(event) {\n        var { nodes, edges } = event;\n        //setCurrent(nodes);\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        setCurrent(nodes);\n        // console.log(\"Selected edges:\");\n        // console.log(edges);\n      }\n    };\n\n    if (loading) return <Spinner />;\n\n    return (\n      <Fragment>\n        <Graph\n          style={experimentStyle}\n          graph={graph}\n          options={options}\n          events={events}\n          getNetwork={network => {\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\n          }}\n        />\n        {/* <Selection selectionList={current} /> */}\n      </Fragment>\n      \n    );  \n\n}\n\nconst experimentStyle = {\n    height: 800\n  };\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}