{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/graph/GraphState.js\";\nimport React, { useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport GraphContext from \"./graphContext\";\nimport GraphReducer from \"./graphReducer\";\nimport ExperimentContext from \"../experiment/experimentContext\";\nimport { GET_GRAPH, GET_PKL_DATA, CLEAN_GRAPH_DATA, CLEAN_ONLY_GRAH_DATA, SET_LOADING_GRAPH, SET_AUTOUPDATE_PKL, SET_VIS_DATA, SET_VIS_NETWORK, UPDATE_SELECTION, SET_FOUND_NODES, SET_LOADING_SEARCH_JOB, SET_LOADING_PKL, SHOULD_UPDATE_GRAPH, SET_LOADING_JOB_MONITOR, SET_CURRENT_COMMAND, NAVIGATE_GRAPH_TO, CLEAN_PKL_DATA, CLEAN_NAV_DATA, NAVIGATE_AFTER_LOADING_GRAPH, NAVIGATE_TO_GROUP_GRAPH, NAVIGATE_TO_LATEST, UPDATE_GRAPH_SELECTED_NODES, SET_NOTIFICATION_TITLE_GRAPH, SET_OFF_LOADING_GRAPH //DEACTIVATE_COPY_TO,\n} from \"../types\";\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, NOAPI } from \"../vars\"; //import { timeStampToDate } from \"../utils\";\n\nconst GraphState = props => {\n  const initialState = {\n    data: null,\n    visNodes: null,\n    visNetwork: null,\n    loadingGraph: false,\n    loadingPkl: false,\n    loadingJobMonitor: false,\n    enabledGraphSearch: true,\n    loadingSearchJob: false,\n    startAutoUpdatePkl: false,\n    shouldUpdateGraph: false,\n    pklchanges: null,\n    notificationTitleGraph: null,\n    //currentSelected: [],\n    currentCommandGraph: null,\n    current_grouped: \"none\",\n    current_layout: \"standard\",\n    selection: null,\n    foundNodes: null,\n    graphSelectedNodes: null,\n    pkldata: null\n  };\n  const [state, dispatch] = useReducer(GraphReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE; //const localserver = \"http://84.88.185.94:8081\";\n\n  const debug = DEBUG;\n  const experimentContext = useContext(ExperimentContext);\n  const {\n    updateExperimentTimeStamp,\n    experimentRunning\n  } = experimentContext; // Get Experiment Graph\n\n  const getExperimentGraph = async (expid, grouped = \"none\", layout = \"standard\") => {\n    cleanOnlyGraphData();\n    setLoadingGraph();\n    let res = null;\n\n    if (NOAPI) {\n      res = {\n        data: null\n      };\n      res.data = require(\"../data/graph_\" + String(expid) + \"_standard_\" + String(grouped) + \".json\");\n      console.log(res.data);\n    } else {\n      res = await axios.get(`${localserver}/graph/${expid}/${layout}/${grouped}`).catch(error => {\n        alert(error.message);\n        setOffLoadingGraph();\n      });\n    }\n\n    if (res) {\n      debug && console.log(res.data);\n      const resdata = res.data;\n      dispatch({\n        type: GET_GRAPH,\n        payload: {\n          resdata,\n          grouped,\n          layout\n        }\n      });\n    }\n  }; // Get Experiment Pkl Data for Graph changes update\n\n\n  const getExperimentPkl = async (expid, timeStamp) => {\n    // if (state.isGrouped === false){\n    if (experimentRunning === false) return;\n    setLoadingPkl();\n    setLoadingJobMonitor(); //timeStamp = 1000;\n\n    debug && console.log(\"Exp: \" + expid + \"\\t\" + timeStamp + \"\\t\" + experimentRunning);\n    let retrievedPkl = null;\n\n    if (NOAPI) {\n      retrievedPkl = require(\"../data/pklinfo_\" + String(expid) + \".json\");\n    } else {\n      const res = await axios.get(`${localserver}/pklinfo/${expid}/${timeStamp}`);\n      debug && console.log(res.data);\n      retrievedPkl = res.data;\n    }\n\n    dispatch({\n      type: GET_PKL_DATA,\n      payload: retrievedPkl\n    });\n    updateExperimentTimeStamp(retrievedPkl.pkl_timestamp);\n  };\n\n  const navigateAfterLoadGraph = (running = false) => {\n    debug && console.log(\"Nav. After Loading\");\n    dispatch({\n      type: NAVIGATE_AFTER_LOADING_GRAPH,\n      payload: running\n    });\n  };\n\n  const navigateTo = Id => {\n    debug && console.log(\"Nav. To\");\n    dispatch({\n      type: NAVIGATE_GRAPH_TO,\n      payload: Id\n    });\n  };\n\n  const navToLatest = (statusCode, latest) => {\n    debug && console.log(\"Nav. To Latest\");\n    dispatch({\n      type: NAVIGATE_TO_LATEST,\n      payload: {\n        status: statusCode,\n        latest: latest\n      }\n    });\n  };\n\n  const navigateToGroup = IdList => {\n    debug && console.log(\"Nav. To Group.\");\n    dispatch({\n      type: NAVIGATE_TO_GROUP_GRAPH,\n      payload: IdList\n    });\n  };\n\n  const searchJobInGraph = async string => {\n    setLoadingSearchJob();\n    dispatch({\n      type: SET_FOUND_NODES,\n      payload: string.toUpperCase()\n    });\n  };\n\n  const setCurrentCommandGraph = async command => {\n    // for change status\n    //let arrayNames = [];\n    //console.log(command);\n    dispatch({\n      type: SET_CURRENT_COMMAND,\n      payload: command\n    });\n  }; // Clean state data\n\n\n  const cleanOnlyGraphData = () => dispatch({\n    type: CLEAN_ONLY_GRAH_DATA\n  });\n\n  const cleanGraphData = () => dispatch({\n    type: CLEAN_GRAPH_DATA\n  });\n\n  const cleanPklData = () => dispatch({\n    type: CLEAN_PKL_DATA\n  });\n\n  const cleanNavData = () => dispatch({\n    type: CLEAN_NAV_DATA\n  }); // Loading\n\n\n  const setLoadingGraph = () => dispatch({\n    type: SET_LOADING_GRAPH\n  });\n\n  const setOffLoadingGraph = () => dispatch({\n    type: SET_OFF_LOADING_GRAPH\n  });\n\n  const setLoadingSearchJob = () => dispatch({\n    type: SET_LOADING_SEARCH_JOB\n  });\n\n  const setLoadingPkl = () => dispatch({\n    type: SET_LOADING_PKL\n  });\n\n  const setLoadingJobMonitor = () => dispatch({\n    type: SET_LOADING_JOB_MONITOR\n  }); // Set Data\n\n\n  const setAutoUpdatePkl = value => dispatch({\n    type: SET_AUTOUPDATE_PKL,\n    payload: value\n  });\n\n  const setVisData = value => dispatch({\n    type: SET_VIS_DATA,\n    payload: value\n  });\n\n  const setVisNetwork = value => dispatch({\n    type: SET_VIS_NETWORK,\n    payload: value\n  });\n\n  const setUpdateGraph = value => dispatch({\n    type: SHOULD_UPDATE_GRAPH,\n    payload: value\n  });\n\n  const updateSelection = currentSelection => dispatch({\n    type: UPDATE_SELECTION,\n    payload: currentSelection\n  });\n\n  const updateGraphSelectedNodes = () => dispatch({\n    type: UPDATE_GRAPH_SELECTED_NODES\n  });\n\n  const setNotificationTitleGraph = notification => dispatch({\n    type: SET_NOTIFICATION_TITLE_GRAPH,\n    payload: notification\n  }); //const deactivateCanCopyTo = () => dispatch({ type: DEACTIVATE_COPY_TO });\n\n\n  return /*#__PURE__*/React.createElement(GraphContext.Provider, {\n    value: {\n      visNetwork: state.visNetwork,\n      data: state.data,\n      loadingGraph: state.loadingGraph,\n      loadingPkl: state.loadingPkl,\n      loadingJobMonitor: state.loadingJobMonitor,\n      pklchanges: state.pklchanges,\n      enabledGraphSearch: state.enabledGraphSearch,\n      current_grouped: state.current_grouped,\n      current_layout: state.current_layout,\n      selection: state.selection,\n      foundNodes: state.foundNodes,\n      pkldata: state.pkldata,\n      startAutoUpdatePkl: state.startAutoUpdatePkl,\n      shouldUpdateGraph: state.shouldUpdateGraph,\n      graphSelectedNodes: state.graphSelectedNodes,\n      currentCommandGraph: state.currentCommandGraph,\n      notificationTitleGraph: state.notificationTitleGraph,\n      getExperimentGraph,\n      getExperimentPkl,\n      cleanOnlyGraphData,\n      cleanGraphData,\n      setLoadingGraph,\n      setUpdateGraph,\n      setVisData,\n      setVisNetwork,\n      updateSelection,\n      cleanPklData,\n      searchJobInGraph,\n      cleanNavData,\n      setAutoUpdatePkl,\n      navigateToGroup,\n      navigateTo,\n      navToLatest,\n      navigateAfterLoadGraph,\n      updateGraphSelectedNodes,\n      setCurrentCommandGraph,\n      setNotificationTitleGraph\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default GraphState;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/graph/GraphState.js"],"names":["React","useReducer","useContext","axios","GraphContext","GraphReducer","ExperimentContext","GET_GRAPH","GET_PKL_DATA","CLEAN_GRAPH_DATA","CLEAN_ONLY_GRAH_DATA","SET_LOADING_GRAPH","SET_AUTOUPDATE_PKL","SET_VIS_DATA","SET_VIS_NETWORK","UPDATE_SELECTION","SET_FOUND_NODES","SET_LOADING_SEARCH_JOB","SET_LOADING_PKL","SHOULD_UPDATE_GRAPH","SET_LOADING_JOB_MONITOR","SET_CURRENT_COMMAND","NAVIGATE_GRAPH_TO","CLEAN_PKL_DATA","CLEAN_NAV_DATA","NAVIGATE_AFTER_LOADING_GRAPH","NAVIGATE_TO_GROUP_GRAPH","NAVIGATE_TO_LATEST","UPDATE_GRAPH_SELECTED_NODES","SET_NOTIFICATION_TITLE_GRAPH","SET_OFF_LOADING_GRAPH","AUTOSUBMIT_API_SOURCE","DEBUG","NOAPI","GraphState","props","initialState","data","visNodes","visNetwork","loadingGraph","loadingPkl","loadingJobMonitor","enabledGraphSearch","loadingSearchJob","startAutoUpdatePkl","shouldUpdateGraph","pklchanges","notificationTitleGraph","currentCommandGraph","current_grouped","current_layout","selection","foundNodes","graphSelectedNodes","pkldata","state","dispatch","localserver","debug","experimentContext","updateExperimentTimeStamp","experimentRunning","getExperimentGraph","expid","grouped","layout","cleanOnlyGraphData","setLoadingGraph","res","require","String","console","log","get","catch","error","alert","message","setOffLoadingGraph","resdata","type","payload","getExperimentPkl","timeStamp","setLoadingPkl","setLoadingJobMonitor","retrievedPkl","pkl_timestamp","navigateAfterLoadGraph","running","navigateTo","Id","navToLatest","statusCode","latest","status","navigateToGroup","IdList","searchJobInGraph","string","setLoadingSearchJob","toUpperCase","setCurrentCommandGraph","command","cleanGraphData","cleanPklData","cleanNavData","setAutoUpdatePkl","value","setVisData","setVisNetwork","setUpdateGraph","updateSelection","currentSelection","updateGraphSelectedNodes","setNotificationTitleGraph","notification","children"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport GraphContext from \"./graphContext\";\nimport GraphReducer from \"./graphReducer\";\nimport ExperimentContext from \"../experiment/experimentContext\";\n\nimport {\n  GET_GRAPH,\n  GET_PKL_DATA,\n  CLEAN_GRAPH_DATA,\n  CLEAN_ONLY_GRAH_DATA,\n  SET_LOADING_GRAPH,\n  SET_AUTOUPDATE_PKL,\n  SET_VIS_DATA,\n  SET_VIS_NETWORK,\n  UPDATE_SELECTION,\n  SET_FOUND_NODES,\n  SET_LOADING_SEARCH_JOB,\n  SET_LOADING_PKL,\n  SHOULD_UPDATE_GRAPH,\n  SET_LOADING_JOB_MONITOR,\n  SET_CURRENT_COMMAND,\n  NAVIGATE_GRAPH_TO,\n  CLEAN_PKL_DATA,\n  CLEAN_NAV_DATA,\n  NAVIGATE_AFTER_LOADING_GRAPH,\n  NAVIGATE_TO_GROUP_GRAPH,\n  NAVIGATE_TO_LATEST,\n  UPDATE_GRAPH_SELECTED_NODES,\n  SET_NOTIFICATION_TITLE_GRAPH,\n  SET_OFF_LOADING_GRAPH,\n  //DEACTIVATE_COPY_TO,\n} from \"../types\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, NOAPI } from \"../vars\";\n\n//import { timeStampToDate } from \"../utils\";\n\nconst GraphState = (props) => {\n  const initialState = {\n    data: null,\n    visNodes: null,\n    visNetwork: null,\n    loadingGraph: false,\n    loadingPkl: false,\n    loadingJobMonitor: false,\n    enabledGraphSearch: true,\n    loadingSearchJob: false,\n    startAutoUpdatePkl: false,\n    shouldUpdateGraph: false,\n    pklchanges: null,\n    notificationTitleGraph: null,\n    //currentSelected: [],\n    currentCommandGraph: null,\n    current_grouped: \"none\",\n    current_layout: \"standard\",\n    selection: null,\n    foundNodes: null,\n    graphSelectedNodes: null,\n    pkldata: null,\n  };\n\n  const [state, dispatch] = useReducer(GraphReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  //const localserver = \"http://84.88.185.94:8081\";\n  const debug = DEBUG;\n\n  const experimentContext = useContext(ExperimentContext);\n  const { updateExperimentTimeStamp, experimentRunning } = experimentContext;\n\n  // Get Experiment Graph\n  const getExperimentGraph = async (\n    expid,\n    grouped = \"none\",\n    layout = \"standard\"\n  ) => {\n    cleanOnlyGraphData();\n    setLoadingGraph();\n    let res = null;\n    if (NOAPI) {\n      res = {data: null};\n      res.data = require(\"../data/graph_\"+String(expid)+\"_standard_\"+String(grouped)+\".json\");\n      console.log(res.data);\n    } else {\n      res = await axios\n      .get(`${localserver}/graph/${expid}/${layout}/${grouped}`)\n      .catch((error) => {\n        alert(error.message);\n        setOffLoadingGraph();\n      });\n    }\n    \n    if (res) {\n      debug && console.log(res.data);\n      const resdata = res.data;\n      dispatch({\n        type: GET_GRAPH,\n        payload: { resdata, grouped, layout },\n      });\n    }\n  };\n\n  // Get Experiment Pkl Data for Graph changes update\n  const getExperimentPkl = async (expid, timeStamp) => {\n    // if (state.isGrouped === false){\n    if (experimentRunning === false) return;\n    setLoadingPkl();\n    setLoadingJobMonitor();\n    //timeStamp = 1000;\n    debug &&\n      console.log(\n        \"Exp: \" + expid + \"\\t\" + timeStamp + \"\\t\" + experimentRunning\n      );\n    let retrievedPkl = null;\n    if (NOAPI){\n      retrievedPkl = require(\"../data/pklinfo_\"+String(expid)+\".json\");\n    } else {\n      const res = await axios.get(`${localserver}/pklinfo/${expid}/${timeStamp}`);\n      debug && console.log(res.data);\n      retrievedPkl = res.data;\n    } \n    \n    dispatch({\n      type: GET_PKL_DATA,\n      payload: retrievedPkl,\n    });\n\n    updateExperimentTimeStamp(retrievedPkl.pkl_timestamp);\n  };\n\n  const navigateAfterLoadGraph = (running = false) => {\n    debug && console.log(\"Nav. After Loading\");\n    dispatch({ type: NAVIGATE_AFTER_LOADING_GRAPH, payload: running });\n  };\n\n  const navigateTo = (Id) => {\n    debug && console.log(\"Nav. To\");\n    dispatch({ type: NAVIGATE_GRAPH_TO, payload: Id });\n  };\n\n  const navToLatest = (statusCode, latest) => {\n    debug && console.log(\"Nav. To Latest\");\n    dispatch({\n      type: NAVIGATE_TO_LATEST,\n      payload: { status: statusCode, latest: latest },\n    });\n  };\n\n  const navigateToGroup = (IdList) => {\n    debug && console.log(\"Nav. To Group.\");\n    dispatch({\n      type: NAVIGATE_TO_GROUP_GRAPH,\n      payload: IdList,\n    });\n  };\n\n  const searchJobInGraph = async (string) => {\n    setLoadingSearchJob();\n    dispatch({\n      type: SET_FOUND_NODES,\n      payload: string.toUpperCase(),\n    });\n  };\n\n  const setCurrentCommandGraph = async (command) => {\n    // for change status\n    //let arrayNames = [];\n\n    //console.log(command);\n    dispatch({\n      type: SET_CURRENT_COMMAND,\n      payload: command,\n    });\n  };\n\n  // Clean state data\n  const cleanOnlyGraphData = () => dispatch({ type: CLEAN_ONLY_GRAH_DATA });\n  const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n  const cleanPklData = () => dispatch({ type: CLEAN_PKL_DATA });\n  const cleanNavData = () => dispatch({ type: CLEAN_NAV_DATA });\n  // Loading\n  const setLoadingGraph = () => dispatch({ type: SET_LOADING_GRAPH });\n  const setOffLoadingGraph = () => dispatch({ type: SET_OFF_LOADING_GRAPH });\n  const setLoadingSearchJob = () => dispatch({ type: SET_LOADING_SEARCH_JOB });\n  const setLoadingPkl = () => dispatch({ type: SET_LOADING_PKL });\n  const setLoadingJobMonitor = () =>\n    dispatch({ type: SET_LOADING_JOB_MONITOR });\n\n  // Set Data\n  const setAutoUpdatePkl = (value) =>\n    dispatch({ type: SET_AUTOUPDATE_PKL, payload: value });\n  const setVisData = (value) =>\n    dispatch({ type: SET_VIS_DATA, payload: value });\n  const setVisNetwork = (value) =>\n    dispatch({ type: SET_VIS_NETWORK, payload: value });\n  const setUpdateGraph = (value) =>\n    dispatch({ type: SHOULD_UPDATE_GRAPH, payload: value });\n  const updateSelection = (currentSelection) =>\n    dispatch({ type: UPDATE_SELECTION, payload: currentSelection });\n  const updateGraphSelectedNodes = () =>\n    dispatch({ type: UPDATE_GRAPH_SELECTED_NODES });\n  const setNotificationTitleGraph = (notification) =>\n    dispatch({ type: SET_NOTIFICATION_TITLE_GRAPH, payload: notification });\n  //const deactivateCanCopyTo = () => dispatch({ type: DEACTIVATE_COPY_TO });\n\n  return (\n    <GraphContext.Provider\n      value={{\n        visNetwork: state.visNetwork,\n        data: state.data,\n        loadingGraph: state.loadingGraph,\n        loadingPkl: state.loadingPkl,\n        loadingJobMonitor: state.loadingJobMonitor,\n        pklchanges: state.pklchanges,\n        enabledGraphSearch: state.enabledGraphSearch,\n        current_grouped: state.current_grouped,\n        current_layout: state.current_layout,\n        selection: state.selection,\n        foundNodes: state.foundNodes,\n        pkldata: state.pkldata,\n        startAutoUpdatePkl: state.startAutoUpdatePkl,\n        shouldUpdateGraph: state.shouldUpdateGraph,\n        graphSelectedNodes: state.graphSelectedNodes,\n        currentCommandGraph: state.currentCommandGraph,\n        notificationTitleGraph: state.notificationTitleGraph,\n        getExperimentGraph,\n        getExperimentPkl,\n        cleanOnlyGraphData,\n        cleanGraphData,\n        setLoadingGraph,\n        setUpdateGraph,\n        setVisData,\n        setVisNetwork,\n        updateSelection,\n        cleanPklData,\n        searchJobInGraph,\n        cleanNavData,\n        setAutoUpdatePkl,\n        navigateToGroup,\n        navigateTo,\n        navToLatest,\n        navigateAfterLoadGraph,\n        updateGraphSelectedNodes,\n        setCurrentCommandGraph,\n        setNotificationTitleGraph,\n      }}\n    >\n      {props.children}\n    </GraphContext.Provider>\n  );\n};\n\nexport default GraphState;\n"]},"metadata":{},"sourceType":"module"}