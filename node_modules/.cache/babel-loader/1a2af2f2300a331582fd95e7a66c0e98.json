{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/pages/ExperimentCentral.js\";\nimport React, { Fragment, useContext } from 'react';\nimport Experiment from '../experiment/Experiment'; // import GraphRepresentation from '../experiment/GraphRepresentation';\n\nimport GraphNativeRep from '../experiment/GraphNativeRep';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport Selection from '../experiment/Selection'; // import OpenRun from '../experiment/OpenRun';\n\nimport Running from '../experiment/Running';\nimport JobMonitor from '../experiment/JobMonitor';\n\nconst ExperimentCentral = ({\n  match\n}) => {\n  const expid = match.params.expid;\n  const experimentContext = useContext(ExperimentContext);\n  const data = experimentContext.data,\n        updateSelection = experimentContext.updateSelection,\n        loadingGraph = experimentContext.loadingGraph,\n        loadingRun = experimentContext.loadingRun,\n        shouldUpdateGraph = experimentContext.shouldUpdateGraph,\n        cleanGraphData = experimentContext.cleanGraphData,\n        cleanRunData = experimentContext.cleanRunData,\n        getExperimentRun = experimentContext.getExperimentRun,\n        getExperimentPkl = experimentContext.getExperimentPkl,\n        cleanPklData = experimentContext.cleanPklData,\n        startAutoUpdateRun = experimentContext.startAutoUpdateRun,\n        startAutoUpdatePkl = experimentContext.startAutoUpdatePkl,\n        setAutoUpdateRun = experimentContext.setAutoUpdateRun,\n        rundata = experimentContext.rundata,\n        pklchanges = experimentContext.pklchanges,\n        experiment = experimentContext.experiment,\n        setVisData = experimentContext.setVisData,\n        setVisNetwork = experimentContext.setVisNetwork,\n        navigateGraph = experimentContext.navigateGraph;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Experiment, {\n    expidToken: expid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-9 pr-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(GraphNativeRep, {\n    data: data,\n    updateSelection: updateSelection,\n    loadingGraph: loadingGraph,\n    cleanGraphData: cleanGraphData,\n    shouldUpdateGraph: shouldUpdateGraph,\n    setVisData: setVisData,\n    setVisNetwork: setVisNetwork,\n    navigateGraph: navigateGraph,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-3 pl-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, data && React.createElement(Selection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), startAutoUpdatePkl && React.createElement(JobMonitor, {\n    experiment: experiment,\n    getExperimentPkl: getExperimentPkl,\n    cleanPklData: cleanPklData,\n    pklchanges: pklchanges,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"card-footer p-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, startAutoUpdateRun && React.createElement(Running, {\n    rundata: rundata,\n    loadingRun: loadingRun,\n    cleanRunData: cleanRunData,\n    getExperimentRun: getExperimentRun,\n    experiment: experiment,\n    startAutoUpdateRun: startAutoUpdateRun,\n    setAutoUpdateRun: setAutoUpdateRun,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), !startAutoUpdateRun && React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12 text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Press \", React.createElement(\"span\", {\n    className: \"badge badge-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Show Log\"), \" to see the last 50 lines of the running log of this experiment. If the experiment is running, the log will update automatically.\"))))))));\n};\n\nexport default ExperimentCentral;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/pages/ExperimentCentral.js"],"names":["React","Fragment","useContext","Experiment","GraphNativeRep","ExperimentContext","Selection","Running","JobMonitor","ExperimentCentral","match","expid","params","experimentContext","data","updateSelection","loadingGraph","loadingRun","shouldUpdateGraph","cleanGraphData","cleanRunData","getExperimentRun","getExperimentPkl","cleanPklData","startAutoUpdateRun","startAutoUpdatePkl","setAutoUpdateRun","rundata","pklchanges","experiment","setVisData","setVisNetwork","navigateGraph"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport Experiment from '../experiment/Experiment';\n// import GraphRepresentation from '../experiment/GraphRepresentation';\nimport GraphNativeRep from '../experiment/GraphNativeRep';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport Selection from '../experiment/Selection';\n// import OpenRun from '../experiment/OpenRun';\nimport Running from '../experiment/Running';\nimport JobMonitor from '../experiment/JobMonitor';\n\nconst ExperimentCentral = ({ match }) => {\n    const expid = match.params.expid;\n    const experimentContext = useContext(ExperimentContext);\n    const {data, \n        updateSelection, \n        loadingGraph, \n        loadingRun, \n        shouldUpdateGraph,\n        cleanGraphData, \n        cleanRunData, \n        getExperimentRun,\n        getExperimentPkl, \n        cleanPklData,\n        startAutoUpdateRun, \n        startAutoUpdatePkl,\n        setAutoUpdateRun,\n        rundata,\n        pklchanges,\n        experiment,\n        setVisData,\n        setVisNetwork,\n        navigateGraph, } = experimentContext;\n    \n    return (\n    <Fragment>\n        <Experiment expidToken={expid} />     \n        <div className=\"row mt-2\">\n            <div className=\"col-12\">\n                <div className='card'>\n                    <div className='row'>\n                        <div className='col-9 pr-0'>\n                            <GraphNativeRep \n                                data={data} \n                                updateSelection={updateSelection} \n                                loadingGraph={loadingGraph} \n                                cleanGraphData={cleanGraphData} \n                                shouldUpdateGraph={shouldUpdateGraph} \n                                setVisData={setVisData}\n                                setVisNetwork={setVisNetwork}\n                                navigateGraph={navigateGraph}\n                            />\n                            {/* <GraphRepresentation \n                                data={data} \n                                updateSelection={updateSelection} \n                                loadingGraph={loadingGraph} \n                                cleanGraphData={cleanGraphData} \n                                shouldUpdateGraph={shouldUpdateGraph} \n                            /> */}\n                        </div>\n                        <div className='col-3 pl-0'>\n                            {data && <Selection /> }\n                            {startAutoUpdatePkl &&\n                                <JobMonitor \n                                    experiment={experiment} \n                                    getExperimentPkl={getExperimentPkl} \n                                    cleanPklData={cleanPklData}\n                                    pklchanges={pklchanges} />\n                            }               \n                        </div>\n                    </div>  \n                    <div className=\"card-footer p-0\">\n\n\n                        {startAutoUpdateRun && <Running \n                            rundata={rundata}\n                            loadingRun={loadingRun} \n                            cleanRunData={cleanRunData} \n                            getExperimentRun={getExperimentRun}\n                            experiment={experiment}  \n                            startAutoUpdateRun={startAutoUpdateRun}\n                            setAutoUpdateRun={setAutoUpdateRun}\n                        />} \n\n                        {!startAutoUpdateRun &&\n                            <div className=\"row\">\n                                <div className=\"col-12 text-center\">\n                                    <p className=\"lead\">\n                                        Press <span className='badge badge-dark'>Show Log</span> to see the last 50 lines of the running log of this experiment. \n                                        If the experiment is running, the log will update automatically.\n                                    </p>                                            \n                                </div>                                            \n                            </div>\n                        }\n                          \n\n                    </div>              \n                </div>                \n            </div>\n        </div>                           \n        \n        {/* <OpenRun/> */}\n        \n        \n        \n    </Fragment>\n    );\n};  \n\nexport default ExperimentCentral;"]},"metadata":{},"sourceType":"module"}