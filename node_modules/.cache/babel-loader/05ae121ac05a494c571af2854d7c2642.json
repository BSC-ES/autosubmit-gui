{"ast":null,"code":"export var updateTreeData=function updateTreeData(runData,treedata,fancyTree){//const updatedData = {};\n// console.log(fancyTree);\nif(!runData){return;}var currentJobNames=new Map();var parentCompletedMap=new Map();var parentFailedMap=new Map();runData.forEach(function(item){return currentJobNames[String(item.job_name)]=item;});// console.log(currentJobNames);\n// console.log(treedata);\ntreedata.jobs.forEach(function(item){item.status=\"WAITING\";item.status_code=0;item.status_color=\"gray\";item.minutes=0;item.minutes_queue=0;item.submit=null;item.start=null;item.finish=null;item.rm_id=null;// item.id is job_name\nif(currentJobNames[String(item.id)]){// console.log(\"Found \" + item.id);\nvar sourceInfoJob=currentJobNames[String(item.id)];item.status=sourceInfoJob.status;item.status_code=sourceInfoJob.status_code;item.status_color=sourceInfoJob.status_color;item.minutes=sourceInfoJob.running_time_s;item.minutes_queue=sourceInfoJob.queue_time_s;item.submit=sourceInfoJob.submit;item.start=sourceInfoJob.start;item.finish=sourceInfoJob.finish;item.rm_id=sourceInfoJob.job_id;}});//console.log(treedata.tree);\nfor(var _i=0,_Object$keys=Object.keys(treedata.tree);_i<_Object$keys.length;_i++){var key=_Object$keys[_i];// console.log(treedata.tree[key].title);\ntraverseUpdate(treedata.tree[key],currentJobNames,fancyTree,parentCompletedMap,parentFailedMap);// fancyTreeObject.keyMap[key].title = fancyTreeObject.keyMap[key].refKey;\n// console.log(value);\n}// console.log(Object.keys(parentCompletedMap));\n// console.log(parentFailedMap);\nvar _loop=function _loop(_key){var nodes=fancyTree.getNodesByRef(_key);if(nodes){nodes.forEach(function(item){var currentTitle=item.title+\" <span class='badge' style='background-color:yellow'> %C COMPLETED</span>\";currentTitle=currentTitle.replace('%C',parentCompletedMap[_key]);item.setTitle(currentTitle);});}};for(var _key in parentCompletedMap){_loop(_key);}var _loop2=function _loop2(_key2){var nodes=fancyTree.getNodesByRef(_key2);if(nodes){nodes.forEach(function(item){var currentTitle=item.title+\" <span class='badge' style='background-color:red'>%F FAILED</span>\";currentTitle=currentTitle.replace(\"%F\",parentFailedMap[_key2]);item.setTitle(currentTitle);});}};for(var _key2 in parentFailedMap){_loop2(_key2);}};var traverseUpdate=function traverseUpdate(treeNode,currentMap,fancyTree,parentCompletedMap,parentFailedMap){//fancyTreeNode.title = treeNode.refKey;\n// const underscores = (treeNode.title.match(/_/g) || []).length;\n//if (underscores >= 1 && treeNode.folder === false) {\n//treeNode.title = treeNode.refKey;\nvar nodes=fancyTree.getNodesByRef(treeNode.refKey);// node = node ? node[0] : null;\nif(nodes){nodes.forEach(function(node){var newNodeInfo=currentMap[node.refKey];var currentTitle=node.title;//let newTitle = currentTitle;\n// Setting status string        \nif(!node.folder){var statusIndexStart=currentTitle.indexOf(\"#\");var statusIndexEnd=currentTitle.indexOf(\"<\",statusIndexStart);var statusText=currentTitle.substring(statusIndexStart,statusIndexEnd);var newStatusText=currentMap[node.refKey]?String(newNodeInfo.status):\"WAITING\";currentTitle=currentTitle.replace(statusText,'#'+newStatusText);var bgIndexStart=currentTitle.indexOf(\"background-color:\");var bgIndexEnd=currentTitle.indexOf(\"'>\");var bgColor=currentTitle.substring(bgIndexStart,bgIndexEnd);currentTitle=currentTitle.replace(bgColor,\"background-color:\"+(currentMap[node.refKey]?String(newNodeInfo.status_color):\"gray\"));var timeTagIndexStart=currentTitle.indexOf(\"~\",statusIndexEnd);if(timeTagIndexStart>0){var timeTagIndexEnd=currentTitle.indexOf(\"<\",timeTagIndexStart);var timeTag=\"\";if(timeTagIndexEnd>0){timeTag=currentTitle.substring(timeTagIndexStart,timeTagIndexEnd);}else{timeTag=currentTitle.substring(timeTagIndexStart);}currentTitle=currentTitle.replace(timeTag,currentMap[node.refKey]?\"~ \"+String(newNodeInfo.titletag)+\" \":\" \");}else{currentTitle=currentTitle+(currentMap[node.refKey]?\"~ \"+String(newNodeInfo.titletag)+\" \":\"\");}node.setTitle(currentTitle);var parent=node.parent;parent.setTitle(parent.refKey);// console.log(statusText);\nif(newStatusText===\"COMPLETED\"){parentCompletedMap[parent.refKey]=parentCompletedMap[parent.refKey]?parentCompletedMap[parent.refKey]+1:1;}if(newStatusText===\"FAILED\"){parentFailedMap[parent.refKey]=parentFailedMap[parent.refKey]?parentFailedMap[parent.refKey]+1:1;}}});}if(treeNode.children){treeNode.children.forEach(function(item){//console.log(item);\ntraverseUpdate(item,currentMap,fancyTree,parentCompletedMap,parentFailedMap);});}};export var buildRunTitle=function buildRunTitle(runId,meta){var runTitle=\"Run \"+runId;// console.log(meta);\nif(meta){var created=meta.created,finished=meta.finished,completed=meta.completed,total=meta.total;runTitle=runTitle+\" created on \"+String(created)+(finished?\" finished on \"+finished:\" \")+\" | \"+String(completed)+\" of \"+String(total)+\" jobs completed.\";}// console.log(runTitle);\nreturn runTitle;};","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/treeutils.js"],"names":["updateTreeData","runData","treedata","fancyTree","currentJobNames","Map","parentCompletedMap","parentFailedMap","forEach","item","String","job_name","jobs","status","status_code","status_color","minutes","minutes_queue","submit","start","finish","rm_id","id","sourceInfoJob","running_time_s","queue_time_s","job_id","Object","keys","tree","key","traverseUpdate","nodes","getNodesByRef","currentTitle","title","replace","setTitle","treeNode","currentMap","refKey","node","newNodeInfo","folder","statusIndexStart","indexOf","statusIndexEnd","statusText","substring","newStatusText","bgIndexStart","bgIndexEnd","bgColor","timeTagIndexStart","timeTagIndexEnd","timeTag","titletag","parent","children","buildRunTitle","runId","meta","runTitle","created","finished","completed","total"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,OAAD,CAAUC,QAAV,CAAoBC,SAApB,CAAkC,CAC9D;AACA;AACA,GAAG,CAACF,OAAJ,CAAa,CACX,OACD,CACD,GAAIG,CAAAA,eAAe,CAAG,GAAIC,CAAAA,GAAJ,EAAtB,CACA,GAAIC,CAAAA,kBAAkB,CAAG,GAAID,CAAAA,GAAJ,EAAzB,CACA,GAAIE,CAAAA,eAAe,CAAG,GAAIF,CAAAA,GAAJ,EAAtB,CACAJ,OAAO,CAACO,OAAR,CAAgB,SAACC,IAAD,QAAUL,CAAAA,eAAe,CAACM,MAAM,CAACD,IAAI,CAACE,QAAN,CAAP,CAAf,CAAyCF,IAAnD,EAAhB,EACA;AACA;AACAP,QAAQ,CAACU,IAAT,CAAcJ,OAAd,CAAsB,SAACC,IAAD,CAAU,CAC9BA,IAAI,CAACI,MAAL,CAAc,SAAd,CACAJ,IAAI,CAACK,WAAL,CAAmB,CAAnB,CACAL,IAAI,CAACM,YAAL,CAAoB,MAApB,CACAN,IAAI,CAACO,OAAL,CAAe,CAAf,CACAP,IAAI,CAACQ,aAAL,CAAqB,CAArB,CACAR,IAAI,CAACS,MAAL,CAAc,IAAd,CACAT,IAAI,CAACU,KAAL,CAAa,IAAb,CACAV,IAAI,CAACW,MAAL,CAAc,IAAd,CACAX,IAAI,CAACY,KAAL,CAAa,IAAb,CACA;AACA,GAAIjB,eAAe,CAACM,MAAM,CAACD,IAAI,CAACa,EAAN,CAAP,CAAnB,CAAqC,CACnC;AACA,GAAMC,CAAAA,aAAa,CAAGnB,eAAe,CAACM,MAAM,CAACD,IAAI,CAACa,EAAN,CAAP,CAArC,CACAb,IAAI,CAACI,MAAL,CAAcU,aAAa,CAACV,MAA5B,CACAJ,IAAI,CAACK,WAAL,CAAmBS,aAAa,CAACT,WAAjC,CACAL,IAAI,CAACM,YAAL,CAAoBQ,aAAa,CAACR,YAAlC,CACAN,IAAI,CAACO,OAAL,CAAeO,aAAa,CAACC,cAA7B,CACAf,IAAI,CAACQ,aAAL,CAAqBM,aAAa,CAACE,YAAnC,CACAhB,IAAI,CAACS,MAAL,CAAcK,aAAa,CAACL,MAA5B,CACAT,IAAI,CAACU,KAAL,CAAaI,aAAa,CAACJ,KAA3B,CACAV,IAAI,CAACW,MAAL,CAAcG,aAAa,CAACH,MAA5B,CACAX,IAAI,CAACY,KAAL,CAAaE,aAAa,CAACG,MAA3B,CACD,CACF,CAxBD,EA0BA;AACA,0BAAkBC,MAAM,CAACC,IAAP,CAAY1B,QAAQ,CAAC2B,IAArB,CAAlB,6BAA8C,CAAzC,GAAMC,CAAAA,GAAG,iBAAT,CACH;AACAC,cAAc,CAAC7B,QAAQ,CAAC2B,IAAT,CAAcC,GAAd,CAAD,CAAqB1B,eAArB,CAAsCD,SAAtC,CAAiDG,kBAAjD,CAAqEC,eAArE,CAAd,CACA;AACA;AACD,CACD;AACA;AA9C8D,yBA+CrDuB,IA/CqD,EAgD5D,GAAIE,CAAAA,KAAK,CAAG7B,SAAS,CAAC8B,aAAV,CAAwBH,IAAxB,CAAZ,CACA,GAAIE,KAAJ,CAAW,CACTA,KAAK,CAACxB,OAAN,CAAc,SAAAC,IAAI,CAAI,CACpB,GAAIyB,CAAAA,YAAY,CAAGzB,IAAI,CAAC0B,KAAL,CAAa,2EAAhC,CACAD,YAAY,CAAGA,YAAY,CAACE,OAAb,CAAqB,IAArB,CAA2B9B,kBAAkB,CAACwB,IAAD,CAA7C,CAAf,CACArB,IAAI,CAAC4B,QAAL,CAAcH,YAAd,EACD,CAJD,EAKD,CAvD2D,EA+C9D,IAAK,GAAIJ,CAAAA,IAAT,GAAgBxB,CAAAA,kBAAhB,CAAmC,OAA1BwB,IAA0B,EASlC,CAxD6D,2BA0DrDA,KA1DqD,EA2D5D,GAAIE,CAAAA,KAAK,CAAG7B,SAAS,CAAC8B,aAAV,CAAwBH,KAAxB,CAAZ,CACA,GAAIE,KAAJ,CAAW,CACTA,KAAK,CAACxB,OAAN,CAAc,SAAAC,IAAI,CAAI,CACpB,GAAIyB,CAAAA,YAAY,CAAGzB,IAAI,CAAC0B,KAAL,CAAa,oEAAhC,CACAD,YAAY,CAAGA,YAAY,CAACE,OAAb,CAAqB,IAArB,CAA2B7B,eAAe,CAACuB,KAAD,CAA1C,CAAf,CACArB,IAAI,CAAC4B,QAAL,CAAcH,YAAd,EACD,CAJD,EAKD,CAlE2D,EA0D9D,IAAK,GAAIJ,CAAAA,KAAT,GAAgBvB,CAAAA,eAAhB,CAAgC,QAAvBuB,KAAuB,EAS/B,CAEF,CArEM,CAuEP,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACO,QAAD,CAAWC,UAAX,CAAuBpC,SAAvB,CAAkCG,kBAAlC,CAAsDC,eAAtD,CAA0E,CAC/F;AACA;AACA;AACA;AACA,GAAIyB,CAAAA,KAAK,CAAG7B,SAAS,CAAC8B,aAAV,CAAwBK,QAAQ,CAACE,MAAjC,CAAZ,CACA;AACA,GAAIR,KAAJ,CAAU,CACRA,KAAK,CAACxB,OAAN,CAAc,SAAAiC,IAAI,CAAI,CACpB,GAAMC,CAAAA,WAAW,CAAGH,UAAU,CAACE,IAAI,CAACD,MAAN,CAA9B,CACA,GAAIN,CAAAA,YAAY,CAAGO,IAAI,CAACN,KAAxB,CACA;AACA;AACA,GAAI,CAACM,IAAI,CAACE,MAAV,CAAiB,CACf,GAAMC,CAAAA,gBAAgB,CAAGV,YAAY,CAACW,OAAb,CAAqB,GAArB,CAAzB,CACA,GAAMC,CAAAA,cAAc,CAAGZ,YAAY,CAACW,OAAb,CAAqB,GAArB,CAA0BD,gBAA1B,CAAvB,CACA,GAAMG,CAAAA,UAAU,CAAGb,YAAY,CAACc,SAAb,CAAuBJ,gBAAvB,CAAyCE,cAAzC,CAAnB,CACA,GAAMG,CAAAA,aAAa,CAAIV,UAAU,CAACE,IAAI,CAACD,MAAN,CAAV,CAA0B9B,MAAM,CAACgC,WAAW,CAAC7B,MAAb,CAAhC,CAAuD,SAA9E,CACAqB,YAAY,CAAGA,YAAY,CAACE,OAAb,CAAqBW,UAArB,CAAiC,IAAKE,aAAtC,CAAf,CACA,GAAMC,CAAAA,YAAY,CAAGhB,YAAY,CAACW,OAAb,CAAqB,mBAArB,CAArB,CACA,GAAMM,CAAAA,UAAU,CAAIjB,YAAY,CAACW,OAAb,CAAqB,IAArB,CAApB,CACA,GAAMO,CAAAA,OAAO,CAAGlB,YAAY,CAACc,SAAb,CAAuBE,YAAvB,CAAqCC,UAArC,CAAhB,CACAjB,YAAY,CAAGA,YAAY,CAACE,OAAb,CAAqBgB,OAArB,CAA8B,qBAAqBb,UAAU,CAACE,IAAI,CAACD,MAAN,CAAV,CAA0B9B,MAAM,CAACgC,WAAW,CAAC3B,YAAb,CAAhC,CAA6D,MAAlF,CAA9B,CAAf,CACA,GAAMsC,CAAAA,iBAAiB,CAAGnB,YAAY,CAACW,OAAb,CAAqB,GAArB,CAA0BC,cAA1B,CAA1B,CACA,GAAIO,iBAAiB,CAAG,CAAxB,CAA0B,CACxB,GAAMC,CAAAA,eAAe,CAAGpB,YAAY,CAACW,OAAb,CAAqB,GAArB,CAA0BQ,iBAA1B,CAAxB,CACA,GAAIE,CAAAA,OAAO,CAAG,EAAd,CACA,GAAID,eAAe,CAAG,CAAtB,CAAwB,CACtBC,OAAO,CAAGrB,YAAY,CAACc,SAAb,CAAuBK,iBAAvB,CAA0CC,eAA1C,CAAV,CACD,CAFD,IAEO,CACLC,OAAO,CAAGrB,YAAY,CAACc,SAAb,CAAuBK,iBAAvB,CAAV,CACD,CACDnB,YAAY,CAAGA,YAAY,CAACE,OAAb,CAAqBmB,OAArB,CAA8BhB,UAAU,CAACE,IAAI,CAACD,MAAN,CAAV,CAA0B,KAAO9B,MAAM,CAACgC,WAAW,CAACc,QAAb,CAAb,CAAsC,GAAhE,CAAsE,GAApG,CAAf,CACD,CATD,IASO,CACLtB,YAAY,CAAGA,YAAY,EAAIK,UAAU,CAACE,IAAI,CAACD,MAAN,CAAV,CAA0B,KAAO9B,MAAM,CAACgC,WAAW,CAACc,QAAb,CAAb,CAAsC,GAAhE,CAAsE,EAA1E,CAA3B,CACD,CACDf,IAAI,CAACJ,QAAL,CAAcH,YAAd,EACA,GAAIuB,CAAAA,MAAM,CAAGhB,IAAI,CAACgB,MAAlB,CACAA,MAAM,CAACpB,QAAP,CAAgBoB,MAAM,CAACjB,MAAvB,EACA;AACA,GAAIS,aAAa,GAAK,WAAtB,CAAmC,CACjC3C,kBAAkB,CAACmD,MAAM,CAACjB,MAAR,CAAlB,CAAoClC,kBAAkB,CAACmD,MAAM,CAACjB,MAAR,CAAlB,CAAoClC,kBAAkB,CAACmD,MAAM,CAACjB,MAAR,CAAlB,CAAoC,CAAxE,CAA4E,CAAhH,CACD,CACD,GAAIS,aAAa,GAAK,QAAtB,CAAgC,CAC9B1C,eAAe,CAACkD,MAAM,CAACjB,MAAR,CAAf,CAAiCjC,eAAe,CAACkD,MAAM,CAACjB,MAAR,CAAf,CAAiCjC,eAAe,CAACkD,MAAM,CAACjB,MAAR,CAAf,CAAiC,CAAlE,CAAsE,CAAvG,CACD,CACF,CACF,CAvCD,EAwCD,CAED,GAAIF,QAAQ,CAACoB,QAAb,CAAsB,CACpBpB,QAAQ,CAACoB,QAAT,CAAkBlD,OAAlB,CAA0B,SAAAC,IAAI,CAAI,CAChC;AACAsB,cAAc,CAACtB,IAAD,CAAO8B,UAAP,CAAmBpC,SAAnB,CAA8BG,kBAA9B,CAAkDC,eAAlD,CAAd,CACD,CAHD,EAID,CACF,CAxDD,CA0DA,MAAO,IAAMoD,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAQC,IAAR,CAAiB,CAC5C,GAAIC,CAAAA,QAAQ,CAAG,OAASF,KAAxB,CACA;AACA,GAAIC,IAAJ,CAAS,IACCE,CAAAA,OADD,CACyCF,IADzC,CACCE,OADD,CACUC,QADV,CACyCH,IADzC,CACUG,QADV,CACoBC,SADpB,CACyCJ,IADzC,CACoBI,SADpB,CAC+BC,KAD/B,CACyCL,IADzC,CAC+BK,KAD/B,CAEPJ,QAAQ,CAAGA,QAAQ,CAAG,cAAX,CAA4BpD,MAAM,CAACqD,OAAD,CAAlC,EAA+CC,QAAQ,CAAG,gBAAkBA,QAArB,CAAgC,GAAvF,EAA8F,KAA9F,CAAsGtD,MAAM,CAACuD,SAAD,CAA5G,CAA0H,MAA1H,CAAmIvD,MAAM,CAACwD,KAAD,CAAzI,CAAmJ,kBAA9J,CACD,CACD;AACA,MAAOJ,CAAAA,QAAP,CACD,CATM","sourcesContent":["export const updateTreeData = (runData, treedata, fancyTree) => {\n  //const updatedData = {};\n  // console.log(fancyTree);\n  if(!runData) {\n    return;\n  }\n  let currentJobNames = new Map();\n  let parentCompletedMap = new Map();\n  let parentFailedMap = new Map();\n  runData.forEach((item) => currentJobNames[String(item.job_name)] = item);\n  // console.log(currentJobNames);\n  // console.log(treedata);\n  treedata.jobs.forEach((item) => {\n    item.status = \"WAITING\"; \n    item.status_code = 0; \n    item.status_color = \"gray\"; \n    item.minutes = 0; \n    item.minutes_queue = 0;\n    item.submit = null;\n    item.start = null;\n    item.finish = null;\n    item.rm_id = null;\n    // item.id is job_name\n    if (currentJobNames[String(item.id)]){\n      // console.log(\"Found \" + item.id);\n      const sourceInfoJob = currentJobNames[String(item.id)];\n      item.status = sourceInfoJob.status; \n      item.status_code = sourceInfoJob.status_code; \n      item.status_color = sourceInfoJob.status_color; \n      item.minutes = sourceInfoJob.running_time_s; \n      item.minutes_queue = sourceInfoJob.queue_time_s;\n      item.submit = sourceInfoJob.submit;\n      item.start = sourceInfoJob.start;\n      item.finish = sourceInfoJob.finish;\n      item.rm_id = sourceInfoJob.job_id;\n    }\n  });\n  \n  //console.log(treedata.tree);\n  for (const key of Object.keys(treedata.tree)) {\n    // console.log(treedata.tree[key].title);\n    traverseUpdate(treedata.tree[key], currentJobNames, fancyTree, parentCompletedMap, parentFailedMap);\n    // fancyTreeObject.keyMap[key].title = fancyTreeObject.keyMap[key].refKey;\n    // console.log(value);\n  }\n  // console.log(Object.keys(parentCompletedMap));\n  // console.log(parentFailedMap);\n  for (let key in parentCompletedMap){    \n    let nodes = fancyTree.getNodesByRef(key);    \n    if (nodes) {\n      nodes.forEach(item => {\n        let currentTitle = item.title + \" <span class='badge' style='background-color:yellow'> %C COMPLETED</span>\";\n        currentTitle = currentTitle.replace('%C', parentCompletedMap[key]);\n        item.setTitle(currentTitle);\n      });\n    }    \n  }\n\n  for (let key in parentFailedMap){    \n    let nodes = fancyTree.getNodesByRef(key);    \n    if (nodes) {\n      nodes.forEach(item => {\n        let currentTitle = item.title + \" <span class='badge' style='background-color:red'>%F FAILED</span>\";\n        currentTitle = currentTitle.replace(\"%F\", parentFailedMap[key]);\n        item.setTitle(currentTitle);\n      });\n    }    \n  }\n  \n}\n\nconst traverseUpdate = (treeNode, currentMap, fancyTree, parentCompletedMap, parentFailedMap) => {\n  //fancyTreeNode.title = treeNode.refKey;\n  // const underscores = (treeNode.title.match(/_/g) || []).length;\n  //if (underscores >= 1 && treeNode.folder === false) {\n  //treeNode.title = treeNode.refKey;\n  let nodes = fancyTree.getNodesByRef(treeNode.refKey);\n  // node = node ? node[0] : null;\n  if (nodes){\n    nodes.forEach(node => {\n      const newNodeInfo = currentMap[node.refKey];\n      let currentTitle = node.title;\n      //let newTitle = currentTitle;\n      // Setting status string        \n      if (!node.folder){\n        const statusIndexStart = currentTitle.indexOf(\"#\");\n        const statusIndexEnd = currentTitle.indexOf(\"<\", statusIndexStart);\n        const statusText = currentTitle.substring(statusIndexStart, statusIndexEnd);\n        const newStatusText = (currentMap[node.refKey] ? String(newNodeInfo.status) : \"WAITING\");\n        currentTitle = currentTitle.replace(statusText, '#'+ newStatusText);\n        const bgIndexStart = currentTitle.indexOf(\"background-color:\");\n        const bgIndexEnd =  currentTitle.indexOf(\"'>\");\n        const bgColor = currentTitle.substring(bgIndexStart, bgIndexEnd);\n        currentTitle = currentTitle.replace(bgColor, \"background-color:\"+(currentMap[node.refKey] ? String(newNodeInfo.status_color) : \"gray\"));\n        const timeTagIndexStart = currentTitle.indexOf(\"~\", statusIndexEnd);\n        if (timeTagIndexStart > 0){\n          const timeTagIndexEnd = currentTitle.indexOf(\"<\", timeTagIndexStart);\n          let timeTag = \"\";\n          if (timeTagIndexEnd > 0){\n            timeTag = currentTitle.substring(timeTagIndexStart, timeTagIndexEnd);            \n          } else {\n            timeTag = currentTitle.substring(timeTagIndexStart);           \n          }          \n          currentTitle = currentTitle.replace(timeTag, currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \" \")\n        } else {\n          currentTitle = currentTitle + (currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \"\");\n        }\n        node.setTitle(currentTitle);\n        let parent = node.parent;\n        parent.setTitle(parent.refKey); \n        // console.log(statusText);\n        if (newStatusText === \"COMPLETED\") {          \n          parentCompletedMap[parent.refKey] = parentCompletedMap[parent.refKey] ? parentCompletedMap[parent.refKey] + 1 : 1;\n        }     \n        if (newStatusText === \"FAILED\") {          \n          parentFailedMap[parent.refKey] = parentFailedMap[parent.refKey] ? parentFailedMap[parent.refKey] + 1 : 1;\n        }\n      }                    \n    });\n  }\n\n  if (treeNode.children){\n    treeNode.children.forEach(item => {\n      //console.log(item);\n      traverseUpdate(item, currentMap, fancyTree, parentCompletedMap, parentFailedMap);\n    });\n  }\n}\n\nexport const buildRunTitle = (runId, meta) => {\n  let runTitle = \"Run \" + runId;\n  // console.log(meta);\n  if (meta){\n    const { created, finished, completed, total } = meta;\n    runTitle = runTitle + \" created on \" + String(created) + (finished ? \" finished on \" + finished : \" \") + \" | \" + String(completed) + \" of \" + String(total) + \" jobs completed.\";\n  }  \n  // console.log(runTitle);\n  return runTitle;\n}"]},"metadata":{},"sourceType":"module"}