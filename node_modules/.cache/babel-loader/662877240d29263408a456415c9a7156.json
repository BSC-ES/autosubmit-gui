{"ast":null,"code":"import _toConsumableArray from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{SEARCH_EXPERIMENTS,SET_LOADING,CLEAR_EXPERIMENTS,GET_EXPERIMENT,CLEAN_RUN_DATA,SET_LOADING_RUN,GET_EXPERIMENT_RUN,SET_AUTOUPDATE_RUN,GET_RUNNING_STATE,SET_LOADING_STATE,UPDATE_EXPERIMENT_TS,CURRENT_RUNNING,GET_EXPERIMENT_SUMMARY,CLEAR_SUMMARY_EXP,GET_EXPERIMENT_PERFORMANCE,CLEAN_PERFORMANCE_METRICS,ACTIVATE_SELECTION_MODE,DEACTIVATE_SELECTION_MODE,UPDATE_SELECTED_JOBS,REMOVE_SELECTED_JOB,SET_CURRENT_COMMAND,SET_LOADING_SUMMARY,CLEAN_EXPERIMENT_DATA,LOADING_PERFORMANCE_METRICS,GET_JOB_HISTORY,LOADING_JOB_HISTORY,LOADING_EXPERIMENT_RUNS,GET_EXPERIMENT_RUNS}from\"../types\";import{approximateLoadingTreeTime,approximateLoadingQuickView}from\"../utils\";export default(function(state,action){switch(action.type){case ACTIVATE_SELECTION_MODE:return _objectSpread(_objectSpread({},state),{},{canSelect:true,currentSelected:[],currentCommand:null});case DEACTIVATE_SELECTION_MODE:return _objectSpread(_objectSpread({},state),{},{canSelect:false,currentSelected:[],currentCommand:null});case CLEAN_RUN_DATA:return _objectSpread(_objectSpread({},state),{},{rundata:null,startAutoUpdateRun:false});case CLEAN_EXPERIMENT_DATA:{return _objectSpread(_objectSpread({},state),{},{experiment:null,loading:false,totalJobs:0,expectedLoadingTreeTime:0,expectedLoadingQuickView:0,data:null,canSelect:false});}case LOADING_JOB_HISTORY:return _objectSpread(_objectSpread({},state),{},{jobHistory:null});case GET_JOB_HISTORY:return _objectSpread(_objectSpread({},state),{},{jobHistory:action.payload});case LOADING_EXPERIMENT_RUNS:return _objectSpread(_objectSpread({},state),{},{experimentRuns:null,loadingExperimentRuns:true});case GET_EXPERIMENT_RUNS:return _objectSpread(_objectSpread({},state),{},{experimentRuns:action.payload,loadingExperimentRuns:false});case UPDATE_EXPERIMENT_TS://const { experiment } = state;\nvar pkl_timestamp=action.payload;state.experiment.pkl_timestamp=pkl_timestamp;return _objectSpread({},state);case SEARCH_EXPERIMENTS:return _objectSpread(_objectSpread({},state),{},{experiments:action.payload,loading:false});case CURRENT_RUNNING:return _objectSpread(_objectSpread({},state),{},{experiments:action.payload,loading:false});case SET_AUTOUPDATE_RUN:return _objectSpread(_objectSpread({},state),{},{startAutoUpdateRun:action.payload});case SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:true});case SET_LOADING_STATE:return _objectSpread(_objectSpread({},state),{},{loadingState:true});case SET_LOADING_RUN:return _objectSpread(_objectSpread({},state),{},{loadingRun:true});case CLEAR_EXPERIMENTS:return _objectSpread(_objectSpread({},state),{},{experiments:[],summaries:[],loading:false});case GET_EXPERIMENT:var total_jobs=action.payload.total_jobs;return _objectSpread(_objectSpread({},state),{},{experiment:action.payload,loading:false,totalJobs:total_jobs,expectedLoadingTreeTime:approximateLoadingTreeTime(total_jobs),expectedLoadingQuickView:approximateLoadingQuickView(total_jobs),data:null,canSelect:false});case SET_LOADING_SUMMARY:{var expid=action.payload;state.loadingSummary.set(expid,{loading:true});return _objectSpread({},state);}case GET_EXPERIMENT_SUMMARY:{// const { summaries, summary, expid } = action.payload;\n// summaries.push({ key: expid, value: summary });\nvar _action$payload=action.payload,_expid=_action$payload.expid,summary=_action$payload.summary;state.summaries[_expid]=summary;state.loadingSummary.delete(_expid);return _objectSpread({},state);}case CLEAR_SUMMARY_EXP:{var _expid2=action.payload;if(state.summaries[_expid2]){state.summaries[_expid2]=null;}return _objectSpread({},state);}case GET_EXPERIMENT_PERFORMANCE:return _objectSpread(_objectSpread({},state),{},{performancedata:action.payload,loadingPerformance:false});case CLEAN_PERFORMANCE_METRICS:return _objectSpread(_objectSpread({},state),{},{performancedata:null});case GET_EXPERIMENT_RUN:return _objectSpread(_objectSpread({},state),{},{rundata:action.payload,loadingRun:false});case GET_RUNNING_STATE:return _objectSpread(_objectSpread({},state),{},{experimentRunning:action.payload,loadingState:false});case UPDATE_SELECTED_JOBS:var currentNode=action.payload;var existingJob=state.currentSelected.find(function(job){return job.name===currentNode.name;});if(state.canSelect===false||existingJob){return _objectSpread({},state);}return _objectSpread(_objectSpread({},state),{},{currentSelected:[].concat(_toConsumableArray(state.currentSelected),[currentNode]),currentCommand:null});case SET_CURRENT_COMMAND:return _objectSpread(_objectSpread({},state),{},{currentCommand:action.payload});case LOADING_PERFORMANCE_METRICS:return _objectSpread(_objectSpread({},state),{},{loadingPerformance:true});case REMOVE_SELECTED_JOB:var name=action.payload;var current=[];for(var i=0;i<state.currentSelected.length;i++){if(state.currentSelected[i].name!==name){current.push(state.currentSelected[i]);}}state.currentSelected.find(function(job){return job.name===name;});return _objectSpread(_objectSpread({},state),{},{currentSelected:current,currentCommand:null});default:return null;}});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/experiment/experimentReducer.js"],"names":["SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","CLEAN_RUN_DATA","SET_LOADING_RUN","GET_EXPERIMENT_RUN","SET_AUTOUPDATE_RUN","GET_RUNNING_STATE","SET_LOADING_STATE","UPDATE_EXPERIMENT_TS","CURRENT_RUNNING","GET_EXPERIMENT_SUMMARY","CLEAR_SUMMARY_EXP","GET_EXPERIMENT_PERFORMANCE","CLEAN_PERFORMANCE_METRICS","ACTIVATE_SELECTION_MODE","DEACTIVATE_SELECTION_MODE","UPDATE_SELECTED_JOBS","REMOVE_SELECTED_JOB","SET_CURRENT_COMMAND","SET_LOADING_SUMMARY","CLEAN_EXPERIMENT_DATA","LOADING_PERFORMANCE_METRICS","GET_JOB_HISTORY","LOADING_JOB_HISTORY","LOADING_EXPERIMENT_RUNS","GET_EXPERIMENT_RUNS","approximateLoadingTreeTime","approximateLoadingQuickView","state","action","type","canSelect","currentSelected","currentCommand","rundata","startAutoUpdateRun","experiment","loading","totalJobs","expectedLoadingTreeTime","expectedLoadingQuickView","data","jobHistory","payload","experimentRuns","loadingExperimentRuns","pkl_timestamp","experiments","loadingState","loadingRun","summaries","total_jobs","expid","loadingSummary","set","summary","delete","performancedata","loadingPerformance","experimentRunning","currentNode","existingJob","find","job","name","current","i","length","push"],"mappings":"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","sourcesContent":["import {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  CLEAN_RUN_DATA,\n  SET_LOADING_RUN,\n  GET_EXPERIMENT_RUN,\n  SET_AUTOUPDATE_RUN,\n  GET_RUNNING_STATE,\n  SET_LOADING_STATE,\n  UPDATE_EXPERIMENT_TS,\n  CURRENT_RUNNING,\n  GET_EXPERIMENT_SUMMARY,\n  CLEAR_SUMMARY_EXP,\n  GET_EXPERIMENT_PERFORMANCE,\n  CLEAN_PERFORMANCE_METRICS,\n  ACTIVATE_SELECTION_MODE,\n  DEACTIVATE_SELECTION_MODE,\n  UPDATE_SELECTED_JOBS,\n  REMOVE_SELECTED_JOB,\n  SET_CURRENT_COMMAND,\n  SET_LOADING_SUMMARY,\n  CLEAN_EXPERIMENT_DATA,\n  LOADING_PERFORMANCE_METRICS,\n  GET_JOB_HISTORY,\n  LOADING_JOB_HISTORY,\n  LOADING_EXPERIMENT_RUNS,\n  GET_EXPERIMENT_RUNS,\n} from \"../types\";\n\nimport {\n  approximateLoadingTreeTime,\n  approximateLoadingQuickView,\n} from \"../utils\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case ACTIVATE_SELECTION_MODE:\n      return {\n        ...state,\n        canSelect: true,\n        currentSelected: [],\n        currentCommand: null,\n      };\n    case DEACTIVATE_SELECTION_MODE:\n      return {\n        ...state,\n        canSelect: false,\n        currentSelected: [],\n        currentCommand: null,\n      };\n    case CLEAN_RUN_DATA:\n      return {\n        ...state,\n        rundata: null,\n        startAutoUpdateRun: false,\n      };\n    case CLEAN_EXPERIMENT_DATA: {\n      return {\n        ...state,\n        experiment: null,\n        loading: false,\n        totalJobs: 0,\n        expectedLoadingTreeTime: 0,\n        expectedLoadingQuickView: 0,\n        data: null,\n        canSelect: false,\n      };\n    }\n    case LOADING_JOB_HISTORY:\n      return {\n        ...state,\n        jobHistory: null,\n      };\n    case GET_JOB_HISTORY:\n      return {\n        ...state,\n        jobHistory: action.payload,\n      };\n    case LOADING_EXPERIMENT_RUNS:\n      return {\n        ...state,\n        experimentRuns: null,\n        loadingExperimentRuns: true,\n      }\n    case GET_EXPERIMENT_RUNS:\n      return {\n        ...state,\n        experimentRuns: action.payload,\n        loadingExperimentRuns: false,\n      }\n    case UPDATE_EXPERIMENT_TS:\n      //const { experiment } = state;\n      const pkl_timestamp = action.payload;\n      state.experiment.pkl_timestamp = pkl_timestamp;\n      return {\n        ...state,\n      };\n    case SEARCH_EXPERIMENTS:\n      return {\n        ...state,\n        experiments: action.payload,\n        loading: false,\n      };\n    case CURRENT_RUNNING:\n      return {\n        ...state,\n        experiments: action.payload,\n        loading: false,\n      };\n    case SET_AUTOUPDATE_RUN:\n      return {\n        ...state,\n        startAutoUpdateRun: action.payload,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case SET_LOADING_STATE:\n      return {\n        ...state,\n        loadingState: true,\n      };\n    case SET_LOADING_RUN:\n      return {\n        ...state,\n        loadingRun: true,\n      };\n    case CLEAR_EXPERIMENTS:\n      return {\n        ...state,\n        experiments: [],\n        summaries: [],\n        loading: false,\n      };\n\n    case GET_EXPERIMENT:\n      const { total_jobs } = action.payload;\n      return {\n        ...state,\n        experiment: action.payload,\n        loading: false,\n        totalJobs: total_jobs,\n        expectedLoadingTreeTime: approximateLoadingTreeTime(total_jobs),\n        expectedLoadingQuickView: approximateLoadingQuickView(total_jobs),\n        data: null,\n        canSelect: false,\n      };\n    case SET_LOADING_SUMMARY: {\n      const expid = action.payload;\n      state.loadingSummary.set(expid, { loading: true });\n      return {\n        ...state,\n      };\n    }\n    case GET_EXPERIMENT_SUMMARY: {\n      // const { summaries, summary, expid } = action.payload;\n      // summaries.push({ key: expid, value: summary });\n      const { expid, summary } = action.payload;\n      state.summaries[expid] = summary;\n      state.loadingSummary.delete(expid);\n      return {\n        ...state,\n      };\n    }\n    case CLEAR_SUMMARY_EXP: {\n      const expid = action.payload;\n      if (state.summaries[expid]) {\n        state.summaries[expid] = null;\n      }\n      return {\n        ...state,\n      };\n    }\n    case GET_EXPERIMENT_PERFORMANCE:\n      return {\n        ...state,\n        performancedata: action.payload,\n        loadingPerformance: false,\n      };\n    case CLEAN_PERFORMANCE_METRICS:\n      return {\n        ...state,\n        performancedata: null,\n      };\n\n    case GET_EXPERIMENT_RUN:\n      return {\n        ...state,\n        rundata: action.payload,\n        loadingRun: false,\n      };\n\n    case GET_RUNNING_STATE:\n      return {\n        ...state,\n        experimentRunning: action.payload,\n        loadingState: false,\n      };\n    case UPDATE_SELECTED_JOBS:\n      const currentNode = action.payload;\n      const existingJob = state.currentSelected.find(\n        (job) => job.name === currentNode.name\n      );\n      if (state.canSelect === false || existingJob) {\n        return {\n          ...state,\n        };\n      }\n      return {\n        ...state,\n        currentSelected: [...state.currentSelected, currentNode],\n        currentCommand: null,\n      };\n    case SET_CURRENT_COMMAND:\n      return {\n        ...state,\n        currentCommand: action.payload,\n      };\n    case LOADING_PERFORMANCE_METRICS:\n      return {\n        ...state,\n        loadingPerformance: true,\n      };\n    case REMOVE_SELECTED_JOB:\n      const name = action.payload;\n      let current = [];\n      for (var i = 0; i < state.currentSelected.length; i++) {\n        if (state.currentSelected[i].name !== name) {\n          current.push(state.currentSelected[i]);\n        }\n      }\n      state.currentSelected.find((job) => job.name === name);\n      return {\n        ...state,\n        currentSelected: current,\n        currentCommand: null,\n      };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}