{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/experiment/TreeNativeRep.js\";\nimport React, { Component } from \"react\"; //import Spinner from \"../layout/Spinner\";\n\nimport Loading from \"../layout/Loading\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.clones\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.filter\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.childcounter\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.edit\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.multi\"; // import 'jquery.fancytree/dist/skin-lion/ui.fancytree.less';  // CSS or LESS\n\nimport { createTree } from \"jquery.fancytree\";\nimport { DEBUG } from \"../context/vars\"; // import 'jquery.fancytree/dist/modules/jquery.fancytree.edit';\n// import 'jquery.fancytree/dist/modules/jquery.fancytree.filter';\n\nexport class TreeNativeRep extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    // if (this.props.shouldUpdateGraph === true){\n    //     return true\n    //   }else\n    if (nextProps.treedata !== this.props.treedata) {\n      DEBUG && console.log(\"Rerendering Tree\");\n      return true;\n    } else if (nextProps.loadingTree !== this.props.loadingTree) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    DEBUG && console.log(\"Unmounting Tree Rep\");\n    this.props.cleanTreeData(); // this.props.clearStats();\n  }\n\n  componenteDidMount() {\n    DEBUG && console.log(\"In after mount\"); // createTree(\"#tree\", {\n    //   extensions: [\"edit\", \"filter\"],\n    //   source: this.props.treedata,\n    // });\n  }\n\n  render() {\n    //console.log(this.props.treedata)\n    if (this.props.loadingTree) return /*#__PURE__*/React.createElement(Loading, {\n      source: \"tree\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 40\n      }\n    });\n\n    if (!this.props.treedata) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body text-left\",\n        style: experimentStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, \"Press \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"badge badge-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }\n      }, \"Show\"), \" to see the tree view representation of the experiment.\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \"Repeating subtrees in the tree view are only shown once, use the searcher to focus only on those items.\"));\n    }\n\n    if (this.props.treedata.error === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body text-left\",\n        style: experimentStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, \"Something has gone very wrong.\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, this.props.treedata.error_message));\n    }\n\n    class FancyTree extends Component {\n      componentDidMount() {\n        let tree = new createTree(\"#tree\", {\n          activate: (event, data) => {\n            //console.log(event)\n            //console.log(data)\n            //console.log(tree)\n            //console.log(data);\n            if (data) {\n              // var thenode = tree.getNodesByRef(\"a2a7_20170427_1\")\n              // console.log(thenode)\n              // if (thenode){\n              //     for (var i = 0; i < thenode.length;i++){\n              //         thenode[i].setTitle(\"a2a7_20170417_1 <span class='badge badge-warning'> Honked </span>\")\n              //     }\n              // }\n              // console.log(tree.activeNode.getParent())\n              // console.log(tree.activeNode)\n              //data.node.title = \"Honk\";\n              //console.log(data);\n              //console.log(this);\n              this.props.updateSelectionTree(data); //console.log(this.props.canSelect);\n              //if (this.props.canSelect === true) {\n\n              if (data && data.node && data.node.folder === undefined) {\n                this.props.updateCurrentSelected(data.node.refKey, this.props.originaldata);\n              } //}\n              //this.updateSelection(data);\n\n            }\n          },\n          // extensions: ['edit', 'filter'],\n          // extensions: [\"clones\",\"filter\", \"childcounter\"],\n          extensions: [\"filter\", \"childcounter\", \"clones\"],\n          filter: {\n            autoApply: true,\n            // Re-apply last filter if lazy data is loaded\n            autoExpand: true,\n            // Expand all branches that contain matches while filtered\n            counter: true,\n            // Show a badge with number of matching child nodes near parent icons\n            fuzzy: false,\n            // Match single characters in order, e.g. 'fb' will match 'FooBar'\n            hideExpandedCounter: true,\n            // Hide counter badge if parent is expanded\n            hideExpanders: false,\n            // Hide expanders if all child nodes are hidden by filter\n            highlight: false,\n            // Highlight matches by wrapping inside <mark> tags\n            leavesOnly: true,\n            // Match end nodes only\n            nodata: true,\n            // Display a 'no data' status node if result is empty\n            mode: \"hide\" // Grayout unmatched nodes (pass \"hide\" to remove unmatched node instead)\n\n          },\n          // clones: {\n          //     highlightClones: true,\n          //     highlightActiveClones: true,\n          //   },\n          source: this.props.treedata\n        }); //console.log(tree.activeNode);\n\n        DEBUG && console.log(tree);\n        this.props.setFancyTree(tree); // if (this.props.total !== this.props.exptotal) {\n        //   alert(\n        //     \"The number of jobs in the experiment is different than the number of jobs in your current run. This might be due to a change in the config files of your experiment while Autosubmit was already running.\"\n        //   );\n        // }\n      }\n\n      componentWillUnmount() {\n        DEBUG && console.log(\"Unmounting Tree\"); //this.props.cleanNavData();\n      }\n\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card-body p-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          id: \"tree\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }\n        }));\n      }\n\n    }\n\n    return /*#__PURE__*/React.createElement(FancyTree, {\n      treedata: this.props.treedata.tree,\n      originaldata: this.props.treedata,\n      setFancyTree: this.props.setFancyTree,\n      updateSelectionTree: this.props.updateSelectionTree,\n      updateCurrentSelected: this.props.updateCurrentSelected,\n      canSelect: this.props.canSelect // total={this.props.treedata.total}\n      // exptotal={this.props.totalJobs}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    });\n  }\n\n} // const experimentStyle = {\n//     maxHeight: 600,\n//     height: 600\n//   };\n\nconst experimentStyle = {\n  height: 750\n};\nexport default TreeNativeRep;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/experiment/TreeNativeRep.js"],"names":["React","Component","Loading","createTree","DEBUG","TreeNativeRep","shouldComponentUpdate","nextProps","nextState","treedata","props","console","log","loadingTree","componentWillUnmount","cleanTreeData","componenteDidMount","render","experimentStyle","error","error_message","FancyTree","componentDidMount","tree","activate","event","data","updateSelectionTree","node","folder","undefined","updateCurrentSelected","refKey","originaldata","extensions","filter","autoApply","autoExpand","counter","fuzzy","hideExpandedCounter","hideExpanders","highlight","leavesOnly","nodata","mode","source","setFancyTree","canSelect","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import Spinner from \"../layout/Spinner\";\nimport Loading from \"../layout/Loading\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.clones\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.filter\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.childcounter\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.edit\";\nimport \"jquery.fancytree/dist/modules/jquery.fancytree.multi\";\n// import 'jquery.fancytree/dist/skin-lion/ui.fancytree.less';  // CSS or LESS\nimport { createTree } from \"jquery.fancytree\";\nimport { DEBUG } from \"../context/vars\";\n\n// import 'jquery.fancytree/dist/modules/jquery.fancytree.edit';\n// import 'jquery.fancytree/dist/modules/jquery.fancytree.filter';\n\nexport class TreeNativeRep extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    // if (this.props.shouldUpdateGraph === true){\n    //     return true\n    //   }else\n    if (nextProps.treedata !== this.props.treedata) {\n      DEBUG && console.log(\"Rerendering Tree\");\n      return true;\n    } else if (nextProps.loadingTree !== this.props.loadingTree) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    DEBUG && console.log(\"Unmounting Tree Rep\");\n    this.props.cleanTreeData();\n    // this.props.clearStats();\n  }\n\n  componenteDidMount() {\n    DEBUG && console.log(\"In after mount\");\n    // createTree(\"#tree\", {\n    //   extensions: [\"edit\", \"filter\"],\n    //   source: this.props.treedata,\n    // });\n  }\n\n  render() {\n    //console.log(this.props.treedata)\n    if (this.props.loadingTree) return <Loading source={\"tree\"} />;\n    if (!this.props.treedata) {\n      return (\n        <div className='card-body text-left' style={experimentStyle}>\n          <p className='lead'>\n            Press <span className='badge badge-info'>Show</span> to see the tree\n            view representation of the experiment.\n          </p>\n          <p className='lead'>\n            Repeating subtrees in the tree view are only shown once, use the\n            searcher to focus only on those items.\n          </p>\n        </div>\n      );\n    }\n\n    if (this.props.treedata.error === true) {\n      return (\n        <div className='card-body text-left' style={experimentStyle}>\n          <p className='lead'>Something has gone very wrong.</p>\n          <p className='lead text-danger'>\n            {this.props.treedata.error_message}\n          </p>\n        </div>\n      );\n    }\n\n    class FancyTree extends Component {\n      componentDidMount() {\n        let tree = new createTree(\"#tree\", {\n          activate: (event, data) => {\n            //console.log(event)\n            //console.log(data)\n            //console.log(tree)\n            //console.log(data);\n            if (data) {\n              // var thenode = tree.getNodesByRef(\"a2a7_20170427_1\")\n              // console.log(thenode)\n              // if (thenode){\n              //     for (var i = 0; i < thenode.length;i++){\n              //         thenode[i].setTitle(\"a2a7_20170417_1 <span class='badge badge-warning'> Honked </span>\")\n              //     }\n\n              // }\n              // console.log(tree.activeNode.getParent())\n              // console.log(tree.activeNode)\n              //data.node.title = \"Honk\";\n              //console.log(data);\n              //console.log(this);\n              this.props.updateSelectionTree(data);\n              //console.log(this.props.canSelect);\n              //if (this.props.canSelect === true) {\n              if (data && data.node && data.node.folder === undefined) {\n                this.props.updateCurrentSelected(\n                  data.node.refKey,\n                  this.props.originaldata\n                );\n              }\n\n              //}\n\n              //this.updateSelection(data);\n            }\n          },\n          // extensions: ['edit', 'filter'],\n          // extensions: [\"clones\",\"filter\", \"childcounter\"],\n          extensions: [\"filter\", \"childcounter\", \"clones\"],\n          filter: {\n            autoApply: true, // Re-apply last filter if lazy data is loaded\n            autoExpand: true, // Expand all branches that contain matches while filtered\n            counter: true, // Show a badge with number of matching child nodes near parent icons\n            fuzzy: false, // Match single characters in order, e.g. 'fb' will match 'FooBar'\n            hideExpandedCounter: true, // Hide counter badge if parent is expanded\n            hideExpanders: false, // Hide expanders if all child nodes are hidden by filter\n            highlight: false, // Highlight matches by wrapping inside <mark> tags\n            leavesOnly: true, // Match end nodes only\n            nodata: true, // Display a 'no data' status node if result is empty\n            mode: \"hide\", // Grayout unmatched nodes (pass \"hide\" to remove unmatched node instead)\n          },\n          // clones: {\n          //     highlightClones: true,\n          //     highlightActiveClones: true,\n          //   },\n          source: this.props.treedata,\n        });\n\n        //console.log(tree.activeNode);\n\n        DEBUG && console.log(tree);\n        this.props.setFancyTree(tree);\n        // if (this.props.total !== this.props.exptotal) {\n        //   alert(\n        //     \"The number of jobs in the experiment is different than the number of jobs in your current run. This might be due to a change in the config files of your experiment while Autosubmit was already running.\"\n        //   );\n        // }\n      }\n\n      componentWillUnmount() {\n        DEBUG && console.log(\"Unmounting Tree\");\n        //this.props.cleanNavData();\n      }\n\n      render() {\n        return (\n          <div className='card-body p-0'>\n            <div id='tree'></div>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <FancyTree\n        treedata={this.props.treedata.tree}\n        originaldata={this.props.treedata}\n        setFancyTree={this.props.setFancyTree}\n        updateSelectionTree={this.props.updateSelectionTree}\n        updateCurrentSelected={this.props.updateCurrentSelected}\n        canSelect={this.props.canSelect}\n        // total={this.props.treedata.total}\n        // exptotal={this.props.totalJobs}\n      />\n    );\n  }\n}\n\n// const experimentStyle = {\n//     maxHeight: 600,\n//     height: 600\n//   };\n\nconst experimentStyle = {\n  height: 750,\n};\n\nexport default TreeNativeRep;\n"]},"metadata":{},"sourceType":"module"}