{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/App.js\";\nimport React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Nodes from './components/nodes'; //import Graph from './components/graph'\n\nclass Graph extends Component {\n  render() {\n    var rendering = \"Rendering data.\";\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop != 'undefined' || typeof this.props.edges_prop != 'undefined') {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: 'black'\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n      window.test(nodes_array, edges_array);\n    } else {\n      rendering = \"No data.\";\n      window.clearIt(); //window.test(null, null)\n    }\n\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, rendering);\n  }\n\n}\n\nclass AutosubmitIndex extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expid: null,\n      contacts: [],\n      nodes: [],\n      total: [],\n      shouldShow: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    fetch('http://84.88.185.94:5002/graph/' + this.state.expid).then(res => res.json()).then(data => {\n      this.setState({\n        contacts: data['edges'],\n        nodes: data['nodes'],\n        total: data\n      });\n    }).catch(console.log);\n    this.setState({\n      shouldShow: true\n    });\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({\n      shouldShow: false\n    });\n    this.setState({\n      expid: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Experiment Id:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.expid,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Graph, {\n      nodes_prop: this.state.total.nodes,\n      edges_prop: this.state.total.edges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })); // if (this.state.shouldShow == true && typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n    //       <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n    //     </div>\n    //   );\n    // }else{\n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n    //     </div>\n    //   );\n    // }   \n  }\n\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      nodes: [],\n      total: []\n    };\n  }\n\n  componentDidMount() {\n    //const {expid} = this.props.match.params;\n    //console.log(this.props);\n    fetch('http://84.88.185.94:5002/graph/a22l').then(res => res.json()).then(data => {\n      this.setState({\n        contacts: data['edges'],\n        nodes: data['nodes'],\n        total: data\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    if (typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Graph, {\n        nodes_prop: this.state.total.nodes,\n        edges_prop: this.state.total.edges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"No data\"));\n    }\n  }\n\n}\n\nexport default AutosubmitIndex;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/App.js"],"names":["React","Component","Contacts","Nodes","Graph","render","rendering","nodes_array","edges_array","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","window","test","clearIt","AutosubmitIndex","constructor","state","expid","contacts","nodes","total","shouldShow","handleChange","bind","handleSubmit","event","fetch","then","res","json","data","setState","catch","console","log","preventDefault","target","value","edges","App","componentDidMount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;;AAGA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC5BI,EAAAA,MAAM,GAAG;AACP,QAAIC,SAAS,GAAG,iBAAhB;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAI,OAAO,KAAKC,KAAL,CAAWC,UAAlB,IAAgC,WAAhC,IAA+C,OAAO,KAAKD,KAAL,CAAWE,UAAlB,IAAgC,WAAnF,EAA+F;AAC7F,WAAKF,KAAL,CAAWC,UAAX,CAAsBE,GAAtB,CAA2BC,IAAD,IACtBN,WAAW,CAACO,IAAZ,CAAiB;AAACC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAV;AAAcC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAA1B;AAAiCC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC;AAAxC,OAAjB,CADJ;AAGA,WAAKX,KAAL,CAAWE,UAAX,CAAsBC,GAAtB,CAA2BS,IAAD,IAAU;AAChCb,QAAAA,WAAW,CAACM,IAAZ,CAAiB;AAACQ,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAZ;AAAkBC,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAA3B,SAAjB;AACH,OAFD;AAGAC,MAAAA,MAAM,CAACC,IAAP,CAAYlB,WAAZ,EAAyBC,WAAzB;AACD,KARD,MAQO;AACLF,MAAAA,SAAS,GAAG,UAAZ;AACAkB,MAAAA,MAAM,CAACE,OAAP,GAFK,CAGL;AACD;;AAID,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKpB,SAAL,CADF;AAID;;AAzB2B;;AA4B9B,MAAMqB,eAAN,SAA8B1B,SAA9B,CAAwC;AAEtC2B,EAAAA,WAAW,CAACnB,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKoB,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAG,IADG;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,KAAK,EAAE,EAHI;AAIXC,MAAAA,KAAK,EAAG,EAJG;AAKXC,MAAAA,UAAU,EAAG;AALF,KAAb;AAQA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAElBC,IAAAA,KAAK,CAAC,oCAAkC,KAAKV,KAAL,CAAWC,KAA9C,CAAL,CACCU,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACd,WAAKC,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAEY,IAAI,CAAC,OAAD,CAAhB;AAA2BX,QAAAA,KAAK,EAAGW,IAAI,CAAC,OAAD,CAAvC;AAAkDV,QAAAA,KAAK,EAAGU;AAA1D,OAAd;AACD,KAJD,EAKCE,KALD,CAKOC,OAAO,CAACC,GALf;AAMA,SAAKH,QAAL,CAAc;AAACV,MAAAA,UAAU,EAAE;AAAb,KAAd;AACAI,IAAAA,KAAK,CAACU,cAAN;AACD;;AAEDb,EAAAA,YAAY,CAACG,KAAD,EAAQ;AAClB,SAAKM,QAAL,CAAc;AAACV,MAAAA,UAAU,EAAE;AAAb,KAAd;AACA,SAAKU,QAAL,CAAc;AAACd,MAAAA,KAAK,EAAEQ,KAAK,CAACW,MAAN,CAAaC;AAArB,KAAd;AACD;;AAED7C,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAKgC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,KAArC;AAA4C,MAAA,QAAQ,EAAE,KAAKK,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADA,EAKA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,CADF,EASE,oBAAC,KAAD;AAAO,MAAA,UAAU,EAAE,KAAKN,KAAL,CAAWI,KAAX,CAAiBD,KAApC;AAA2C,MAAA,UAAU,EAAE,KAAKH,KAAL,CAAWI,KAAX,CAAiBkB,KAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CADF,CAFO,CAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AA7EqC;;AAgFxC,MAAMC,GAAN,SAAkBnD,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAezB4B,KAfyB,GAejB;AACNE,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,KAAK,EAAG;AAHF,KAfiB;AAAA;;AAEzBoB,EAAAA,iBAAiB,GAAG;AAElB;AACA;AAEAd,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACd,WAAKC,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAEY,IAAI,CAAC,OAAD,CAAhB;AAA2BX,QAAAA,KAAK,EAAGW,IAAI,CAAC,OAAD,CAAvC;AAAkDV,QAAAA,KAAK,EAAGU;AAA1D,OAAd;AACD,KAJD,EAKCE,KALD,CAKOC,OAAO,CAACC,GALf;AAMD;;AAQD1C,EAAAA,MAAM,GAAG;AACP,QAAI,OAAO,KAAKwB,KAAL,CAAWI,KAAX,CAAiBD,KAAxB,IAAiC,WAAjC,IAAgD,OAAO,KAAKH,KAAL,CAAWI,KAAX,CAAiBkB,KAAxB,IAAiC,WAArF,EAAiG;AAC/F,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,UAAU,EAAE,KAAKtB,KAAL,CAAWI,KAAX,CAAiBD,KAApC;AAA2C,QAAA,UAAU,EAAE,KAAKH,KAAL,CAAWI,KAAX,CAAiBkB,KAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAOD,KARD,MAQO;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF;AAKD;AAEF;;AAtCwB;;AAyC3B,eAAexB,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Nodes from './components/nodes';\n//import Graph from './components/graph'\n\n\nclass Graph extends Component {\n  render() {\n    var rendering = \"Rendering data.\"\n    var nodes_array = []\n    var edges_array = []\n    if (typeof this.props.nodes_prop != 'undefined' || typeof this.props.edges_prop != 'undefined'){\n      this.props.nodes_prop.map((node) => (\n          nodes_array.push({id: node.id, label: node.label, color: { background: node.status_color, border: 'black'}})\n      ))\n      this.props.edges_prop.map((edge) => {\n          edges_array.push({from: edge.from, to: edge.to})\n      })\n      window.test(nodes_array, edges_array)\n    } else {\n      rendering = \"No data.\";\n      window.clearIt();\n      //window.test(null, null)\n    }\n\n    \n\n    return (\n      <h3>{rendering}</h3>\n    );\n\n  }\n}\n\nclass AutosubmitIndex extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      expid : null,\n      contacts: [],\n      nodes: [],\n      total : [],\n      shouldShow : false\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    \n    fetch('http://84.88.185.94:5002/graph/'+this.state.expid)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ contacts: data['edges'], nodes : data['nodes'], total : data })\n    })\n    .catch(console.log)\n    this.setState({shouldShow: true});\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({shouldShow: false});\n    this.setState({expid: event.target.value});\n  }\n  \n  render() {\n\n    return(\n      <div>\n        <form onSubmit={this.handleSubmit}>\n        <label>\n          Experiment Id:\n          <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n        </label>\n        <input type=\"submit\" value=\"Submit\"></input>\n        </form>\n\n        <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n      </div>\n    );\n\n    // if (this.state.shouldShow == true && typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n\n    //       <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n    //     </div>\n    //   );\n    // }else{\n      \n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n    //     </div>\n    //   );\n    // }   \n  }\n}\n\nclass App extends Component{\n\n  componentDidMount() {\n\n    //const {expid} = this.props.match.params;\n    //console.log(this.props);\n\n    fetch('http://84.88.185.94:5002/graph/a22l')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ contacts: data['edges'], nodes : data['nodes'], total : data })\n    })\n    .catch(console.log)\n  }\n\n  state = {\n    contacts: [],\n    nodes: [],\n    total : []\n  }\n\n  render() {\n    if (typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n      return (\n        <div>        \n          <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n          {/* <Contacts contacts={this.state.contacts} />\n          <Nodes nodes={this.state.nodes} />  */}\n        </div>      \n      );\n    } else {\n      return (\n        <div>\n          <p>No data</p>\n        </div>\n      );\n    }\n   \n  }\n}\n\nexport default AutosubmitIndex;\n"]},"metadata":{},"sourceType":"module"}