{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/experiment/ExperimentState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ExperimentContext from \"./experimentContext\";\nimport ExperimentReducer from \"./experimentReducer\";\nimport { SEARCH_EXPERIMENTS, SET_LOADING, CLEAR_EXPERIMENTS, GET_EXPERIMENT //GET_TREE,\n//SET_LOADING_TREE,\n, GET_EXPERIMENT_RUN, SET_LOADING_RUN, CLEAN_RUN_DATA, SET_AUTOUPDATE_RUN, SET_LOADING_STATE, GET_RUNNING_STATE, UPDATE_EXPERIMENT_TS, CURRENT_RUNNING, GET_EXPERIMENT_SUMMARY, CLEAR_SUMMARY_EXP, GET_EXPERIMENT_PERFORMANCE, CLEAN_PERFORMANCE_METRICS, ACTIVATE_SELECTION_MODE, DEACTIVATE_SELECTION_MODE, REMOVE_SELECTED_JOB, SET_CURRENT_COMMAND, UPDATE_SELECTED_JOBS, SET_LOADING_SUMMARY, CLEAN_EXPERIMENT_DATA, LOADING_PERFORMANCE_METRICS, GET_JOB_HISTORY, LOADING_JOB_HISTORY, LOADING_EXPERIMENT_RUNS, GET_EXPERIMENT_RUNS, GET_EXPERIMENT_RUN_JOBDATA, CLEAR_RUNDETAIL_ON_TREE } from \"../types\";\nimport { AUTOSUBMIT_API_SOURCE, DEBUG } from \"../vars\";\nimport { timeStampToDate } from \"../utils\";\n\nconst ExperimentState = props => {\n  const initialState = {\n    experiments: [],\n    summaries: [],\n    experiment: {},\n    totalJobs: 0,\n    jobHistory: null,\n    experimentRuns: null,\n    experimentRunDetailForTree: null,\n    usingRunData: false,\n    // not used by now\n    expectedLoadingTreeTime: 0,\n    expectedLoadingQuickView: 0,\n    loadingSummary: new Map(),\n    loading: false,\n    loadingPerformance: false,\n    experimentRunning: false,\n    rundata: null,\n    performancedata: null,\n    loadingRun: false,\n    loadingState: false,\n    loadingFilterTree: false,\n    loadingExperimentRuns: false,\n    currentCommand: null,\n    currentSelected: [],\n    startAutoUpdateRun: false,\n    startAutoUpdateTreePkl: false,\n    fancyTree: null,\n    allowJobMonitor: false,\n    canSelect: false\n  };\n  const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE; //const localserver = \"http://84.88.185.94:8081\";\n\n  const debug = DEBUG; // Search Experiments\n\n  const searchExperiments = async text => {\n    setLoading();\n    const res = await axios.get(`${localserver}/search/${text}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: res.data.experiment\n    });\n  };\n\n  const getSummaries = () => {\n    const experiments = state.experiments;\n\n    for (var exp in experiments) {\n      var exp_name = experiments[exp].name;\n      getExperimentSummary(exp_name);\n    }\n  };\n\n  const getJobHistory = async (expid, job_name) => {\n    setLoadingJobHistory();\n    const res = await axios.get(`${localserver}/history/${expid}/${job_name}`).catch(error => {\n      alert(error.message);\n    });\n    debug && console.log(res.data);\n    const result = res ? res.data : null;\n    dispatch({\n      type: GET_JOB_HISTORY,\n      payload: result\n    });\n  };\n\n  const getExperimentRunJobData = async (expid, run_id) => {\n    const res = await axios.get(`${localserver}/rundetail/${expid}/${run_id}`).catch(error => {\n      alert(error.message);\n    }); // debug && console.log(res.data);\n\n    console.log(res.data);\n    const result = res ? res.rundata : null;\n    dispatch({\n      type: GET_EXPERIMENT_RUN_JOBDATA,\n      payload: result\n    });\n  };\n\n  const getExperimentRuns = async expid => {\n    setLoadingExperimentRuns();\n    const res = await axios.get(`${localserver}/runs/${expid}`).catch(error => {\n      alert(error.message);\n    });\n    debug && console.log(res.data);\n    const result = res ? res.data : null; // console.log(result);\n\n    dispatch({\n      type: GET_EXPERIMENT_RUNS,\n      payload: result\n    });\n  }; // Get Summary for Search item\n\n\n  const getExperimentSummary = async expid => {\n    clearSummary(expid);\n    setLoadingSummary(expid);\n    const res = await axios.get(`${localserver}/summary/${expid}`);\n    const summary = res.data;\n    debug && console.log(summary); // console.log(summary);\n    // console.log(state.summaries);\n    //state.summaries.push({ key: expid, value: summary });\n\n    dispatch({\n      type: GET_EXPERIMENT_SUMMARY,\n      payload: {\n        expid: expid,\n        summary: summary\n      } //payload: { currentSummaries, summary, expid }\n\n    });\n  };\n\n  const getExperimentPerformanceMetrics = async expid => {\n    cleanPerformanceMetrics();\n    setLoadingPerformanceMetrics();\n    const res = await axios.get(`${localserver}/performance/${expid}`);\n    const metrics = res.data;\n    debug && console.log(metrics);\n    dispatch({\n      type: GET_EXPERIMENT_PERFORMANCE,\n      payload: metrics\n    });\n  };\n\n  const clearSummary = expid => {\n    dispatch({\n      type: CLEAR_SUMMARY_EXP,\n      payload: expid\n    });\n  };\n\n  const getCurrentRunning = async () => {\n    setLoading();\n    const res = await axios.get(`${localserver}/running/`);\n    debug && console.log(res.data);\n    dispatch({\n      type: CURRENT_RUNNING,\n      payload: res.data.experiment\n    });\n  }; //const updateSelection = async () => {};\n  // Get Experiment\n\n\n  const getExperiment = async expid => {\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(`${localserver}/expinfo/${expid}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: res.data\n    });\n  }; // Get Experiment Log Run\n\n\n  const getExperimentRun = async expid => {\n    setLoadingRun();\n    const res = await axios.get(`${localserver}/exprun/${expid}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: res.data\n    });\n  }; // Get Running State\n\n\n  const getRunningState = async expid => {\n    setLoadingState();\n    const res = await axios.get(`${localserver}/ifrun/${expid}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: GET_RUNNING_STATE,\n      payload: res.data.running\n    });\n  };\n\n  const setCurrentCommand = async command => {\n    // for change status\n    dispatch({\n      type: SET_CURRENT_COMMAND,\n      payload: command\n    }); //return command;\n  }; // Cleaning\n\n\n  const clearExperiments = () => dispatch({\n    type: CLEAR_EXPERIMENTS\n  }); //const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n\n\n  const clearRunDetailTree = () => dispatch({\n    type: CLEAR_RUNDETAIL_ON_TREE\n  });\n\n  const cleanRunData = () => dispatch({\n    type: CLEAN_RUN_DATA\n  });\n\n  const cleanPerformanceMetrics = () => dispatch({\n    type: CLEAN_PERFORMANCE_METRICS\n  });\n\n  const cleanExperimentData = () => dispatch({\n    type: CLEAN_EXPERIMENT_DATA\n  }); // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setLoadingRun = () => dispatch({\n    type: SET_LOADING_RUN\n  });\n\n  const setLoadingState = () => dispatch({\n    type: SET_LOADING_STATE\n  });\n\n  const setLoadingSummary = summExpid => dispatch({\n    type: SET_LOADING_SUMMARY,\n    payload: summExpid\n  });\n\n  const setLoadingPerformanceMetrics = () => dispatch({\n    type: LOADING_PERFORMANCE_METRICS\n  });\n\n  const setLoadingJobHistory = () => dispatch({\n    type: LOADING_JOB_HISTORY\n  });\n\n  const setLoadingExperimentRuns = () => dispatch({\n    type: LOADING_EXPERIMENT_RUNS\n  }); // Action Things\n\n\n  const updateExperimentTimeStamp = timeStamp => {\n    //console.log(timeStamp);\n    dispatch({\n      type: UPDATE_EXPERIMENT_TS,\n      payload: timeStamp\n    });\n  }; // Updates for the Selection Tool\n  // source: Tree, Graph\n\n\n  const updateCurrentSelectedTree = (selectedJob, treedata) => {\n    debug && console.log(treedata);\n\n    if (treedata) {\n      let currentNode = {\n        name: selectedJob,\n        color: \"yellow\",\n        source: \"Tree\"\n      };\n      const selectedNode = treedata.jobs.find(job => job.id === currentNode.name);\n      currentNode.color = selectedNode.status_color;\n      dispatch({\n        type: UPDATE_SELECTED_JOBS,\n        payload: currentNode\n      });\n    }\n  };\n\n  const updateCurrentSelectedGraph = (selectedJob, data) => {\n    // console.log(data);\n    // console.log(selectedJob);\n    if (data) {\n      let currentNode = {\n        name: selectedJob,\n        color: \"yellow\"\n      };\n      const selectedNode = data.nodes.find(node => {\n        return node.id === currentNode.name;\n      });\n      currentNode.color = selectedNode.status_color;\n      dispatch({\n        type: UPDATE_SELECTED_JOBS,\n        payload: currentNode\n      });\n    }\n  };\n\n  const setAutoUpdateRun = value => dispatch({\n    type: SET_AUTOUPDATE_RUN,\n    payload: value\n  });\n\n  const activateSelectionMode = () => dispatch({\n    type: ACTIVATE_SELECTION_MODE\n  });\n\n  const deactivateSelectionMode = () => dispatch({\n    type: DEACTIVATE_SELECTION_MODE\n  });\n\n  const removeSelectedJob = name => dispatch({\n    type: REMOVE_SELECTED_JOB,\n    payload: name\n  });\n\n  return /*#__PURE__*/React.createElement(ExperimentContext.Provider, {\n    value: {\n      experiments: state.experiments,\n      experiment: state.experiment,\n      summaries: state.summaries,\n      loadingSummary: state.loadingSummary,\n      loading: state.loading,\n      loadingRun: state.loadingRun,\n      loadingState: state.loadingState,\n      loadingPerformance: state.loadingPerformance,\n      jobHistory: state.jobHistory,\n      performancedata: state.performancedata,\n      experimentRuns: state.experimentRuns,\n      rundata: state.rundata,\n      currentSelected: state.currentSelected,\n      startAutoUpdateRun: state.startAutoUpdateRun,\n      experimentRunning: state.experimentRunning,\n      currentCommand: state.currentCommand,\n      canSelect: state.canSelect,\n      totalJobs: state.totalJobs,\n      expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n      expectedLoadingQuickView: state.expectedLoadingQuickView,\n      experimentRunDetailForTree: state.experimentRunDetailForTree,\n      usingRunData: state.usingRunData,\n      setAutoUpdateRun,\n      searchExperiments,\n      getCurrentRunning,\n      clearExperiments,\n      getExperiment,\n      cleanPerformanceMetrics,\n      cleanRunData,\n      getExperimentRun,\n      timeStampToDate,\n      getRunningState,\n      getExperimentPerformanceMetrics,\n      getExperimentSummary,\n      clearSummary,\n      getSummaries,\n      activateSelectionMode,\n      deactivateSelectionMode,\n      removeSelectedJob,\n      setCurrentCommand,\n      updateCurrentSelectedGraph,\n      updateCurrentSelectedTree,\n      updateExperimentTimeStamp,\n      cleanExperimentData,\n      getJobHistory,\n      getExperimentRuns,\n      getExperimentRunJobData,\n      clearRunDetailTree\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ExperimentState;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/experiment/ExperimentState.js"],"names":["React","useReducer","axios","ExperimentContext","ExperimentReducer","SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","GET_EXPERIMENT_RUN","SET_LOADING_RUN","CLEAN_RUN_DATA","SET_AUTOUPDATE_RUN","SET_LOADING_STATE","GET_RUNNING_STATE","UPDATE_EXPERIMENT_TS","CURRENT_RUNNING","GET_EXPERIMENT_SUMMARY","CLEAR_SUMMARY_EXP","GET_EXPERIMENT_PERFORMANCE","CLEAN_PERFORMANCE_METRICS","ACTIVATE_SELECTION_MODE","DEACTIVATE_SELECTION_MODE","REMOVE_SELECTED_JOB","SET_CURRENT_COMMAND","UPDATE_SELECTED_JOBS","SET_LOADING_SUMMARY","CLEAN_EXPERIMENT_DATA","LOADING_PERFORMANCE_METRICS","GET_JOB_HISTORY","LOADING_JOB_HISTORY","LOADING_EXPERIMENT_RUNS","GET_EXPERIMENT_RUNS","GET_EXPERIMENT_RUN_JOBDATA","CLEAR_RUNDETAIL_ON_TREE","AUTOSUBMIT_API_SOURCE","DEBUG","timeStampToDate","ExperimentState","props","initialState","experiments","summaries","experiment","totalJobs","jobHistory","experimentRuns","experimentRunDetailForTree","usingRunData","expectedLoadingTreeTime","expectedLoadingQuickView","loadingSummary","Map","loading","loadingPerformance","experimentRunning","rundata","performancedata","loadingRun","loadingState","loadingFilterTree","loadingExperimentRuns","currentCommand","currentSelected","startAutoUpdateRun","startAutoUpdateTreePkl","fancyTree","allowJobMonitor","canSelect","state","dispatch","localserver","debug","searchExperiments","text","setLoading","res","get","console","log","data","type","payload","getSummaries","exp","exp_name","name","getExperimentSummary","getJobHistory","expid","job_name","setLoadingJobHistory","catch","error","alert","message","result","getExperimentRunJobData","run_id","getExperimentRuns","setLoadingExperimentRuns","clearSummary","setLoadingSummary","summary","getExperimentPerformanceMetrics","cleanPerformanceMetrics","setLoadingPerformanceMetrics","metrics","getCurrentRunning","getExperiment","getExperimentRun","setLoadingRun","getRunningState","setLoadingState","running","setCurrentCommand","command","clearExperiments","clearRunDetailTree","cleanRunData","cleanExperimentData","summExpid","updateExperimentTimeStamp","timeStamp","updateCurrentSelectedTree","selectedJob","treedata","currentNode","color","source","selectedNode","jobs","find","job","id","status_color","updateCurrentSelectedGraph","nodes","node","setAutoUpdateRun","value","activateSelectionMode","deactivateSelectionMode","removeSelectedJob","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ExperimentContext from \"./experimentContext\";\nimport ExperimentReducer from \"./experimentReducer\";\nimport {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  //GET_TREE,\n  //SET_LOADING_TREE,\n  GET_EXPERIMENT_RUN,\n  SET_LOADING_RUN,\n  CLEAN_RUN_DATA,\n  SET_AUTOUPDATE_RUN,\n  SET_LOADING_STATE,\n  GET_RUNNING_STATE,\n  UPDATE_EXPERIMENT_TS,\n  CURRENT_RUNNING,\n  GET_EXPERIMENT_SUMMARY,\n  CLEAR_SUMMARY_EXP,\n  GET_EXPERIMENT_PERFORMANCE,\n  CLEAN_PERFORMANCE_METRICS,\n  ACTIVATE_SELECTION_MODE,\n  DEACTIVATE_SELECTION_MODE,\n  REMOVE_SELECTED_JOB,\n  SET_CURRENT_COMMAND,\n  UPDATE_SELECTED_JOBS,\n  SET_LOADING_SUMMARY,\n  CLEAN_EXPERIMENT_DATA,\n  LOADING_PERFORMANCE_METRICS,\n  GET_JOB_HISTORY,\n  LOADING_JOB_HISTORY,\n  LOADING_EXPERIMENT_RUNS,\n  GET_EXPERIMENT_RUNS,\n  GET_EXPERIMENT_RUN_JOBDATA,\n  CLEAR_RUNDETAIL_ON_TREE,\n} from \"../types\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG } from \"../vars\";\n\nimport { timeStampToDate } from \"../utils\";\n\nconst ExperimentState = (props) => {\n  const initialState = {\n    experiments: [],\n    summaries: [],\n    experiment: {},\n    totalJobs: 0,\n    jobHistory: null,\n    experimentRuns: null,\n    experimentRunDetailForTree: null,\n    usingRunData: false, // not used by now\n    expectedLoadingTreeTime: 0,\n    expectedLoadingQuickView: 0,\n    loadingSummary: new Map(),\n    loading: false,\n    loadingPerformance: false,\n    experimentRunning: false,\n    rundata: null,\n    performancedata: null,\n    loadingRun: false,\n    loadingState: false,\n    loadingFilterTree: false,\n    loadingExperimentRuns: false,\n    currentCommand: null,\n    currentSelected: [],\n    startAutoUpdateRun: false,\n    startAutoUpdateTreePkl: false,\n    fancyTree: null,\n    allowJobMonitor: false,\n    canSelect: false,\n  };\n\n  const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  //const localserver = \"http://84.88.185.94:8081\";\n  const debug = DEBUG;\n\n  // Search Experiments\n  const searchExperiments = async (text) => {\n    setLoading();\n    const res = await axios.get(`${localserver}/search/${text}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: res.data.experiment,\n    });\n  };\n\n  const getSummaries = () => {\n    const experiments = state.experiments;\n    for (var exp in experiments) {\n      var exp_name = experiments[exp].name;\n      getExperimentSummary(exp_name);\n    }\n  };\n\n  const getJobHistory = async (expid, job_name) => {\n    setLoadingJobHistory();\n    const res = await axios\n      .get(`${localserver}/history/${expid}/${job_name}`)\n      .catch((error) => {\n        alert(error.message);\n      });\n    debug && console.log(res.data);\n    const result = res ? res.data : null;\n    dispatch({\n      type: GET_JOB_HISTORY,\n      payload: result,\n    });\n  };\n\n  const getExperimentRunJobData = async (expid, run_id) => {\n    const res = await axios.get(`${localserver}/rundetail/${expid}/${run_id}`).catch((error) => { alert(error.message);});\n    // debug && console.log(res.data);\n    console.log(res.data);\n    const result = res ? res.rundata : null;\n    dispatch({\n      type: GET_EXPERIMENT_RUN_JOBDATA,\n      payload: result,\n    });\n  }\n\n  const getExperimentRuns = async (expid) => {\n    setLoadingExperimentRuns();\n    const res = await axios.get(`${localserver}/runs/${expid}`).catch((error) => {alert(error.message);});\n    debug && console.log(res.data);\n    const result = res ? res.data : null;\n    // console.log(result);\n    dispatch({\n      type: GET_EXPERIMENT_RUNS,\n      payload: result,\n    })\n  }\n\n  // Get Summary for Search item\n  const getExperimentSummary = async (expid) => {\n    clearSummary(expid);\n    setLoadingSummary(expid);\n    const res = await axios.get(`${localserver}/summary/${expid}`);\n    const summary = res.data;\n    debug && console.log(summary);\n    // console.log(summary);\n    // console.log(state.summaries);\n    //state.summaries.push({ key: expid, value: summary });\n    dispatch({\n      type: GET_EXPERIMENT_SUMMARY,\n      payload: { expid: expid, summary: summary },\n      //payload: { currentSummaries, summary, expid }\n    });\n  };\n\n  const getExperimentPerformanceMetrics = async (expid) => {\n    cleanPerformanceMetrics();\n    setLoadingPerformanceMetrics();\n    const res = await axios.get(`${localserver}/performance/${expid}`);\n    const metrics = res.data;\n    debug && console.log(metrics);\n    dispatch({\n      type: GET_EXPERIMENT_PERFORMANCE,\n      payload: metrics,\n    });\n  };\n\n  const clearSummary = (expid) => {\n    dispatch({\n      type: CLEAR_SUMMARY_EXP,\n      payload: expid,\n    });\n  };\n\n  const getCurrentRunning = async () => {\n    setLoading();\n    const res = await axios.get(`${localserver}/running/`);\n    debug && console.log(res.data);\n    dispatch({\n      type: CURRENT_RUNNING,\n      payload: res.data.experiment,\n    });\n  };\n\n  //const updateSelection = async () => {};\n\n  // Get Experiment\n  const getExperiment = async (expid) => {\n    setLoading();\n    //cleanGraphData();\n    const res = await axios.get(`${localserver}/expinfo/${expid}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: res.data,\n    });\n  };\n\n  // Get Experiment Log Run\n  const getExperimentRun = async (expid) => {\n    setLoadingRun();\n    const res = await axios.get(`${localserver}/exprun/${expid}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: res.data,\n    });\n  };\n\n  // Get Running State\n  const getRunningState = async (expid) => {\n    setLoadingState();\n    const res = await axios.get(`${localserver}/ifrun/${expid}`);\n    debug && console.log(res.data);\n    dispatch({\n      type: GET_RUNNING_STATE,\n      payload: res.data.running,\n    });\n  };\n\n  const setCurrentCommand = async (command) => {\n    // for change status\n    dispatch({\n      type: SET_CURRENT_COMMAND,\n      payload: command,\n    });\n    //return command;\n  };\n\n  // Cleaning\n  const clearExperiments = () => dispatch({ type: CLEAR_EXPERIMENTS });\n  //const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n  const clearRunDetailTree = () => dispatch({ type: CLEAR_RUNDETAIL_ON_TREE })\n\n  const cleanRunData = () => dispatch({ type: CLEAN_RUN_DATA });\n\n  const cleanPerformanceMetrics = () =>\n    dispatch({ type: CLEAN_PERFORMANCE_METRICS });\n\n  const cleanExperimentData = () => dispatch({ type: CLEAN_EXPERIMENT_DATA });\n\n  // Set Loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n  const setLoadingRun = () => dispatch({ type: SET_LOADING_RUN });\n  const setLoadingState = () => dispatch({ type: SET_LOADING_STATE });\n  const setLoadingSummary = (summExpid) =>\n    dispatch({ type: SET_LOADING_SUMMARY, payload: summExpid });\n  const setLoadingPerformanceMetrics = () =>\n    dispatch({ type: LOADING_PERFORMANCE_METRICS });\n  const setLoadingJobHistory = () => dispatch({ type: LOADING_JOB_HISTORY });\n  const setLoadingExperimentRuns = () => dispatch({ type: LOADING_EXPERIMENT_RUNS });\n  // Action Things\n  const updateExperimentTimeStamp = (timeStamp) => {\n    //console.log(timeStamp);\n    dispatch({ type: UPDATE_EXPERIMENT_TS, payload: timeStamp });\n  };\n\n  // Updates for the Selection Tool\n  // source: Tree, Graph\n  const updateCurrentSelectedTree = (selectedJob, treedata) => {\n    debug && console.log(treedata);\n    if (treedata) {\n      let currentNode = { name: selectedJob, color: \"yellow\", source: \"Tree\" };\n      const selectedNode = treedata.jobs.find(\n        (job) => job.id === currentNode.name\n      );\n      currentNode.color = selectedNode.status_color;\n      dispatch({\n        type: UPDATE_SELECTED_JOBS,\n        payload: currentNode,\n      });\n    }\n  };\n\n  const updateCurrentSelectedGraph = (selectedJob, data) => {\n    // console.log(data);\n    // console.log(selectedJob);\n    if (data) {\n      let currentNode = { name: selectedJob, color: \"yellow\" };\n      const selectedNode = data.nodes.find((node) => {\n        return node.id === currentNode.name;\n      });\n      currentNode.color = selectedNode.status_color;\n      dispatch({ type: UPDATE_SELECTED_JOBS, payload: currentNode });\n    }\n  };\n\n  const setAutoUpdateRun = (value) =>\n    dispatch({ type: SET_AUTOUPDATE_RUN, payload: value });\n\n  const activateSelectionMode = () =>\n    dispatch({ type: ACTIVATE_SELECTION_MODE });\n  const deactivateSelectionMode = () =>\n    dispatch({ type: DEACTIVATE_SELECTION_MODE });\n  const removeSelectedJob = (name) =>\n    dispatch({ type: REMOVE_SELECTED_JOB, payload: name });\n\n  return (\n    <ExperimentContext.Provider\n      value={{\n        experiments: state.experiments,\n        experiment: state.experiment,\n        summaries: state.summaries,\n        loadingSummary: state.loadingSummary,\n        loading: state.loading,\n        loadingRun: state.loadingRun,\n        loadingState: state.loadingState,\n        loadingPerformance: state.loadingPerformance,\n        jobHistory: state.jobHistory,\n        performancedata: state.performancedata,\n        experimentRuns: state.experimentRuns,\n        rundata: state.rundata,\n        currentSelected: state.currentSelected,\n        startAutoUpdateRun: state.startAutoUpdateRun,\n        experimentRunning: state.experimentRunning,\n        currentCommand: state.currentCommand,\n        canSelect: state.canSelect,\n        totalJobs: state.totalJobs,\n        expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n        expectedLoadingQuickView: state.expectedLoadingQuickView,\n        experimentRunDetailForTree: state.experimentRunDetailForTree,\n        usingRunData: state.usingRunData,\n        setAutoUpdateRun,\n        searchExperiments,\n        getCurrentRunning,\n        clearExperiments,\n        getExperiment,\n        cleanPerformanceMetrics,\n        cleanRunData,\n        getExperimentRun,\n        timeStampToDate,\n        getRunningState,\n        getExperimentPerformanceMetrics,\n        getExperimentSummary,\n        clearSummary,\n        getSummaries,\n        activateSelectionMode,\n        deactivateSelectionMode,\n        removeSelectedJob,\n        setCurrentCommand,\n        updateCurrentSelectedGraph,\n        updateCurrentSelectedTree,\n        updateExperimentTimeStamp,\n        cleanExperimentData,\n        getJobHistory,\n        getExperimentRuns,\n        getExperimentRunJobData,\n        clearRunDetailTree,\n      }}\n    >\n      {props.children}\n    </ExperimentContext.Provider>\n  );\n};\n\nexport default ExperimentState;\n"]},"metadata":{},"sourceType":"module"}