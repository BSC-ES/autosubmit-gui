{"ast":null,"code":"import { GET_TREE, SET_LOADING_TREE_PKL, SET_LOADING_TREE, SET_LOADING_TREE_REFRESH, SET_LOADING_FILTER, FILTER_TREEVIEW, PKL_TREE_LOADED, SET_FANCYTREE, CLEAN_TREE_DATA, CLEAN_TREE_PKL_DATA, SET_AUTOUPDATE_TREE_PKL, UPDATE_SELECTION_TREE, CLEAR_FILTER_TREE, SET_START_TREE_SELECTION, SET_NOTIFICATION_TITLE_TREE, SET_OFF_LOADING_TREE, INCREASE_LOADING_TREE, UPDATE_RUNDETAIL_ON_TREE } from \"../types\";\nimport { updateFancyTree, updateTreeData } from \"../treeutils\";\nimport { timeStampToDate } from \"../utils\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_TREE:\n      return { ...state,\n        treedata: action.payload,\n        loadingTree: false,\n        enabledTreeSearch: true,\n        elapsedLoadingTree: 1\n      };\n\n    case SET_LOADING_TREE_PKL:\n      return { ...state,\n        loadingTreePkl: true\n      };\n\n    case SET_LOADING_TREE:\n      return { ...state,\n        loadingTree: true,\n        enabledTreeSearch: false\n      };\n\n    case SET_OFF_LOADING_TREE:\n      return { ...state,\n        loadingTree: false,\n        enabledTreeSearch: false,\n        elapsedLoadingTree: 1,\n        treedata: null\n      };\n\n    case INCREASE_LOADING_TREE:\n      return { ...state,\n        elapsedLoadingTree: state.elapsedLoadingTree + 1\n      };\n\n    case SET_LOADING_TREE_REFRESH:\n      return { ...state,\n        loadingTreeRefresh: true\n      };\n\n    case SET_LOADING_FILTER:\n      return { ...state,\n        loadingFilterTree: true\n      };\n\n    case PKL_TREE_LOADED:\n      {\n        const retrievedPklTree = action.payload; //console.log(retrievedPklTree);\n        //console.log(state.treedata);\n\n        let jobs = {};\n\n        if (state.treedata !== null && retrievedPklTree.has_changed === true && retrievedPklTree.pkl_content.length > 0) {\n          // Jobs currently on state\n          let changes = \"\";\n          let changesSummarized = \"\";\n          let currentJobs = state.treedata.jobs; //console.log(currentJobs);\n\n          let referenceHeaders = state.treedata.reference;\n          let currentPackages = referenceHeaders[\"packages\"];\n          const completed_tag = referenceHeaders[\"completed_tag\"];\n          const running_tag = referenceHeaders[\"running_tag\"];\n          const queuing_tag = referenceHeaders[\"queuing_tag\"];\n          const failed_tag = referenceHeaders[\"failed_tag\"];\n          const check_mark = referenceHeaders[\"check_mark\"]; // Building dictionary of retrieved jobs\n\n          for (let j = 0, job; j < retrievedPklTree.pkl_content.length; j++) {\n            job = retrievedPklTree.pkl_content[j];\n            jobs[job.name] = job; //console.log(job.name);\n          } // Updating current jobs\n\n\n          for (let i = 0, cjob, ijob; i < currentJobs.length; i++) {\n            // Job from current jobs\n            cjob = currentJobs[i]; // Job from pkl. Name is id in treedata.\n\n            ijob = jobs[cjob.id]; //console.log(ijob);\n            // If there is a difference\n\n            if (ijob && (cjob.status_code !== ijob.status_code || cjob.minutes !== ijob.minutes || cjob.minutes_queue !== ijob.minutes_queue)) {\n              let is_change_status = false;\n              let new_status = cjob.status;\n              let old_status = ijob.status; // Detecting status change\n\n              if (cjob.status_code !== ijob.status_code) {\n                is_change_status = true;\n                new_status = ijob.status;\n                old_status = cjob.status;\n                changes += timeStampToDate(retrievedPklTree.pkl_timestamp) + \": \" + cjob.id + \" to \" + new_status + \"\\n\";\n                changesSummarized += new_status + \" : \" + cjob.id + \"\\n\";\n              }\n\n              cjob.status_code = ijob.status_code;\n              cjob.status = ijob.status;\n              cjob.status_color = ijob.status_color;\n              cjob.minutes = ijob.minutes;\n              cjob.minutes_queue = ijob.minutes_queue;\n              cjob.wrapper = ijob.wrapper;\n              cjob.out = ijob.out;\n              cjob.err = ijob.err;\n              cjob.submit = ijob.submit;\n              cjob.start = ijob.start;\n              cjob.finish = ijob.finish;\n              cjob.rm_id = ijob.rm_id; // Parents are those groups to which a job belongs in the tree\n\n              let tree_parent_wrapper = \"Wrapper: \" + ijob.wrapper;\n\n              if (!cjob.tree_parents.includes(tree_parent_wrapper)) {\n                cjob.tree_parents.push(tree_parent_wrapper);\n              } // Assign wrapper code to current job\n\n\n              cjob.wrapper_code = ijob.wrapper_id; // Building title according to retrieved data\n\n              let newTitle = ijob.title + \" \" + (cjob.parents === 0 ? retrievedPklTree.source_tag : \"\") + (cjob.children === 0 ? retrievedPklTree.target_tag : \"\") + (cjob.sync === true ? retrievedPklTree.sync_tag : \"\") + (ijob.wrapper_id !== 0 ? ijob.wrapper_tag : \"\");\n              cjob.title = newTitle; // Find the corresponding node in the existing tree\n\n              let thenode = state.fancyTree.getNodesByRef(cjob.id);\n\n              if (thenode) {\n                // Update title of all node ocurrences\n                for (let thenode_i in thenode) {\n                  thenode[thenode_i].setTitle(newTitle);\n                } // Find all parents of node\n\n\n                const parents = cjob.tree_parents; // Make sure parents contain the children\n\n                let wrapper_parent = state.fancyTree.getNodesByRef(tree_parent_wrapper); //console.log(wrapper_parent);\n\n                if (wrapper_parent && wrapper_parent.length > 0) {\n                  let children = wrapper_parent[0].children; //console.log(children);\n\n                  let found_child = false;\n\n                  for (let index_j in children) {\n                    let current_name = children[index_j].refKey; //console.log(current_name);\n\n                    if (current_name === cjob.id) {\n                      found_child = true;\n                    }\n                  } // If the job is not present in the wrapper folder, add it.\n\n\n                  if (found_child === false) {\n                    wrapper_parent[0].children.push({\n                      title: cjob.title,\n                      refKey: cjob.id,\n                      data: \"Empty\",\n                      children: []\n                    });\n                  }\n                } // Traverse parents to update title\n\n\n                for (let parent in parents) {\n                  let header_data = referenceHeaders[parents[parent]];\n\n                  if (header_data) {\n                    if (is_change_status === true) {\n                      if (new_status === \"COMPLETED\") {\n                        header_data.completed += 1;\n                      }\n\n                      if (new_status === \"RUNNING\") {\n                        header_data.running += 1;\n                      }\n\n                      if (new_status === \"QUEUING\") {\n                        header_data.queuing += 1;\n                      }\n\n                      if (new_status === \"FAILED\") {\n                        header_data.failed += 1;\n                      }\n\n                      if (old_status === \"RUNNING\") {\n                        header_data.running -= 1;\n                      }\n\n                      if (old_status === \"QUEUING\") {\n                        header_data.queuing -= 1;\n                      }\n\n                      if (old_status === \"FAILED\") {\n                        header_data.failed -= 1;\n                      }\n\n                      if (old_status === \"COMPLETED\") {\n                        header_data.completed -= 1;\n                      }\n                    } // Setting new title\n\n\n                    const new_completed_tag = completed_tag.replace(\"%C\", header_data.completed).replace(\"%T\", header_data.total).replace(\"%B\", header_data.completed === header_data.total ? \"yellow\" : \"#ffffb3\");\n                    const new_check_mark = header_data.completed === header_data.total ? check_mark : \"\";\n                    const new_running_tag = header_data.running > 0 ? running_tag.replace(\"%R\", header_data.running) : \"\";\n                    const new_queuing_tag = header_data.queuing > 0 ? queuing_tag.replace(\"%Q\", header_data.queuing) : \"\";\n                    const new_failed_tag = header_data.failed > 0 ? failed_tag.replace(\"%F\", header_data.failed) : \"\";\n                    let theparent = state.fancyTree.getNodesByRef(parents[parent]); //console.log(parent);\n\n                    if (theparent) {\n                      //Sets new title\n                      let new_title = parents[parent] + new_completed_tag + new_failed_tag + new_running_tag + new_queuing_tag + new_check_mark;\n                      theparent[0].setTitle(new_title);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          const packages_from_pkl = retrievedPklTree[\"packages\"];\n\n          for (let package_pkl of packages_from_pkl) {\n            if (!currentPackages.includes(package_pkl)) {\n              changes += timeStampToDate(retrievedPklTree.pkl_timestamp) + \": \" + package_pkl + \" has been added.\" + \"\\n\";\n              changesSummarized += \"Wrapper \" + package_pkl + \" added.\\n\"; // If a new wrapper has been found in the pkl\n              // debug && console.log(\"New wrapper found: \" + package_pkl);\n\n              currentPackages.push(package_pkl); //console.log(currentPackages);\n\n              let wrapper_pre_title = \"Wrapper: \" + package_pkl;\n              referenceHeaders[wrapper_pre_title] = {\n                completed: 0,\n                failed: 0,\n                queuing: 0,\n                running: 0,\n                total: 0\n              };\n              let header_wrapper = referenceHeaders[wrapper_pre_title]; // eslint-disable-next-line no-loop-func\n\n              let children_jobs = currentJobs.filter(function (x) {\n                return x.wrapper === package_pkl;\n              });\n              let children_list = [];\n\n              for (let k = 0; k < children_jobs.length; k++) {\n                if (children_jobs[k].status === \"COMPLETED\") {\n                  header_wrapper.completed += 1;\n                } else if (children_jobs[k].status === \"FAILED\") {\n                  header_wrapper.failed += 1;\n                } else if (children_jobs[k].status === \"QUEUING\") {\n                  header_wrapper.queuing += 1;\n                } else if (children_jobs[k].status === \"RUNNING\") {\n                  header_wrapper.running += 1;\n                }\n\n                children_list.push({\n                  title: children_jobs[k].title,\n                  refKey: children_jobs[k].id,\n                  data: \"Empty\",\n                  children: []\n                });\n              }\n\n              header_wrapper.total = children_jobs.length;\n              const new_completed_tag = completed_tag.replace(\"%C\", header_wrapper.completed).replace(\"%T\", header_wrapper.total).replace(\"%B\", header_wrapper.completed === header_wrapper.total ? \"yellow\" : \"#ffffb3\");\n              const new_check_mark = header_wrapper.completed === header_wrapper.total ? check_mark : \"\";\n              const new_running_tag = header_wrapper.running > 0 ? running_tag.replace(\"%R\", header_wrapper.running) : \"\";\n              const new_queuing_tag = header_wrapper.queuing > 0 ? queuing_tag.replace(\"%Q\", header_wrapper.queuing) : \"\";\n              const new_failed_tag = header_wrapper.failed > 0 ? failed_tag.replace(\"%F\", header_wrapper.failed) : \"\";\n              const wrapper_title = wrapper_pre_title + new_completed_tag + new_failed_tag + new_running_tag + new_queuing_tag + new_check_mark;\n              let rootNode = state.fancyTree.getRootNode(); // eslint-disable-next-line no-unused-vars\n\n              let wrapper_branch_root = rootNode.addChildren({\n                title: wrapper_title,\n                folder: true,\n                refKey: wrapper_pre_title,\n                expanded: false,\n                children: children_list\n              });\n            }\n          } // if require update\n\n\n          if (retrievedPklTree.has_changed === true) {\n            if (state.pkltreechanges) {\n              state.pkltreechanges = changes + state.pkltreechanges;\n              state.notificationTitleTree = changesSummarized; //setPklTreeChanges(changes + state.pkltreechanges);\n            } else {\n              state.pkltreechanges = changes; //setPklTreeChanges(changes);\n            }\n          }\n        }\n\n        return { ...state,\n          loadingTreeRefresh: false,\n          loadingTreePkl: false\n        };\n      }\n\n    case UPDATE_RUNDETAIL_ON_TREE:\n      const {\n        runDetail,\n        runId\n      } = action.payload;\n\n      if (state.treedata && state.fancyTree) {\n        updateTreeData(state.treedata);\n        updateFancyTree(state.fancyTree);\n      }\n\n      return { ...state\n      };\n\n    case FILTER_TREEVIEW:\n      const string = action.payload;\n\n      if (state.treedata && state.fancyTree) {\n        let count = 0;\n\n        if (string.indexOf(\"*\") > -1) {\n          const fields = string.split(\"*\");\n          let result = false;\n          count = state.fancyTree.filterNodes(function (node) {\n            let string_test = node.title;\n\n            for (let i = 0; i < fields.length; i++) {\n              if (fields[i].length > 0) {\n                if (string_test.indexOf(fields[i]) > -1) {\n                  //debug && console.log(fields[i] + \" found in \" + string_test);\n                  let found_index = string_test.indexOf(fields[i]) + fields[i].length;\n                  string_test = string_test.substring(found_index); //debug && console.log(found_index + \" in \" + string_test);\n\n                  result = true;\n                } else {\n                  // debug &&\n                  //   console.log(fields[i] + \" Not found in \" + string_test);\n                  result = false;\n                  break;\n                }\n              }\n            }\n\n            return result;\n          });\n        } else {\n          count = state.fancyTree.filterNodes(string);\n        } //debug && console.log(count);\n\n\n        state.returnFilter = count;\n      } else {\n        state.returnFilter = 0;\n      }\n\n      return { ...state,\n        loadingFilterTree: false,\n        returnFilter: action.payload\n      };\n\n    case SET_FANCYTREE:\n      return { ...state,\n        fancyTree: action.payload\n      };\n\n    case SET_AUTOUPDATE_TREE_PKL:\n      return { ...state,\n        startAutoUpdateTreePkl: action.payload\n      };\n\n    case CLEAN_TREE_DATA:\n      return { ...state,\n        treedata: null,\n        enabledTreeSearch: true,\n        loadingTree: false,\n        loadingTreePkl: false,\n        fancyTree: null,\n        returnFiler: 0,\n        elapsedLoadingTree: 1 //canSelect: false,\n\n      };\n\n    case CLEAN_TREE_PKL_DATA:\n      return { ...state,\n        startAutoUpdateTreePkl: false,\n        pkltreechanges: null\n      };\n\n    case CLEAR_FILTER_TREE:\n      if (state.treedata && state.fancyTree) {\n        state.fancyTree.clearFilter();\n      }\n\n      return { ...state,\n        returnFilter: 0\n      };\n\n    case UPDATE_SELECTION_TREE:\n      return { ...state,\n        selectedTreeNode: action.payload\n      };\n\n    case SET_START_TREE_SELECTION:\n      if (state.fancyTree) {\n        state.fancyTree.activeNode = state.fancyTree.rootNode;\n      }\n\n      return { ...state\n      };\n\n    case SET_NOTIFICATION_TITLE_TREE:\n      return { ...state,\n        notificationTitleTree: action.payload\n      };\n\n    default:\n      return null;\n  }\n});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/tree/treeReducer.js"],"names":["GET_TREE","SET_LOADING_TREE_PKL","SET_LOADING_TREE","SET_LOADING_TREE_REFRESH","SET_LOADING_FILTER","FILTER_TREEVIEW","PKL_TREE_LOADED","SET_FANCYTREE","CLEAN_TREE_DATA","CLEAN_TREE_PKL_DATA","SET_AUTOUPDATE_TREE_PKL","UPDATE_SELECTION_TREE","CLEAR_FILTER_TREE","SET_START_TREE_SELECTION","SET_NOTIFICATION_TITLE_TREE","SET_OFF_LOADING_TREE","INCREASE_LOADING_TREE","UPDATE_RUNDETAIL_ON_TREE","updateFancyTree","updateTreeData","timeStampToDate","state","action","type","treedata","payload","loadingTree","enabledTreeSearch","elapsedLoadingTree","loadingTreePkl","loadingTreeRefresh","loadingFilterTree","retrievedPklTree","jobs","has_changed","pkl_content","length","changes","changesSummarized","currentJobs","referenceHeaders","reference","currentPackages","completed_tag","running_tag","queuing_tag","failed_tag","check_mark","j","job","name","i","cjob","ijob","id","status_code","minutes","minutes_queue","is_change_status","new_status","status","old_status","pkl_timestamp","status_color","wrapper","out","err","submit","start","finish","rm_id","tree_parent_wrapper","tree_parents","includes","push","wrapper_code","wrapper_id","newTitle","title","parents","source_tag","children","target_tag","sync","sync_tag","wrapper_tag","thenode","fancyTree","getNodesByRef","thenode_i","setTitle","wrapper_parent","found_child","index_j","current_name","refKey","data","parent","header_data","completed","running","queuing","failed","new_completed_tag","replace","total","new_check_mark","new_running_tag","new_queuing_tag","new_failed_tag","theparent","new_title","packages_from_pkl","package_pkl","wrapper_pre_title","header_wrapper","children_jobs","filter","x","children_list","k","wrapper_title","rootNode","getRootNode","wrapper_branch_root","addChildren","folder","expanded","pkltreechanges","notificationTitleTree","runDetail","runId","string","count","indexOf","fields","split","result","filterNodes","node","string_test","found_index","substring","returnFilter","startAutoUpdateTreePkl","returnFiler","clearFilter","selectedTreeNode","activeNode"],"mappings":"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","sourcesContent":["import {\n  GET_TREE,\n  SET_LOADING_TREE_PKL,\n  SET_LOADING_TREE,\n  SET_LOADING_TREE_REFRESH,\n  SET_LOADING_FILTER,\n  FILTER_TREEVIEW,\n  PKL_TREE_LOADED,\n  SET_FANCYTREE,\n  CLEAN_TREE_DATA,\n  CLEAN_TREE_PKL_DATA,\n  SET_AUTOUPDATE_TREE_PKL,\n  UPDATE_SELECTION_TREE,\n  CLEAR_FILTER_TREE,\n  SET_START_TREE_SELECTION,\n  SET_NOTIFICATION_TITLE_TREE,\n  SET_OFF_LOADING_TREE,\n  INCREASE_LOADING_TREE,\n  UPDATE_RUNDETAIL_ON_TREE,\n} from \"../types\";\n\nimport { updateFancyTree, updateTreeData } from \"../treeutils\";\n\nimport { timeStampToDate } from \"../utils\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_TREE:\n      return {\n        ...state,\n        treedata: action.payload,\n        loadingTree: false,\n        enabledTreeSearch: true,\n        elapsedLoadingTree: 1,\n      };\n    case SET_LOADING_TREE_PKL:\n      return {\n        ...state,\n        loadingTreePkl: true,\n      };\n    case SET_LOADING_TREE:\n      return {\n        ...state,\n        loadingTree: true,\n        enabledTreeSearch: false,\n      };\n    case SET_OFF_LOADING_TREE:\n      return {\n        ...state,\n        loadingTree: false,\n        enabledTreeSearch: false,\n        elapsedLoadingTree: 1,\n        treedata: null,\n      };\n    case INCREASE_LOADING_TREE:\n      return {\n        ...state,\n        elapsedLoadingTree: state.elapsedLoadingTree + 1,\n      };\n    case SET_LOADING_TREE_REFRESH:\n      return {\n        ...state,\n        loadingTreeRefresh: true,\n      };\n    case SET_LOADING_FILTER:\n      return {\n        ...state,\n        loadingFilterTree: true,\n      };\n    case PKL_TREE_LOADED: {\n      const retrievedPklTree = action.payload;\n      //console.log(retrievedPklTree);\n      //console.log(state.treedata);\n      let jobs = {};\n      if (\n        state.treedata !== null &&\n        retrievedPklTree.has_changed === true &&\n        retrievedPklTree.pkl_content.length > 0\n      ) {\n        // Jobs currently on state\n        let changes = \"\";\n        let changesSummarized = \"\";\n        let currentJobs = state.treedata.jobs;\n        //console.log(currentJobs);\n        let referenceHeaders = state.treedata.reference;\n        let currentPackages = referenceHeaders[\"packages\"];\n        const completed_tag = referenceHeaders[\"completed_tag\"];\n        const running_tag = referenceHeaders[\"running_tag\"];\n        const queuing_tag = referenceHeaders[\"queuing_tag\"];\n        const failed_tag = referenceHeaders[\"failed_tag\"];\n        const check_mark = referenceHeaders[\"check_mark\"];\n\n        // Building dictionary of retrieved jobs\n        for (let j = 0, job; j < retrievedPklTree.pkl_content.length; j++) {\n          job = retrievedPklTree.pkl_content[j];\n          jobs[job.name] = job;\n          //console.log(job.name);\n        }\n        // Updating current jobs\n        for (let i = 0, cjob, ijob; i < currentJobs.length; i++) {\n          // Job from current jobs\n          cjob = currentJobs[i];\n          // Job from pkl. Name is id in treedata.\n          ijob = jobs[cjob.id];\n          //console.log(ijob);\n          // If there is a difference\n          if (\n            ijob &&\n            (cjob.status_code !== ijob.status_code ||\n              cjob.minutes !== ijob.minutes ||\n              cjob.minutes_queue !== ijob.minutes_queue)\n          ) {\n            let is_change_status = false;\n            let new_status = cjob.status;\n            let old_status = ijob.status;\n            // Detecting status change\n            if (cjob.status_code !== ijob.status_code) {\n              is_change_status = true;\n              new_status = ijob.status;\n              old_status = cjob.status;\n              changes +=\n                timeStampToDate(retrievedPklTree.pkl_timestamp) +\n                \": \" +\n                cjob.id +\n                \" to \" +\n                new_status +\n                \"\\n\";\n              changesSummarized += new_status + \" : \" + cjob.id + \"\\n\";\n            }\n            cjob.status_code = ijob.status_code;\n            cjob.status = ijob.status;\n            cjob.status_color = ijob.status_color;\n            cjob.minutes = ijob.minutes;\n            cjob.minutes_queue = ijob.minutes_queue;\n            cjob.wrapper = ijob.wrapper;\n            cjob.out = ijob.out;\n            cjob.err = ijob.err;\n            cjob.submit = ijob.submit;\n            cjob.start = ijob.start;\n            cjob.finish = ijob.finish;\n            cjob.rm_id = ijob.rm_id;\n            // Parents are those groups to which a job belongs in the tree\n            let tree_parent_wrapper = \"Wrapper: \" + ijob.wrapper;\n            if (!cjob.tree_parents.includes(tree_parent_wrapper)) {\n              cjob.tree_parents.push(tree_parent_wrapper);\n            }\n            // Assign wrapper code to current job\n            cjob.wrapper_code = ijob.wrapper_id;\n            // Building title according to retrieved data\n            let newTitle =\n              ijob.title +\n              \" \" +\n              (cjob.parents === 0 ? retrievedPklTree.source_tag : \"\") +\n              (cjob.children === 0 ? retrievedPklTree.target_tag : \"\") +\n              (cjob.sync === true ? retrievedPklTree.sync_tag : \"\") +\n              (ijob.wrapper_id !== 0 ? ijob.wrapper_tag : \"\");\n            cjob.title = newTitle;\n            // Find the corresponding node in the existing tree\n            let thenode = state.fancyTree.getNodesByRef(cjob.id);\n            if (thenode) {\n              // Update title of all node ocurrences\n              for (let thenode_i in thenode) {\n                thenode[thenode_i].setTitle(newTitle);\n              }\n              // Find all parents of node\n              const parents = cjob.tree_parents;\n              // Make sure parents contain the children\n              let wrapper_parent = state.fancyTree.getNodesByRef(\n                tree_parent_wrapper\n              );\n              //console.log(wrapper_parent);\n              if (wrapper_parent && wrapper_parent.length > 0) {\n                let children = wrapper_parent[0].children;\n                //console.log(children);\n                let found_child = false;\n                for (let index_j in children) {\n                  let current_name = children[index_j].refKey;\n                  //console.log(current_name);\n                  if (current_name === cjob.id) {\n                    found_child = true;\n                  }\n                }\n                // If the job is not present in the wrapper folder, add it.\n                if (found_child === false) {\n                  wrapper_parent[0].children.push({\n                    title: cjob.title,\n                    refKey: cjob.id,\n                    data: \"Empty\",\n                    children: [],\n                  });\n                }\n              }\n              // Traverse parents to update title\n              for (let parent in parents) {\n                let header_data = referenceHeaders[parents[parent]];\n                if (header_data) {\n                  if (is_change_status === true) {\n                    if (new_status === \"COMPLETED\") {\n                      header_data.completed += 1;\n                    }\n                    if (new_status === \"RUNNING\") {\n                      header_data.running += 1;\n                    }\n                    if (new_status === \"QUEUING\") {\n                      header_data.queuing += 1;\n                    }\n                    if (new_status === \"FAILED\") {\n                      header_data.failed += 1;\n                    }\n                    if (old_status === \"RUNNING\") {\n                      header_data.running -= 1;\n                    }\n                    if (old_status === \"QUEUING\") {\n                      header_data.queuing -= 1;\n                    }\n                    if (old_status === \"FAILED\") {\n                      header_data.failed -= 1;\n                    }\n                    if (old_status === \"COMPLETED\"){\n                      header_data.completed -= 1;\n                    }\n                  }\n                  // Setting new title\n                  const new_completed_tag = completed_tag\n                    .replace(\"%C\", header_data.completed)\n                    .replace(\"%T\", header_data.total)\n                    .replace(\n                      \"%B\",\n                      header_data.completed === header_data.total\n                        ? \"yellow\"\n                        : \"#ffffb3\"\n                    );\n                  const new_check_mark =\n                    header_data.completed === header_data.total\n                      ? check_mark\n                      : \"\";\n                  const new_running_tag =\n                    header_data.running > 0\n                      ? running_tag.replace(\"%R\", header_data.running)\n                      : \"\";\n                  const new_queuing_tag =\n                    header_data.queuing > 0\n                      ? queuing_tag.replace(\"%Q\", header_data.queuing)\n                      : \"\";\n                  const new_failed_tag =\n                    header_data.failed > 0\n                      ? failed_tag.replace(\"%F\", header_data.failed)\n                      : \"\";\n                  let theparent = state.fancyTree.getNodesByRef(\n                    parents[parent]\n                  );\n                  //console.log(parent);\n                  if (theparent) {\n                    //Sets new title\n                    let new_title =\n                      parents[parent] +\n                      new_completed_tag +\n                      new_failed_tag +\n                      new_running_tag +\n                      new_queuing_tag +\n                      new_check_mark;\n                    theparent[0].setTitle(new_title);\n                  }\n                }\n              }\n            }\n          }\n        }\n        const packages_from_pkl = retrievedPklTree[\"packages\"];\n        for (let package_pkl of packages_from_pkl) {\n          if (!currentPackages.includes(package_pkl)) {\n            changes +=\n              timeStampToDate(retrievedPklTree.pkl_timestamp) +\n              \": \" +\n              package_pkl +\n              \" has been added.\" +\n              \"\\n\";\n            changesSummarized += \"Wrapper \" + package_pkl + \" added.\\n\";\n            // If a new wrapper has been found in the pkl\n            // debug && console.log(\"New wrapper found: \" + package_pkl);\n            currentPackages.push(package_pkl);\n            //console.log(currentPackages);\n            let wrapper_pre_title = \"Wrapper: \" + package_pkl;\n            referenceHeaders[wrapper_pre_title] = {\n              completed: 0,\n              failed: 0,\n              queuing: 0,\n              running: 0,\n              total: 0,\n            };\n            let header_wrapper = referenceHeaders[wrapper_pre_title];\n            // eslint-disable-next-line no-loop-func\n            let children_jobs = currentJobs.filter(function (x) {\n              return x.wrapper === package_pkl;\n            });\n            let children_list = [];\n            for (let k = 0; k < children_jobs.length; k++) {\n              if (children_jobs[k].status === \"COMPLETED\") {\n                header_wrapper.completed += 1;\n              } else if (children_jobs[k].status === \"FAILED\") {\n                header_wrapper.failed += 1;\n              } else if (children_jobs[k].status === \"QUEUING\") {\n                header_wrapper.queuing += 1;\n              } else if (children_jobs[k].status === \"RUNNING\") {\n                header_wrapper.running += 1;\n              }\n              children_list.push({\n                title: children_jobs[k].title,\n                refKey: children_jobs[k].id,\n                data: \"Empty\",\n                children: [],\n              });\n            }\n            header_wrapper.total = children_jobs.length;\n\n            const new_completed_tag = completed_tag\n              .replace(\"%C\", header_wrapper.completed)\n              .replace(\"%T\", header_wrapper.total)\n              .replace(\n                \"%B\",\n                header_wrapper.completed === header_wrapper.total\n                  ? \"yellow\"\n                  : \"#ffffb3\"\n              );\n            const new_check_mark =\n              header_wrapper.completed === header_wrapper.total\n                ? check_mark\n                : \"\";\n            const new_running_tag =\n              header_wrapper.running > 0\n                ? running_tag.replace(\"%R\", header_wrapper.running)\n                : \"\";\n            const new_queuing_tag =\n              header_wrapper.queuing > 0\n                ? queuing_tag.replace(\"%Q\", header_wrapper.queuing)\n                : \"\";\n            const new_failed_tag =\n              header_wrapper.failed > 0\n                ? failed_tag.replace(\"%F\", header_wrapper.failed)\n                : \"\";\n            const wrapper_title =\n              wrapper_pre_title +\n              new_completed_tag +\n              new_failed_tag +\n              new_running_tag +\n              new_queuing_tag +\n              new_check_mark;\n            let rootNode = state.fancyTree.getRootNode();\n            // eslint-disable-next-line no-unused-vars\n            let wrapper_branch_root = rootNode.addChildren({\n              title: wrapper_title,\n              folder: true,\n              refKey: wrapper_pre_title,\n              expanded: false,\n              children: children_list,\n            });\n          }\n        }\n        // if require update\n        if (retrievedPklTree.has_changed === true) {\n          if (state.pkltreechanges) {\n            state.pkltreechanges = changes + state.pkltreechanges;\n            state.notificationTitleTree = changesSummarized;\n            //setPklTreeChanges(changes + state.pkltreechanges);\n          } else {\n            state.pkltreechanges = changes;\n            //setPklTreeChanges(changes);\n          }\n        }\n      }\n      return {\n        ...state,\n        loadingTreeRefresh: false,\n        loadingTreePkl: false,\n      };\n    }\n    case UPDATE_RUNDETAIL_ON_TREE:\n      const { runDetail, runId } = action.payload;\n      if (state.treedata && state.fancyTree){\n        updateTreeData(state.treedata);\n        updateFancyTree(state.fancyTree);\n      }\n      return {\n        ...state,\n      }\n    case FILTER_TREEVIEW:\n      const string = action.payload;\n      if (state.treedata && state.fancyTree) {\n        let count = 0;\n        if (string.indexOf(\"*\") > -1) {\n          const fields = string.split(\"*\");\n          let result = false;\n          count = state.fancyTree.filterNodes(function (node) {\n            let string_test = node.title;\n            for (let i = 0; i < fields.length; i++) {\n              if (fields[i].length > 0) {\n                if (string_test.indexOf(fields[i]) > -1) {\n                  //debug && console.log(fields[i] + \" found in \" + string_test);\n                  let found_index =\n                    string_test.indexOf(fields[i]) + fields[i].length;\n                  string_test = string_test.substring(found_index);\n                  //debug && console.log(found_index + \" in \" + string_test);\n                  result = true;\n                } else {\n                  // debug &&\n                  //   console.log(fields[i] + \" Not found in \" + string_test);\n                  result = false;\n                  break;\n                }\n              }\n            }\n            return result;\n          });\n        } else {\n          count = state.fancyTree.filterNodes(string);\n        }\n        //debug && console.log(count);\n        state.returnFilter = count;\n      } else {\n        state.returnFilter = 0;\n      }\n      return {\n        ...state,\n        loadingFilterTree: false,\n        returnFilter: action.payload,\n      };\n    case SET_FANCYTREE:\n      return {\n        ...state,\n        fancyTree: action.payload,\n      };\n    case SET_AUTOUPDATE_TREE_PKL:\n      return {\n        ...state,\n        startAutoUpdateTreePkl: action.payload,\n      };\n    case CLEAN_TREE_DATA:\n      return {\n        ...state,\n        treedata: null,\n        enabledTreeSearch: true,\n        loadingTree: false,\n        loadingTreePkl: false,\n        fancyTree: null,\n        returnFiler: 0,\n        elapsedLoadingTree: 1,\n        //canSelect: false,\n      };\n    case CLEAN_TREE_PKL_DATA:\n      return {\n        ...state,\n        startAutoUpdateTreePkl: false,\n        pkltreechanges: null,\n      };\n    case CLEAR_FILTER_TREE:\n      if (state.treedata && state.fancyTree) {\n        state.fancyTree.clearFilter();\n      }\n      return {\n        ...state,\n        returnFilter: 0,\n      };\n    case UPDATE_SELECTION_TREE:\n      return {\n        ...state,\n        selectedTreeNode: action.payload,\n      };\n    case SET_START_TREE_SELECTION:\n      if (state.fancyTree) {\n        state.fancyTree.activeNode = state.fancyTree.rootNode;\n      }\n      return {\n        ...state,\n      };\n    case SET_NOTIFICATION_TITLE_TREE:\n      return {\n        ...state,\n        notificationTitleTree: action.payload,\n      };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}