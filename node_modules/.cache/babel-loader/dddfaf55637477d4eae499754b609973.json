{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/statistics/StatsState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport StatsContext from \"./statsContext\";\nimport StatsReducer from \"./statsReducer\";\nimport { SET_LOADING, GET_EXPERIMENT_STATS, CLEAR_STATS, SET_ERROR_STATS } from \"../types\";\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, NOAPI } from \"../vars\";\n\nconst StatsState = props => {\n  const initialState = {\n    loading: false,\n    statdata: null,\n    ticksdata: null,\n    isError: false,\n    totaldata: null,\n    errorMessage: \"\"\n  };\n  const localserver = AUTOSUBMIT_API_SOURCE; //const localserver = \"https://earth.bsc.es/autosubmitapi/\";\n  //const localserver = \"http://84.88.185.94:8081\";\n\n  const debug = DEBUG;\n  const [state, dispatch] = useReducer(StatsReducer, initialState); // Get Experiment Stats\n\n  const getExperimentStats = async (expid, hours, type) => {\n    debug && console.log(\"Getting...\");\n\n    if (hours.length === 0) {\n      hours = 0;\n    }\n\n    if (type.length === 0) {\n      type = \"Any\";\n    }\n\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(`${localserver}/stats/${expid}/${hours}/${type}`);\n    let result = [];\n    var requestResult = null;\n    let ticks = [];\n    debug && console.log(res.data);\n\n    if (res.data) {\n      if (res.data.error === true) {\n        setIsError(true, res.data.error_message);\n      } else {\n        setIsError(false, \"\");\n      }\n\n      result.push([\"Jobs\", \"Queued\", \"Run\", \"Failed Jobs\", \"Failed Queued\", \"Fail Run\"]);\n\n      for (var i = 0; i < res.data.jobs.length; i++) {\n        result.push([{\n          v: i + 1,\n          f: res.data.jobs[i]\n        }, res.data.stats.queued[i], res.data.stats.run[i], res.data.stats.failed_jobs[i], res.data.stats.fail_queued[i], res.data.stats.fail_run[i]]);\n        ticks.push({\n          v: i + 1,\n          f: res.data.jobs[i]\n        });\n      }\n\n      requestResult = res.data;\n    } //console.log(ticks);\n    // console.log(result);\n    // console.log(requestResult);\n    // console.log(ticks);\n\n\n    dispatch({\n      type: GET_EXPERIMENT_STATS,\n      payload: {\n        result,\n        requestResult,\n        ticks\n      }\n    });\n  }; // Clear stats data\n\n\n  const clearStats = () => dispatch({\n    type: CLEAR_STATS\n  });\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setIsError = (error, msg) => {\n    dispatch({\n      type: SET_ERROR_STATS,\n      payload: {\n        error,\n        msg\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(StatsContext.Provider, {\n    value: {\n      loading: state.loading,\n      statdata: state.statdata,\n      isError: state.isError,\n      errorMessage: state.errorMessage,\n      totaldata: state.totaldata,\n      ticksdata: state.ticksdata,\n      getExperimentStats,\n      clearStats\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default StatsState;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/statistics/StatsState.js"],"names":["React","useReducer","axios","StatsContext","StatsReducer","SET_LOADING","GET_EXPERIMENT_STATS","CLEAR_STATS","SET_ERROR_STATS","AUTOSUBMIT_API_SOURCE","DEBUG","NOAPI","StatsState","props","initialState","loading","statdata","ticksdata","isError","totaldata","errorMessage","localserver","debug","state","dispatch","getExperimentStats","expid","hours","type","console","log","length","setLoading","res","get","result","requestResult","ticks","data","error","setIsError","error_message","push","i","jobs","v","f","stats","queued","run","failed_jobs","fail_queued","fail_run","payload","clearStats","msg","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport StatsContext from \"./statsContext\";\nimport StatsReducer from \"./statsReducer\";\nimport {\n  SET_LOADING,\n  GET_EXPERIMENT_STATS,\n  CLEAR_STATS,\n  SET_ERROR_STATS,\n} from \"../types\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, NOAPI } from \"../vars\";\n\nconst StatsState = (props) => {\n  const initialState = {\n    loading: false,\n    statdata: null,\n    ticksdata: null,\n    isError: false,\n    totaldata: null,\n    errorMessage: \"\",\n  };\n\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  //const localserver = \"https://earth.bsc.es/autosubmitapi/\";\n  //const localserver = \"http://84.88.185.94:8081\";\n  const debug = DEBUG;\n  const [state, dispatch] = useReducer(StatsReducer, initialState);\n\n  // Get Experiment Stats\n  const getExperimentStats = async (expid, hours, type) => {\n    debug && console.log(\"Getting...\");\n    if (hours.length === 0) {\n      hours = 0;\n    }\n    if (type.length === 0) {\n      type = \"Any\";\n    }\n\n    setLoading();\n    //cleanGraphData();\n    const res = await axios.get(\n      `${localserver}/stats/${expid}/${hours}/${type}`\n    );\n    let result = [];\n    var requestResult = null;\n    let ticks = [];\n    debug && console.log(res.data);\n    if (res.data) {\n      if (res.data.error === true) {\n        setIsError(true, res.data.error_message);\n      } else {\n        setIsError(false, \"\");\n      }\n\n      result.push([\n        \"Jobs\",\n        \"Queued\",\n        \"Run\",\n        \"Failed Jobs\",\n        \"Failed Queued\",\n        \"Fail Run\",\n      ]);\n\n      for (var i = 0; i < res.data.jobs.length; i++) {\n        result.push([\n          { v: i + 1, f: res.data.jobs[i] },\n          res.data.stats.queued[i],\n          res.data.stats.run[i],\n          res.data.stats.failed_jobs[i],\n          res.data.stats.fail_queued[i],\n          res.data.stats.fail_run[i],\n        ]);\n        ticks.push({ v: i + 1, f: res.data.jobs[i] });\n      }\n      requestResult = res.data;\n    }\n    //console.log(ticks);\n    // console.log(result);\n    // console.log(requestResult);\n    // console.log(ticks);\n    dispatch({\n      type: GET_EXPERIMENT_STATS,\n      payload: { result, requestResult, ticks },\n    });\n  };\n\n  // Clear stats data\n  const clearStats = () => dispatch({ type: CLEAR_STATS });\n\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  const setIsError = (error, msg) => {\n    dispatch({\n      type: SET_ERROR_STATS,\n      payload: { error, msg },\n    });\n  };\n\n  return (\n    <StatsContext.Provider\n      value={{\n        loading: state.loading,\n        statdata: state.statdata,\n        isError: state.isError,\n        errorMessage: state.errorMessage,\n        totaldata: state.totaldata,\n        ticksdata: state.ticksdata,\n        getExperimentStats,\n        clearStats,\n      }}\n    >\n      {props.children}\n    </StatsContext.Provider>\n  );\n};\n\nexport default StatsState;\n"]},"metadata":{},"sourceType":"module"}