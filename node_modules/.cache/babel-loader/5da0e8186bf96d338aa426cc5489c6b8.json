{"ast":null,"code":"import _slicedToArray from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,Fragment}from\"react\";import StatsContext from\"../context/statistics/statsContext\";import ExperimentContext from\"../context/experiment/experimentContext\";import Chart from\"react-google-charts\";import Spinner from\"../layout/Spinner\";import{DEBUG}from\"../context/vars\";var StatsSearch=function StatsSearch(){var statsContext=useContext(StatsContext);var experimentContext=useContext(ExperimentContext);var getExperimentStats=statsContext.getExperimentStats,statdata=statsContext.statdata,loading=statsContext.loading,clearStats=statsContext.clearStats,isError=statsContext.isError,errorMessage=statsContext.errorMessage,totaldata=statsContext.totaldata,ticksdata=statsContext.ticksdata;var experiment=experimentContext.experiment;// const data = [\n//     [\"Year\", \"Visitations\", \"Crashes\", { role: \"style\" }],\n//     [\"2010\", 10, 30, \"color: gray\"],\n//     [\"2020\", 14, 25, \"color: #76A7FA\"],\n//     [\"2030\", 16, 24, \"color: blue\"],\n//     [\"2040\", 22, 32, \"stroke-color: #703593; stroke-width: 4; fill-color: #C5A5CF\"],\n//     [\n//       \"2050\",\n//       28,\n//       23,\n//       \"stroke-color: #871B47; stroke-opacity: 0.6; stroke-width: 8; fill-color: #BC5679; fill-opacity: 0.2\"\n//     ]\n// ];\n// const jsonTicks = JSON.stringify({ticksdata});\n// console.log(jsonTicks['ticksdata'])\nvar options={chartArea:{width:\"90%\",height:\"700px\"},hAxis:{title:\"Jobs\",ticks:ticksdata//ticks: [{v:1, f:'job_1-2323'}, {v:2, f:'job_other'}],\n},vAxis:{title:\"Hours\"},legend:{position:\"top\"},explorer:{actions:[\"dragToZoom\",\"rightClickToReset\"],axis:\"horizontal\"// maxZoomIn: 4.0,\n}};// console.log(options);\nvar summary=null;if(totaldata&&totaldata.stats&&totaldata.stats.totals){summary=totaldata.stats.totals.map(function(item,index){return/*#__PURE__*/React.createElement(\"li\",{key:index},item);});// console.log(totaldata.stats.totals[0]);\n// for(var i = 0; i < totaldata.stats.totals.length; i++){\n//     console.log(totaldata.stats.totals[i]);\n//     summary += <li key={i}>{totaldata.stats.totals[i]}</li>\n// }\n}var onSubmitStats=function onSubmitStats(e){e.preventDefault();DEBUG&&console.log(experiment.expid);DEBUG&&console.log(\"Hours : \"+hour);DEBUG&&console.log(\"Type : \"+section);getExperimentStats(experiment.expid,hour,section);};var onSubmitClear=function onSubmitClear(e){e.preventDefault();setHour(\"\");setSection(\"\");clearStats();};var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),hour=_useState2[0],setHour=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),section=_useState4[0],setSection=_useState4[1];var onChangeHour=function onChangeHour(e){return setHour(e.target.value);};var onChangeSection=function onChangeSection(e){return setSection(e.target.value);};var pStyle={listStyleType:\"none\"};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4 offset-md-4 text-center\"},!statdata&&experiment&&experimentContext.loading===false&&/*#__PURE__*/React.createElement(\"form\",{onSubmit:onSubmitStats,className:\"form\"},/*#__PURE__*/React.createElement(\"div\",{className:\"input-group input-group-sm\"},/*#__PURE__*/React.createElement(\"input\",{className:\"form-control\",type:\"text\",name:\"section\",placeholder:\"Section\",onChange:onChangeSection}),/*#__PURE__*/React.createElement(\"input\",{className:\"form-control\",type:\"text\",name:\"hours\",placeholder:\"Hours\",onChange:onChangeHour}),/*#__PURE__*/React.createElement(\"div\",{className:\"input-group-append\"},/*#__PURE__*/React.createElement(\"input\",{type:\"submit\",value:\"Get Statistics\",className:\"btn btn-info\",disabled:loading})))),statdata&&/*#__PURE__*/React.createElement(\"form\",{onSubmit:onSubmitClear,className:\"form\"},/*#__PURE__*/React.createElement(\"div\",{className:\"\"},/*#__PURE__*/React.createElement(\"input\",{type:\"submit\",value:\"Clear Statistics\",className:\"btn btn-dark btn-sm\"})))),/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-12\"},!statdata&&experiment&&/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-12 p-3\"},/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"Supply a Section (Type) in the appropriate textbox to filter the jobs that will be included in the query. Also, you can also supply the Hours value that determines how many hours before the current time you want to query. Leave both empty and a query for Any Section since the date of creation of the experiment will be executed.\"),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"Press \",/*#__PURE__*/React.createElement(\"span\",{className:\"badge badge-info\"},\"Get Statistics\"),\" \",\"to generate the statistics, this will generate a Bar Chart and some extra statistics below. Drag the mouse inside the chart to zoom in; however, zoom in capabilities are not unlimited, so try to narrow your query.\")),loading&&/*#__PURE__*/React.createElement(Spinner,null),statdata&&!isError&&/*#__PURE__*/React.createElement(Chart,{chartType:\"ColumnChart\",loader:/*#__PURE__*/React.createElement(\"div\",null,\"Loading Chart\"),width:\"100%\",height:\"700px\",data:statdata,options:options}),statdata&&isError&&/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-12 text-center p-3\"},errorMessage),totaldata&&/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-8 offset-md-4 mt-2\"},totaldata&&/*#__PURE__*/React.createElement(\"ul\",{style:pStyle},summary&&summary)))));};// const experimentBuffer = {\n//   minHeight: \"100%\",\n// };\nexport default StatsSearch;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/statistics/StatsSearch.js"],"names":["React","useState","useContext","Fragment","StatsContext","ExperimentContext","Chart","Spinner","DEBUG","StatsSearch","statsContext","experimentContext","getExperimentStats","statdata","loading","clearStats","isError","errorMessage","totaldata","ticksdata","experiment","options","chartArea","width","height","hAxis","title","ticks","vAxis","legend","position","explorer","actions","axis","summary","stats","totals","map","item","index","onSubmitStats","e","preventDefault","console","log","expid","hour","section","onSubmitClear","setHour","setSection","onChangeHour","target","value","onChangeSection","pStyle","listStyleType"],"mappings":"gKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,QAAtC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,YAAP,KAAyB,oCAAzB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,yCAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,qBAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAASC,KAAT,KAAsB,iBAAtB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAMC,CAAAA,YAAY,CAAGR,UAAU,CAACE,YAAD,CAA/B,CACA,GAAMO,CAAAA,iBAAiB,CAAGT,UAAU,CAACG,iBAAD,CAApC,CAFwB,GAKtBO,CAAAA,kBALsB,CAapBF,YAboB,CAKtBE,kBALsB,CAMtBC,QANsB,CAapBH,YAboB,CAMtBG,QANsB,CAOtBC,OAPsB,CAapBJ,YAboB,CAOtBI,OAPsB,CAQtBC,UARsB,CAapBL,YAboB,CAQtBK,UARsB,CAStBC,OATsB,CAapBN,YAboB,CAStBM,OATsB,CAUtBC,YAVsB,CAapBP,YAboB,CAUtBO,YAVsB,CAWtBC,SAXsB,CAapBR,YAboB,CAWtBQ,SAXsB,CAYtBC,SAZsB,CAapBT,YAboB,CAYtBS,SAZsB,IAchBC,CAAAA,UAdgB,CAcDT,iBAdC,CAchBS,UAdgB,CAgBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,GAAMC,CAAAA,OAAO,CAAG,CACdC,SAAS,CAAE,CAAEC,KAAK,CAAE,KAAT,CAAgBC,MAAM,CAAE,OAAxB,CADG,CAEdC,KAAK,CAAE,CACLC,KAAK,CAAE,MADF,CAELC,KAAK,CAAER,SAAW;AAFb,CAFO,CAMdS,KAAK,CAAE,CACLF,KAAK,CAAE,OADF,CANO,CASdG,MAAM,CAAE,CACNC,QAAQ,CAAE,KADJ,CATM,CAYdC,QAAQ,CAAE,CACRC,OAAO,CAAE,CAAC,YAAD,CAAe,mBAAf,CADD,CAERC,IAAI,CAAE,YACN;AAHQ,CAZI,CAAhB,CAmBA;AAEA,GAAIC,CAAAA,OAAO,CAAG,IAAd,CACA,GAAIhB,SAAS,EAAIA,SAAS,CAACiB,KAAvB,EAAgCjB,SAAS,CAACiB,KAAV,CAAgBC,MAApD,CAA4D,CAC1DF,OAAO,CAAGhB,SAAS,CAACiB,KAAV,CAAgBC,MAAhB,CAAuBC,GAAvB,CAA2B,SAACC,IAAD,CAAOC,KAAP,qBACnC,0BAAI,GAAG,CAAEA,KAAT,EAAiBD,IAAjB,CADmC,EAA3B,CAAV,CAGA;AACA;AACA;AACA;AACA;AACD,CAED,GAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,CAAD,CAAO,CAC3BA,CAAC,CAACC,cAAF,GACAlC,KAAK,EAAImC,OAAO,CAACC,GAAR,CAAYxB,UAAU,CAACyB,KAAvB,CAAT,CACArC,KAAK,EAAImC,OAAO,CAACC,GAAR,CAAY,WAAaE,IAAzB,CAAT,CACAtC,KAAK,EAAImC,OAAO,CAACC,GAAR,CAAY,UAAYG,OAAxB,CAAT,CACAnC,kBAAkB,CAACQ,UAAU,CAACyB,KAAZ,CAAmBC,IAAnB,CAAyBC,OAAzB,CAAlB,CACD,CAND,CAQA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACP,CAAD,CAAO,CAC3BA,CAAC,CAACC,cAAF,GACAO,OAAO,CAAC,EAAD,CAAP,CACAC,UAAU,CAAC,EAAD,CAAV,CACAnC,UAAU,GACX,CALD,CAzEwB,cAgFAd,QAAQ,CAAC,EAAD,CAhFR,wCAgFjB6C,IAhFiB,eAgFXG,OAhFW,8BAiFMhD,QAAQ,CAAC,EAAD,CAjFd,yCAiFjB8C,OAjFiB,eAiFRG,UAjFQ,eAkFxB,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACV,CAAD,QAAOQ,CAAAA,OAAO,CAACR,CAAC,CAACW,MAAF,CAASC,KAAV,CAAd,EAArB,CACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACb,CAAD,QAAOS,CAAAA,UAAU,CAACT,CAAC,CAACW,MAAF,CAASC,KAAV,CAAjB,EAAxB,CACA,GAAME,CAAAA,MAAM,CAAG,CACbC,aAAa,CAAE,MADF,CAAf,CAIA,mBACE,oBAAC,QAAD,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,kCAAf,EACG,CAAC3C,QAAD,EAAaO,UAAb,EAA2BT,iBAAiB,CAACG,OAAlB,GAA8B,KAAzD,eACC,4BAAM,QAAQ,CAAE0B,aAAhB,CAA+B,SAAS,CAAC,MAAzC,eACE,2BAAK,SAAS,CAAC,4BAAf,eACE,6BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,MAFP,CAGE,IAAI,CAAC,SAHP,CAIE,WAAW,CAAC,SAJd,CAKE,QAAQ,CAAEc,eALZ,EADF,cAQE,6BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,MAFP,CAGE,IAAI,CAAC,OAHP,CAIE,WAAW,CAAC,OAJd,CAKE,QAAQ,CAAEH,YALZ,EARF,cAeE,2BAAK,SAAS,CAAC,oBAAf,eACE,6BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,gBAFR,CAGE,SAAS,CAAC,cAHZ,CAIE,QAAQ,CAAErC,OAJZ,EADF,CAfF,CADF,CAFJ,CA6BGD,QAAQ,eACP,4BAAM,QAAQ,CAAEmC,aAAhB,CAA+B,SAAS,CAAC,MAAzC,eACE,2BAAK,SAAS,CAAC,EAAf,eACE,6BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,kBAFR,CAGE,SAAS,CAAC,qBAHZ,EADF,CADF,CA9BJ,CADF,cA0CE,2BAAK,SAAS,CAAC,WAAf,EACG,CAACnC,QAAD,EAAaO,UAAb,eACC,2BAAK,SAAS,CAAC,eAAf,eACE,yBAAG,SAAS,CAAC,MAAb,8UADF,cASE,yBAAG,SAAS,CAAC,MAAb,wBACQ,4BAAM,SAAS,CAAC,kBAAhB,mBADR,CACiE,GADjE,yNATF,CAFJ,CAoBGN,OAAO,eAAI,oBAAC,OAAD,MApBd,CAqBGD,QAAQ,EAAI,CAACG,OAAb,eACC,oBAAC,KAAD,EACE,SAAS,CAAC,aADZ,CAEE,MAAM,cAAE,+CAFV,CAGE,KAAK,CAAE,MAHT,CAIE,MAAM,CAAE,OAJV,CAKE,IAAI,CAAEH,QALR,CAME,OAAO,CAAEQ,OANX,EAtBJ,CA+BGR,QAAQ,EAAIG,OAAZ,eACC,2BAAK,SAAS,CAAC,2BAAf,EAA4CC,YAA5C,CAhCJ,CAkCGC,SAAS,eACR,2BAAK,SAAS,CAAC,2BAAf,EACGA,SAAS,eAAI,0BAAI,KAAK,CAAEqC,MAAX,EAAoBrB,OAAO,EAAIA,OAA/B,CADhB,CAnCJ,CA1CF,CADF,CADF,CAwFD,CAhLD,CAkLA;AACA;AACA;AAEA,cAAezB,CAAAA,WAAf","sourcesContent":["import React, { useState, useContext, Fragment } from \"react\";\nimport StatsContext from \"../context/statistics/statsContext\";\nimport ExperimentContext from \"../context/experiment/experimentContext\";\nimport Chart from \"react-google-charts\";\nimport Spinner from \"../layout/Spinner\";\nimport { DEBUG } from \"../context/vars\";\n\nconst StatsSearch = () => {\n  const statsContext = useContext(StatsContext);\n  const experimentContext = useContext(ExperimentContext);\n\n  const {\n    getExperimentStats,\n    statdata,\n    loading,\n    clearStats,\n    isError,\n    errorMessage,\n    totaldata,\n    ticksdata,\n  } = statsContext;\n  const { experiment } = experimentContext;\n\n  // const data = [\n  //     [\"Year\", \"Visitations\", \"Crashes\", { role: \"style\" }],\n  //     [\"2010\", 10, 30, \"color: gray\"],\n  //     [\"2020\", 14, 25, \"color: #76A7FA\"],\n  //     [\"2030\", 16, 24, \"color: blue\"],\n  //     [\"2040\", 22, 32, \"stroke-color: #703593; stroke-width: 4; fill-color: #C5A5CF\"],\n  //     [\n  //       \"2050\",\n  //       28,\n  //       23,\n  //       \"stroke-color: #871B47; stroke-opacity: 0.6; stroke-width: 8; fill-color: #BC5679; fill-opacity: 0.2\"\n  //     ]\n  // ];\n\n  // const jsonTicks = JSON.stringify({ticksdata});\n  // console.log(jsonTicks['ticksdata'])\n  const options = {\n    chartArea: { width: \"90%\", height: \"700px\" },\n    hAxis: {\n      title: \"Jobs\",\n      ticks: ticksdata, //ticks: [{v:1, f:'job_1-2323'}, {v:2, f:'job_other'}],\n    },\n    vAxis: {\n      title: \"Hours\",\n    },\n    legend: {\n      position: \"top\",\n    },\n    explorer: {\n      actions: [\"dragToZoom\", \"rightClickToReset\"],\n      axis: \"horizontal\",\n      // maxZoomIn: 4.0,\n    },\n  };\n\n  // console.log(options);\n\n  var summary = null;\n  if (totaldata && totaldata.stats && totaldata.stats.totals) {\n    summary = totaldata.stats.totals.map((item, index) => (\n      <li key={index}>{item}</li>\n    ));\n    // console.log(totaldata.stats.totals[0]);\n    // for(var i = 0; i < totaldata.stats.totals.length; i++){\n    //     console.log(totaldata.stats.totals[i]);\n    //     summary += <li key={i}>{totaldata.stats.totals[i]}</li>\n    // }\n  }\n\n  const onSubmitStats = (e) => {\n    e.preventDefault();\n    DEBUG && console.log(experiment.expid);\n    DEBUG && console.log(\"Hours : \" + hour);\n    DEBUG && console.log(\"Type : \" + section);\n    getExperimentStats(experiment.expid, hour, section);\n  };\n\n  const onSubmitClear = (e) => {\n    e.preventDefault();\n    setHour(\"\");\n    setSection(\"\");\n    clearStats();\n  };\n\n  const [hour, setHour] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const onChangeHour = (e) => setHour(e.target.value);\n  const onChangeSection = (e) => setSection(e.target.value);\n  const pStyle = {\n    listStyleType: \"none\",\n  };\n\n  return (\n    <Fragment>\n      <div className='row'>\n        <div className='col-md-4 offset-md-4 text-center'>\n          {!statdata && experiment && experimentContext.loading === false && (\n            <form onSubmit={onSubmitStats} className='form'>\n              <div className='input-group input-group-sm'>\n                <input\n                  className='form-control'\n                  type='text'\n                  name='section'\n                  placeholder='Section'\n                  onChange={onChangeSection}\n                />\n                <input\n                  className='form-control'\n                  type='text'\n                  name='hours'\n                  placeholder='Hours'\n                  onChange={onChangeHour}\n                />\n                <div className='input-group-append'>\n                  <input\n                    type='submit'\n                    value='Get Statistics'\n                    className='btn btn-info'\n                    disabled={loading}\n                  />\n                </div>\n              </div>\n            </form>\n          )}\n          {statdata && (\n            <form onSubmit={onSubmitClear} className='form'>\n              <div className=''>\n                <input\n                  type='submit'\n                  value='Clear Statistics'\n                  className='btn btn-dark btn-sm'\n                />\n              </div>\n            </form>\n          )}\n        </div>\n        <div className='col-md-12'>\n          {!statdata && experiment && (\n            <div className='col-md-12 p-3'>\n              <p className='lead'>\n                Supply a Section (Type) in the appropriate textbox to filter the\n                jobs that will be included in the query. Also, you can also\n                supply the Hours value that determines how many hours before the\n                current time you want to query. Leave both empty and a query for\n                Any Section since the date of creation of the experiment will be\n                executed.\n              </p>\n              <p className='lead'>\n                Press <span className='badge badge-info'>Get Statistics</span>{\" \"}\n                to generate the statistics, this will generate a Bar Chart and\n                some extra statistics below. Drag the mouse inside the chart to\n                zoom in; however, zoom in capabilities are not unlimited, so try\n                to narrow your query.\n              </p>\n            </div>\n          )}\n          {loading && <Spinner />}\n          {statdata && !isError && (\n            <Chart\n              chartType='ColumnChart'\n              loader={<div>Loading Chart</div>}\n              width={\"100%\"}\n              height={\"700px\"}\n              data={statdata}\n              options={options}\n            />\n          )}\n          {statdata && isError && (\n            <div className='col-md-12 text-center p-3'>{errorMessage}</div>\n          )}\n          {totaldata && (\n            <div className='col-md-8 offset-md-4 mt-2'>\n              {totaldata && <ul style={pStyle}>{summary && summary}</ul>}\n            </div>\n          )}\n        </div>\n      </div>\n      {/* <div className='row' style={experimentBuffer}></div> */}\n    </Fragment>\n  );\n};\n\n// const experimentBuffer = {\n//   minHeight: \"100%\",\n// };\n\nexport default StatsSearch;\n"]},"metadata":{},"sourceType":"module"}