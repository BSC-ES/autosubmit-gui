{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/experiment/GraphNativeRep.js\";\nimport React, { Component } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport vis from \"vis-network\";\n\nclass GraphNativeRep extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateVisNodes = nodes => {\n      this.props.setVisData(nodes);\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.shouldUpdateGraph === true) {\n      return true;\n    } else if (nextProps.data && this.props.data && nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp) {\n      console.log(\"Rerendering\");\n      return true;\n    } else if (nextProps.loadingGraph !== this.props.loadingGraph) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Unmounting\");\n    this.props.cleanGraphData();\n    this.props.clearStats();\n  }\n\n  // onSubmit = (x,y) => e => {\n  //   e.preventDefault();\n  //   this.props.navigateGraph(x,y);\n  // };\n  // onLatest = (statusCode) => e => {\n  //   e.preventDefault();\n  //   this.props.navToLatest(statusCode); // Completed\n  // };\n  render() {\n    if (this.props.loadingGraph) return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n\n    if (this.props.data == null) {\n      return React.createElement(\"div\", {\n        className: \"card-body text-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Press \", React.createElement(\"span\", {\n        className: \"badge badge-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Show Graph\"), \" to see the graph representation of the experiment.\"), React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"If the experiment is running, press \", React.createElement(\"span\", {\n        className: \"badge badge-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Start Job Monitor\"), \" to start a live tracker of the changes on the experiment's jobs. This process will automatically update the graph's nodes colors and show a log of the detected changes.\"));\n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n      this.props.data.nodes.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        },\n        level: node.level\n      }));\n      this.props.data.edges.map(edge => edges_array.push({\n        from: edge.from,\n        to: edge.to\n      }));\n    }\n\n    var nodes = new vis.DataSet(nodes_array);\n    var edges = new vis.DataSet(edges_array);\n    var shouldEdge = false;\n\n    if (this.props.data.total_jobs <= 500) {\n      shouldEdge = true;\n    }\n\n    const options = {\n      edges: {\n        arrows: {\n          to: {\n            enabled: true\n          }\n        }\n      },\n      layout: {\n        improvedLayout: false,\n        hierarchical: {\n          nodeSpacing: 190,\n          blockShifting: false,\n          edgeMinimization: shouldEdge,\n          parentCentralization: true,\n          sortMethod: 'hubsize',\n          direction: 'UD' // work on vis current version\n          // nodeSpacing: 190,\n          // blockShifting: false,\n          // edgeMinimization: false,\n          // parentCentralization: true,\n          // sortMethod: 'hubsize',\n          // direction: 'UD',\n\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        hideEdgesOnDrag: true,\n        //hideEdgesOnZoom: true,\n        // multiselect: true,\n        navigationButtons: true\n      },\n      physics: {\n        enabled: false\n      },\n      nodes: {\n        shape: 'dot',\n        font: {\n          size: 10\n        }\n      }\n    };\n    const graph = {\n      nodes: nodes,\n      edges: edges\n    };\n\n    class VisNetwork extends Component {\n      shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.shouldUpdateGraph === true) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      componentDidMount() {\n        var network = new vis.Network(this.refs.myRef, this.props.graph, this.props.options);\n        this.props.setVisNetwork(network);\n        network.on(\"select\", params => {\n          console.log(params);\n\n          if (params.nodes) {\n            //console.log(params.nodes);\n            this.props.updateSelection(params.nodes);\n          }\n        });\n      } // componentWillUnmount() {\n      //     console.log(\"Unmounting\");\n      //     this.props.cleanGraphData();\n      // }\n\n\n      render() {\n        return React.createElement(\"div\", {\n          className: \"card-body p-0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          ref: \"myRef\",\n          style: experimentStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }));\n      }\n\n    }\n\n    this.updateVisNodes(nodes);\n    return React.createElement(VisNetwork, {\n      graph: graph,\n      options: options,\n      updateSelection: this.props.updateSelection,\n      shouldUpdateGraph: this.props.shouldUpdateGraph,\n      setVisNetwork: this.props.setVisNetwork,\n      cleanNavData: this.props.cleanNavData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }) // <div className=\"col-12 px-0\">\n    //     <div className=\"row\">\n    //       <div className=\"col-12\">\n    //         <VisNetwork \n    //           graph={graph} \n    //           options={options} \n    //           updateSelection={this.props.updateSelection}\n    //           shouldUpdateGraph={this.props.shouldUpdateGraph}\n    //           setVisNetwork={this.props.setVisNetwork}\n    //         />\n    //       </div>\n    //   </div>            \n    // </div>\n    ;\n  }\n\n}\n\nconst experimentStyle = {\n  height: 600\n};\nexport default GraphNativeRep;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/experiment/GraphNativeRep.js"],"names":["React","Component","Spinner","vis","GraphNativeRep","updateVisNodes","nodes","props","setVisData","shouldComponentUpdate","nextProps","nextState","shouldUpdateGraph","data","pkl_timestamp","console","log","loadingGraph","componentWillUnmount","cleanGraphData","clearStats","render","nodes_array","edges_array","edges","map","node","push","id","label","color","background","status_color","border","level","edge","from","to","DataSet","shouldEdge","total_jobs","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","blockShifting","edgeMinimization","parentCentralization","sortMethod","direction","interaction","dragNodes","hoverConnectedEdges","hideEdgesOnDrag","navigationButtons","physics","shape","font","size","graph","VisNetwork","componentDidMount","network","Network","refs","myRef","setVisNetwork","on","params","updateSelection","experimentStyle","cleanNavData","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAoBnCI,cApBmC,GAoBjBC,KAAD,IAAW;AACxB,WAAKC,KAAL,CAAWC,UAAX,CAAsBF,KAAtB;AACH,KAtBkC;AAAA;;AAEnCG,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACvC,QAAI,KAAKJ,KAAL,CAAWK,iBAAX,KAAiC,IAArC,EAA0C;AACtC,aAAO,IAAP;AACD,KAFH,MAEQ,IAAIF,SAAS,CAACG,IAAV,IAAkB,KAAKN,KAAL,CAAWM,IAA7B,IAAsCH,SAAS,CAACG,IAAV,CAAeC,aAAf,KAAiC,KAAKP,KAAL,CAAWM,IAAX,CAAgBC,aAA3F,EAA0G;AAC9GC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAO,IAAP;AACD,KAHK,MAGA,IAAIN,SAAS,CAACO,YAAV,KAA2B,KAAKV,KAAL,CAAWU,YAA1C,EAAuD;AAC3D,aAAO,IAAP;AACD,KAFK,MAED;AACH,aAAO,KAAP;AACD;AACN;;AACDC,EAAAA,oBAAoB,GAAG;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,SAAKT,KAAL,CAAWY,cAAX;AACA,SAAKZ,KAAL,CAAWa,UAAX;AACH;;AAMD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAI;AACN,QAAI,KAAKd,KAAL,CAAWU,YAAf,EAA6B,OAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;;AAC7B,QAAI,KAAKV,KAAL,CAAWM,IAAX,IAAmB,IAAvB,EAA4B;AACxB,aACI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA0B;AAAM,QAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA1B,wDADJ,EAEI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAwD;AAAM,QAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAxD,8KAFJ,CADJ;AAQH;;AAED,QAAIS,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,QAAI,KAAKhB,KAAL,CAAWM,IAAX,CAAgBP,KAAhB,KAA0B,IAA1B,IAAkC,KAAKC,KAAL,CAAWM,IAAX,CAAgBW,KAAhB,KAA0B,IAAhE,EAAsE;AAClE,WAAKjB,KAAL,CAAWM,IAAX,CAAgBP,KAAhB,CAAsBmB,GAAtB,CAA0BC,IAAI,IAAIJ,WAAW,CAACK,IAAZ,CAAiB;AAC/CC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADsC;AAE/CC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAFmC;AAG/CC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC,SAHwC;AAI/CC,QAAAA,KAAK,EAAER,IAAI,CAACQ;AAJmC,OAAjB,CAAlC;AAQA,WAAK3B,KAAL,CAAWM,IAAX,CAAgBW,KAAhB,CAAsBC,GAAtB,CAA0BU,IAAI,IAC5BZ,WAAW,CAACI,IAAZ,CAAiB;AAAES,QAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBC,QAAAA,EAAE,EAAEF,IAAI,CAACE;AAA5B,OAAjB,CADF;AAGH;;AAED,QAAI/B,KAAK,GAAG,IAAIH,GAAG,CAACmC,OAAR,CAAgBhB,WAAhB,CAAZ;AACA,QAAIE,KAAK,GAAG,IAAIrB,GAAG,CAACmC,OAAR,CAAgBf,WAAhB,CAAZ;AAEA,QAAIgB,UAAU,GAAG,KAAjB;;AACA,QAAI,KAAKhC,KAAL,CAAWM,IAAX,CAAgB2B,UAAhB,IAA8B,GAAlC,EAAsC;AAClCD,MAAAA,UAAU,GAAG,IAAb;AACH;;AACD,UAAME,OAAO,GAAG;AACZjB,MAAAA,KAAK,EAAE;AACLkB,QAAAA,MAAM,EAAE;AACNL,UAAAA,EAAE,EAAE;AAAEM,YAAAA,OAAO,EAAE;AAAX;AADE;AADH,OADK;AAMZC,MAAAA,MAAM,EAAE;AACNC,QAAAA,cAAc,EAAE,KADV;AAENC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE,GADD;AAEZC,UAAAA,aAAa,EAAE,KAFH;AAGZC,UAAAA,gBAAgB,EAAEV,UAHN;AAIZW,UAAAA,oBAAoB,EAAE,IAJV;AAKZC,UAAAA,UAAU,EAAE,SALA;AAMZC,UAAAA,SAAS,EAAE,IANC,CAOZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAbY;AAFR,OANI;AAwBZC,MAAAA,WAAW,EAAE;AACXC,QAAAA,SAAS,EAAE,IADA;AAEXC,QAAAA,mBAAmB,EAAE,IAFV;AAGXC,QAAAA,eAAe,EAAE,IAHN;AAIX;AACA;AACAC,QAAAA,iBAAiB,EAAE;AANR,OAxBD;AAgCZC,MAAAA,OAAO,EAAE;AACPf,QAAAA,OAAO,EAAE;AADF,OAhCG;AAmCZrC,MAAAA,KAAK,EAAE;AACLqD,QAAAA,KAAK,EAAE,KADF;AAELC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AADF;AAFD;AAnCK,KAAhB;AA2CA,UAAMC,KAAK,GAAG;AACVxD,MAAAA,KAAK,EAAGA,KADE;AAEVkB,MAAAA,KAAK,EAAGA;AAFE,KAAd;;AAKA,UAAMuC,UAAN,SAAyB9D,SAAzB,CAAmC;AAE/BQ,MAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACxC,YAAI,KAAKJ,KAAL,CAAWK,iBAAX,KAAiC,IAArC,EAA0C;AACrC,iBAAO,IAAP;AACH,SAFF,MAEQ;AACH,iBAAO,KAAP;AACH;AACJ;;AAEDoD,MAAAA,iBAAiB,GAAG;AAChB,YAAIC,OAAO,GAAG,IAAI9D,GAAG,CAAC+D,OAAR,CAAgB,KAAKC,IAAL,CAAUC,KAA1B,EAAiC,KAAK7D,KAAL,CAAWuD,KAA5C,EAAmD,KAAKvD,KAAL,CAAWkC,OAA9D,CAAd;AACA,aAAKlC,KAAL,CAAW8D,aAAX,CAAyBJ,OAAzB;AACAA,QAAAA,OAAO,CAACK,EAAR,CAAW,QAAX,EAAsBC,MAAD,IAAY;AAC7BxD,UAAAA,OAAO,CAACC,GAAR,CAAYuD,MAAZ;;AACA,cAAIA,MAAM,CAACjE,KAAX,EAAiB;AACb;AACA,iBAAKC,KAAL,CAAWiE,eAAX,CAA2BD,MAAM,CAACjE,KAAlC;AACH;AAEJ,SAPD;AAQH,OArB8B,CAuB/B;AACA;AACA;AACA;;;AAIAe,MAAAA,MAAM,GAAG;AACL,eACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,GAAG,EAAC,OAAT;AAAiB,UAAA,KAAK,EAAEoD,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAKH;;AApC8B;;AAuCnC,SAAKpE,cAAL,CAAoBC,KAApB;AAEA,WAEE,oBAAC,UAAD;AACE,MAAA,KAAK,EAAEwD,KADT;AAEE,MAAA,OAAO,EAAErB,OAFX;AAGE,MAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWiE,eAH9B;AAIE,MAAA,iBAAiB,EAAE,KAAKjE,KAAL,CAAWK,iBAJhC;AAKE,MAAA,aAAa,EAAE,KAAKL,KAAL,CAAW8D,aAL5B;AAME,MAAA,YAAY,EAAE,KAAK9D,KAAL,CAAWmE,YAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAvBA;AA4BH;;AA5LkC;;AAkMvC,MAAMD,eAAe,GAAG;AACpBE,EAAAA,MAAM,EAAE;AADY,CAAxB;AAKA,eAAevE,cAAf","sourcesContent":["import React, { Component } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport vis from \"vis-network\";\n\nclass GraphNativeRep extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){ \n        if (this.props.shouldUpdateGraph === true){\n            return true\n          }else if (nextProps.data && this.props.data && (nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp)){\n            console.log(\"Rerendering\")\n            return true;\n          }else if (nextProps.loadingGraph !== this.props.loadingGraph){\n            return true;    \n          }else{\n            return false;\n          }\n    }\n    componentWillUnmount() {\n        console.log(\"Unmounting\");\n        this.props.cleanGraphData();\n        this.props.clearStats();\n    }\n\n    updateVisNodes = (nodes) => {\n        this.props.setVisData(nodes);\n    };\n\n    // onSubmit = (x,y) => e => {\n    //   e.preventDefault();\n    //   this.props.navigateGraph(x,y);\n    // };\n\n    // onLatest = (statusCode) => e => {\n    //   e.preventDefault();\n    //   this.props.navToLatest(statusCode); // Completed\n    // };\n\n    render () {\n        if (this.props.loadingGraph) return <Spinner></Spinner>;\n        if (this.props.data == null){\n            return (\n                <div className=\"card-body text-left\">\n                    <p className='lead'>Press <span className='badge badge-info'>Show Graph</span> to see the graph representation of the experiment.</p>\n                    <p className='lead'>If the experiment is running, press <span className='badge badge-dark'>Start Job Monitor</span> to start a live tracker of the changes on the experiment's jobs.\n                        This process will automatically update the graph's nodes colors and show a log of the detected changes.\n                    </p>\n                </div> \n            );\n        }\n\n        var nodes_array = [];\n        var edges_array = [];\n    \n        if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n            this.props.data.nodes.map(node => nodes_array.push({\n                id: node.id,\n                label: node.label,\n                color: { background: node.status_color, border: \"black\" },\n                level: node.level,\n              })\n            );\n      \n            this.props.data.edges.map(edge => \n              edges_array.push({ from: edge.from, to: edge.to })\n            );\n        }\n    \n        var nodes = new vis.DataSet(nodes_array);\n        var edges = new vis.DataSet(edges_array);\n\n        var shouldEdge = false;\n        if (this.props.data.total_jobs <= 500){\n            shouldEdge = true;\n        }\n        const options = {\n            edges: {\n              arrows: {\n                to: { enabled: true }\n              }\n            },\n            layout: {\n              improvedLayout: false,\n              hierarchical: {\n                nodeSpacing: 190,                \n                blockShifting: false,\n                edgeMinimization: shouldEdge,\n                parentCentralization: true,\n                sortMethod: 'hubsize',\n                direction: 'UD',\n                // work on vis current version\n                // nodeSpacing: 190,\n                // blockShifting: false,\n                // edgeMinimization: false,\n                // parentCentralization: true,\n                // sortMethod: 'hubsize',\n                // direction: 'UD',\n              }\n            },            \n            interaction: {\n              dragNodes: true,\n              hoverConnectedEdges: true,\n              hideEdgesOnDrag: true,\n              //hideEdgesOnZoom: true,\n              // multiselect: true,\n              navigationButtons: true,\n            },\n            physics: {\n              enabled: false,\n            },\n            nodes: {\n              shape: 'dot',\n              font: {\n                size: 10,\n              },\n            }\n        };\n    \n        const graph = {\n            nodes : nodes,\n            edges : edges,\n        };\n\n        class VisNetwork extends Component {\n        \n            shouldComponentUpdate(nextProps, nextState){ \n               if (this.props.shouldUpdateGraph === true){\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n    \n            componentDidMount() {\n                var network = new vis.Network(this.refs.myRef, this.props.graph, this.props.options);\n                this.props.setVisNetwork(network);\n                network.on(\"select\", (params) => {\n                    console.log(params);\n                    if (params.nodes){\n                        //console.log(params.nodes);\n                        this.props.updateSelection(params.nodes);\n                    }\n                    \n                });\n            }\n    \n            // componentWillUnmount() {\n            //     console.log(\"Unmounting\");\n            //     this.props.cleanGraphData();\n            // }\n\n          \n    \n            render() {            \n                return (\n                    <div className='card-body p-0'>                    \n                        <div ref=\"myRef\" style={experimentStyle}></div>\n                    </div>\n                );\n            }\n        }\n\n        this.updateVisNodes(nodes);\n    \n        return (\n\n          <VisNetwork \n            graph={graph} \n            options={options} \n            updateSelection={this.props.updateSelection}\n            shouldUpdateGraph={this.props.shouldUpdateGraph}\n            setVisNetwork={this.props.setVisNetwork}\n            cleanNavData={this.props.cleanNavData}\n          />\n        // <div className=\"col-12 px-0\">\n        //     <div className=\"row\">\n        //       <div className=\"col-12\">\n        //         <VisNetwork \n        //           graph={graph} \n        //           options={options} \n        //           updateSelection={this.props.updateSelection}\n        //           shouldUpdateGraph={this.props.shouldUpdateGraph}\n        //           setVisNetwork={this.props.setVisNetwork}\n        //         />\n        //       </div>\n        //   </div>            \n          \n        // </div>\n        \n\n        );\n\n    }\n\n\n}\n\n\nconst experimentStyle = {\n    height: 600\n  };\n\n\nexport default GraphNativeRep;\n"]},"metadata":{},"sourceType":"module"}