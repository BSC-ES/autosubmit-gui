{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js\";\nimport React, { Component } from \"react\"; // import vis from \"vis-network\";\n// import Spinner from \"../layout/Spinner\";\n\nimport Graph from 'react-graph-vis';\n\nclass GraphRepresentation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.experimentStyle = {\n      height: 1200\n    };\n  }\n\n  // var data = {\n  //   nodes: nodes,\n  //   edges: edges\n  // };\n  componentDidMount() {\n    console.log(\"In Graph\"); // let container = document.getElementById(\"myNetwork\");\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop !== \"undefined\" || typeof this.props.edges_prop !== \"undefined\") {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      }); // var nodes = new vis.DataSet(nodes_array);\n      // var edges = new vis.DataSet(edges_array);\n      //var network = new vis.Network(container, data, options);\n      //window.test(nodes_array, edges_array);\n    }\n\n    const graph = {\n      nodes: nodes_array,\n      edges: edges_array\n    };\n    const options = {\n      edges: {\n        arrows: {\n          to: {\n            enabled: true\n          }\n        }\n      },\n      layout: {\n        randomSeed: undefined,\n        improvedLayout: true,\n        hierarchical: {\n          parentCentralization: true,\n          treeSpacing: 100,\n          nodeSpacing: 250\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false\n      } // configure: {\n      //   enabled: true,\n      //   filter: 'nodes,edges',\n      //   container: undefined,\n      //   showButton: true\n      // }\n\n    };\n    const events = {\n      select: function (event) {\n        var nodes = event.nodes,\n            edges = event.edges;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.cleanParent(); // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  render() {\n    // if (this.props.loading) {\n    //   console.log(\"Spinning\");\n    //   return <Spinner />;\n    // }\n    // console.log(\"Not Spinning\");\n    //return <div style={this.experimentStyle} id='myNetwork' />\n    React.createElement(Graph, {\n      graph: graph,\n      options: options,\n      events: events,\n      getNetwork: network => {//  if you want access to vis.js network api you can set the state in a parent component using this property\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js"],"names":["React","Component","Graph","GraphRepresentation","experimentStyle","height","componentDidMount","console","log","nodes_array","edges_array","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","graph","nodes","edges","options","arrows","enabled","layout","randomSeed","undefined","improvedLayout","hierarchical","parentCentralization","treeSpacing","nodeSpacing","interaction","dragNodes","hoverConnectedEdges","physics","events","select","event","componentWillUnmount","cleanParent","render","network"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import vis from \"vis-network\";\n// import Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\n\nclass GraphRepresentation extends Component {\n  \n\n  // var data = {\n  //   nodes: nodes,\n  //   edges: edges\n  // };\n\n\n\n  componentDidMount() {\n    console.log(\"In Graph\");\n\n    // let container = document.getElementById(\"myNetwork\");\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (\n      typeof this.props.nodes_prop !== \"undefined\" ||\n      typeof this.props.edges_prop !== \"undefined\"\n    ) {\n      this.props.nodes_prop.map(node =>\n        nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: { background: node.status_color, border: \"black\" }\n        })\n      );\n\n      this.props.edges_prop.map(edge => {\n        edges_array.push({ from: edge.from, to: edge.to });\n      });\n\n      // var nodes = new vis.DataSet(nodes_array);\n\n      // var edges = new vis.DataSet(edges_array);\n\n      //var network = new vis.Network(container, data, options);\n      //window.test(nodes_array, edges_array);\n    }\n\n      \n  const graph = {\n    nodes : nodes_array,\n    edges : edges_array\n  };\n\n\n    const options = {\n      edges: {\n        arrows: {\n          to: { enabled: true }\n        }\n      },\n      layout: {\n        randomSeed: undefined,\n        improvedLayout: true,\n        hierarchical: {\n          parentCentralization: true,\n          treeSpacing: 100,\n          nodeSpacing: 250\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false,\n      },\n      // configure: {\n      //   enabled: true,\n      //   filter: 'nodes,edges',\n      //   container: undefined,\n      //   showButton: true\n      // }\n    };\n  \n    const events = {\n      select: function(event) {\n        var { nodes, edges } = event;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.cleanParent();\n    // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  experimentStyle = {\n    height: 1200\n  };\n\n  render() {\n    // if (this.props.loading) {\n    //   console.log(\"Spinning\");\n    //   return <Spinner />;\n    // }\n    // console.log(\"Not Spinning\");\n    //return <div style={this.experimentStyle} id='myNetwork' />\n    <Graph\n      graph={graph}\n      options={options}\n      events={events}\n      getNetwork={network => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n      }}\n    />\n  }\n}\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}