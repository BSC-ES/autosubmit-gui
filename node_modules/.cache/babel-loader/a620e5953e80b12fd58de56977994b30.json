{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/Search.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({\n  searchExperiments,\n  clearExperiments,\n  showClear,\n  setAlert\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (text === '') {\n      setAlert('Please enter something', 'light');\n    } else {\n      searchExperiments(this.state.text);\n      setText('');\n    }\n  };\n\n  const onChange = e => setText(e.target.value);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Search Experiments by Expid or Description...\",\n    value: text,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Search\",\n    className: \"btn btn-dark btn-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })), showClear && React.createElement(\"button\", {\n    className: \"btn btn-light btn-block\",\n    onClick: clearExperiments,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Clear\"));\n};\n\nSearch.propTypes = {\n  searchExperiments: PropTypes.func.isRequired,\n  clearExperiments: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\nexport default Search;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/Search.js"],"names":["React","useState","PropTypes","Search","searchExperiments","clearExperiments","showClear","setAlert","text","setText","onSubmit","e","preventDefault","state","onChange","target","value","propTypes","func","isRequired","bool"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA,gBAArB;AAAuCC,EAAAA,SAAvC;AAAkDC,EAAAA;AAAlD,CAAD,KAAkE;AAAA,oBACvDN,QAAQ,CAAC,EAAD,CAD+C;AAAA;AAAA,QACxEO,IADwE;AAAA,QAClEC,OADkE;;AAG/E,QAAMC,QAAQ,GAAGC,CAAC,IAAI;AACpBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIJ,IAAI,KAAK,EAAb,EAAiB;AACfD,MAAAA,QAAQ,CAAC,wBAAD,EAA2B,OAA3B,CAAR;AACD,KAFD,MAEO;AACLH,MAAAA,iBAAiB,CAAC,KAAKS,KAAL,CAAWL,IAAZ,CAAjB;AACAC,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,GARD;;AAUA,QAAMK,QAAQ,GAAGH,CAAC,IAAIF,OAAO,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAA7B;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAEN,QAAhB;AAA0B,IAAA,SAAS,EAAC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,+CAHd;AAIE,IAAA,KAAK,EAAEF,IAJT;AAKE,IAAA,QAAQ,EAAEM,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,SAAS,EAAC,wBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,EAeGR,SAAS,IACR;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAA4C,IAAA,OAAO,EAAED,gBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAhBJ,CADF;AAuBD,CAtCD;;AAyCAF,MAAM,CAACc,SAAP,GAAmB;AACjBb,EAAAA,iBAAiB,EAAEF,SAAS,CAACgB,IAAV,CAAeC,UADjB;AAEjBd,EAAAA,gBAAgB,EAAEH,SAAS,CAACgB,IAAV,CAAeC,UAFhB;AAGjBb,EAAAA,SAAS,EAAEJ,SAAS,CAACkB,IAAV,CAAeD,UAHT;AAIjBZ,EAAAA,QAAQ,EAAEL,SAAS,CAACgB,IAAV,CAAeC;AAJR,CAAnB;AAOA,eAAehB,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({ searchExperiments, clearExperiments, showClear, setAlert }) => {\n  const [text, setText] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (text === '') {\n      setAlert('Please enter something', 'light');\n    } else {\n      searchExperiments(this.state.text);\n      setText('');\n    }\n  };\n\n  const onChange = e => setText(e.target.value);\n\n  return (\n    <div>\n      <form onSubmit={onSubmit} className='form'>\n        <input\n          type='text'\n          name='text'\n          placeholder='Search Experiments by Expid or Description...'\n          value={text}\n          onChange={onChange}\n        />\n        <input\n          type='submit'\n          value='Search'\n          className='btn btn-dark btn-block'\n        />\n      </form>\n      {showClear && (\n        <button className='btn btn-light btn-block' onClick={clearExperiments}>\n          Clear\n        </button>\n      )}\n    </div>\n  );\n}\n\n\nSearch.propTypes = {\n  searchExperiments: PropTypes.func.isRequired,\n  clearExperiments: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}