{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/Running.js\";\nimport React, { Component, Fragment } from 'react';\nimport Spinner from \"../layout/Spinner\";\n\nclass Running extends Component {\n  constructor(props) {\n    super(props);\n    this.rundata = null;\n  } // componentDidUpdate() {\n  //     //console.log(this.props.experiment.updateTime)\n  //     // if(this.props.autoUpdateLog) {\n  //     //     console.log(this.props.autoUpdateLog)\n  //     //     this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid) , this.props.experiment.updateTime);\n  //     // }        \n  // }\n\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid), this.props.experiment.updateTime * 1000); // if (this.props.rundata){\n    //     console.log('DidMount Running.')\n    // }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanRunData();\n    clearInterval(this.interval);\n  }\n\n  render() {\n    // if (this.props.loadingRun) return <Spinner />;\n    if (this.props.rundata === null) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Press the button to show the Running State.\"));\n    }\n\n    const _this$props$rundata = this.props.rundata,\n          logcontent = _this$props$rundata.logcontent,\n          error = _this$props$rundata.error,\n          error_message = _this$props$rundata.error_message,\n          found = _this$props$rundata.found,\n          logfile = _this$props$rundata.logfile,\n          lastModified = _this$props$rundata.lastModified,\n          timeStamp = _this$props$rundata.timeStamp;\n    const logitems = logcontent.map(item => React.createElement(\"li\", {\n      key: item.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, item.content)));\n\n    if (error) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, error_message), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }));\n    }\n\n    if (!found) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Running log not found. This experiment might not be currently running on Autosubmit.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Logfile: \", logfile), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Last Modified: \", lastModified), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"TimeStamp: \", timeStamp)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Showing last 40 lines of the log file:\")), React.createElement(\"pre\", {\n      className: \"bash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      style: pStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, logitems)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"End of log file.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst pStyle = {\n  'listStyleType': 'none'\n};\nexport default Running;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/Running.js"],"names":["React","Component","Fragment","Spinner","Running","constructor","props","rundata","componentDidMount","interval","setInterval","getExperimentRun","experiment","expid","updateTime","componentWillUnmount","cleanRunData","clearInterval","render","logcontent","error","error_message","found","logfile","lastModified","timeStamp","logitems","map","item","index","content","pStyle"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport Spinner from \"../layout/Spinner\";\n\nclass Running extends Component {\n    constructor(props) {\n        super(props);\n        this.rundata = null;\n    }\n    // componentDidUpdate() {\n    //     //console.log(this.props.experiment.updateTime)\n    //     // if(this.props.autoUpdateLog) {\n    //     //     console.log(this.props.autoUpdateLog)\n    //     //     this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid) , this.props.experiment.updateTime);\n    //     // }        \n    // }\n\n    componentDidMount(){\n\n        this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid) , this.props.experiment.updateTime * 1000);\n        // if (this.props.rundata){\n        //     console.log('DidMount Running.')\n        // }\n    }\n\n    componentWillUnmount() {\n        this.props.cleanRunData();\n        clearInterval(this.interval);\n    }\n    \n    \n    render() {\n        \n        \n       // if (this.props.loadingRun) return <Spinner />;\n        if (this.props.rundata === null){\n            return (\n              <Fragment>\n                <div>Press the button to show the Running State.</div>\n              </Fragment>\n            );       \n          }\n\n        const { logcontent,\n        error,\n        error_message,\n        found,\n        logfile,\n        lastModified,\n        timeStamp} = this.props.rundata;\n\n        const logitems = logcontent.map((item) =>\n            <li key={item.index}><small>{item.content}</small></li>\n        );\n        \n        if (error) {\n            return (\n                <Fragment>\n                    <div>{error_message}</div>\n                    <br></br>\n                    <hr></hr>\n                </Fragment>\n                \n            );\n        }\n        if (!found) {\n            return (\n                <Fragment>\n                    <div>Running log not found. This experiment might not be currently running on Autosubmit.</div>\n                    <br></br>\n                    <hr></hr>\n                </Fragment>                \n            );\n        }\n\n        return (\n            <div>\n                <h3>Logfile: {logfile}</h3>\n                <p>Last Modified: {lastModified}</p>\n                <p><small>TimeStamp: {timeStamp}</small></p>\n                <p><strong>Showing last 40 lines of the log file:</strong></p>\n                <pre className=\"bash\">\n                    <ul style={pStyle}>{logitems}</ul>                    \n                </pre>\n                <br></br>\n                <h3>End of log file.</h3>\n                <br></br>\n            </div>\n        )\n    }\n}\n\nconst pStyle = {\n    'listStyleType': 'none',\n};\n\n\nexport default Running;"]},"metadata":{},"sourceType":"module"}