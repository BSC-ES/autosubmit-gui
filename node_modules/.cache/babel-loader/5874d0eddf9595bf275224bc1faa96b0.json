{"ast":null,"code":"import React, { Component } from 'react';\nimport vis from 'vis-network';\n\nclass Graph extends Component {\n  componentDidMount() {\n    console.log(\"In Graph\");\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined') {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: 'black'\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      }); // var nodes = new vis.DataSet(\n      //   nodes_array\n      // );\n      // var edges = new vis.DataSet(\n      //   edges_array\n      // );\n      // var data = {\n      //   nodes: nodes,\n      //   edges: edges\n      // };\n      // var options = {\n      //   edges: {\n      //     arrows : {\n      //       to : {enabled: true}\n      //     }\n      //   },\n      //   layout: {\n      //     improvedLayout: true,\n      //     hierarchical: {\n      //       parentCentralization: true,\n      //       treeSpacing: 100,\n      //       nodeSpacing: 250,\n      //     },\n      //   },\n      //   interaction: {\n      //     dragNodes: true,\n      //     hoverConnectedEdges: true,\n      //   },\n      //   physics: {\n      //     enabled: false,\n      //   }\n      // };\n      //var network = new vis.Network({container: \"myNetwork\", data: data, options: options});\n\n      window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {\n    if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined') {\n      console.log(\"Unmounting\");\n      window.clearIt();\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/Graph.js"],"names":["React","Component","vis","Graph","componentDidMount","console","log","nodes_array","edges_array","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","window","test","componentWillUnmount","clearIt","render"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAE1BG,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,QAAI,OAAO,KAAKC,KAAL,CAAWC,UAAlB,KAAiC,WAAjC,IAAgD,OAAO,KAAKD,KAAL,CAAWE,UAAlB,KAAiC,WAArF,EAAiG;AAC/F,WAAKF,KAAL,CAAWC,UAAX,CAAsBE,GAAtB,CAA2BC,IAAD,IACxBN,WAAW,CAACO,IAAZ,CAAiB;AAACC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAV;AAAcC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAA1B;AAAiCC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC;AAAxC,OAAjB,CADF;AAKA,WAAKX,KAAL,CAAWE,UAAX,CAAsBC,GAAtB,CAA2BS,IAAD,IAAU;AAChCb,QAAAA,WAAW,CAACM,IAAZ,CAAiB;AAACQ,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAZ;AAAkBC,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAA3B,SAAjB;AACH,OAFD,EAN+F,CAU/F;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYlB,WAAZ,EAAyBC,WAAzB;AACD;AAEF;;AAEDkB,EAAAA,oBAAoB,GAAG;AACrB,QAAI,OAAO,KAAKjB,KAAL,CAAWC,UAAlB,KAAiC,WAAjC,IAAgD,OAAO,KAAKD,KAAL,CAAWE,UAAlB,KAAiC,WAArF,EAAiG;AAC/FN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAkB,MAAAA,MAAM,CAACG,OAAP;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AApEyB;;AAuE9B,eAAezB,KAAf","sourcesContent":["import React, { Component } from 'react'\nimport vis from 'vis-network'\n\nclass Graph extends Component {    \n\n    componentDidMount() {\n      console.log(\"In Graph\")\n      var nodes_array = [];\n      var edges_array = [];\n      \n      if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n        this.props.nodes_prop.map((node) => (\n          nodes_array.push({id: node.id, label: node.label, color: { background: node.status_color, border: 'black'}})\n          \n        ))\n\n        this.props.edges_prop.map((edge) => {\n            edges_array.push({from: edge.from, to: edge.to})            \n        })\n\n        // var nodes = new vis.DataSet(\n        //   nodes_array\n        // );\n  \n        // var edges = new vis.DataSet(\n        //   edges_array\n        // );\n       \n        // var data = {\n        //   nodes: nodes,\n        //   edges: edges\n        // };\n\n        // var options = {\n        //   edges: {\n        //     arrows : {\n        //       to : {enabled: true}\n        //     }\n        //   },\n        //   layout: {\n        //     improvedLayout: true,\n        //     hierarchical: {\n        //       parentCentralization: true,\n        //       treeSpacing: 100,\n        //       nodeSpacing: 250,\n        //     },\n        //   },\n        //   interaction: {\n        //     dragNodes: true,\n        //     hoverConnectedEdges: true,\n        //   },\n        //   physics: {\n        //     enabled: false,\n        //   }\n        // };\n\n        //var network = new vis.Network({container: \"myNetwork\", data: data, options: options});\n        window.test(nodes_array, edges_array);\n      }\n      \n    }\n\n    componentWillUnmount() {\n      if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n        console.log(\"Unmounting\")\n        window.clearIt();\n      }      \n    }\n\n    render() {\n      return null;\n    }\n  }\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}