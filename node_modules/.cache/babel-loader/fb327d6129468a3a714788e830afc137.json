{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{DEBUG}from\"./vars\";// graphutils.js tests are provided in GraphNativeRep.test.js\nexport var navigateGraph=function navigateGraph(Id,posx,posy){var cScale=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.9;var visNetwork=arguments.length>4?arguments[4]:undefined;DEBUG&&console.log(posx+\" \"+posy);if(cScale<=0.05)cScale=0.05;if(visNetwork){visNetwork.moveTo({position:{x:posx,y:posy},scale:cScale,//offset: {x: 30, y: 30},\nanimation:false});if(Id){visNetwork.selectNodes([Id]);}}};export var addFakeEdge=function addFakeEdge(source,target,state){var id_edge=source+\"-\"+target;DEBUG&&console.log(\"Adding fake edge from \"+source+\" to \"+target);if(state.visNetwork){var nodesIn=Object.keys(state.visNetwork.body.data.nodes._data);if(nodesIn.includes(source)&&nodesIn.includes(target)){state.visNetwork.body.data.edges.add([{id:id_edge,from:source,to:target,dashes:true,background:{enabled:true,color:\"rgba(63, 191, 63, 0.5)\"},arrows:{to:{enabled:false}}}]);}}};export var updateEdgeStyle=function updateEdgeStyle(idEdge,state){if(state.visNetwork){if(Object.keys(state.visNetwork.body.edges).includes(idEdge)){DEBUG&&console.log(\"Update style of edge \"+idEdge);state.visNetwork.body.edges[idEdge].options.dashes=false;state.visNetwork.body.edges[idEdge].options.background.enabled=true;state.visNetwork.body.edges[idEdge].options.background.color=\"rgba(63, 191, 63, 0.5)\";}}};export var updateGraphBorder=function updateGraphBorder(idChange,state){DEBUG&&console.log(\"Upate graph border of \"+idChange);if(state.visNetwork){state.visNetwork.body.nodes[idChange].options.shapeProperties.borderDashes=true;state.visNetwork.selectNodes([idChange]);}};export var updateGraphColor=function updateGraphColor(idChange,newColor,state){DEBUG&&console.log(\"Upate graph color of \"+idChange);if(state.visNetwork){state.visNetwork.body.nodes[idChange].options.color.background=newColor;state.visNetwork.selectNodes([idChange]);}};export var updateGraphShape=function updateGraphShape(idChange,shape,state){DEBUG&&console.log(\"Upate graph shape of \"+idChange);if(state.visNetwork){state.visNetwork.body.nodes[idChange].options.shape=shape;state.visNetwork.selectNodes([idChange]);}};export var navToLatest=function navToLatest(statusCode){var latest=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var cScale=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.9;var visNetwork=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var data=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var state=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var currentLevel=0;DEBUG&&console.log(\"Nav to Latest.\");//var currentNode = null;\nvar latestId=\"not found\";//console.log(state.data.nodes);\nif(data&&data.nodes){//console.log(\"Iterate\")\nif(latest===true){var _iterator=_createForOfIteratorHelper(data.nodes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var node=_step.value;if(node.status_code===statusCode){if(node.level>=currentLevel){currentLevel=node.level;//currentNode = node;\nlatestId=node.id;}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}else{currentLevel=Number.MAX_VALUE;var _iterator2=_createForOfIteratorHelper(data.nodes),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _node=_step2.value;if(_node.status_code===statusCode){if(_node.level<=currentLevel){currentLevel=_node.level;//currentNode = node;\nlatestId=_node.id;}}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}//console.log(latestId);\nvar currentPosition;if(visNetwork){currentPosition=visNetwork.getPositions([latestId]);if(currentPosition[latestId]){//console.log(\"So good so far\")\nnavigateGraph(latestId,currentPosition[latestId].x,currentPosition[latestId].y,cScale,visNetwork);state.selection=[latestId];}else{state.selection=null;}}if(currentPosition[latestId]){return true;}else{return false;}};export var findIdinGraph=function findIdinGraph(Id,state){if(state.visNetwork){var currentPosition=state.visNetwork.getPositions([Id]);if(currentPosition[Id]){return{x:currentPosition[Id].x,y:currentPosition[Id].y};}}return{x:null,y:null};};// export const searchJobInGraph = async (string, state) => {\n//   if (state.data && state.data.nodes) {\n//     const foundNodes = await state.data.nodes.filter(\n//       (node) => node.id.toUpperCase().indexOf(string) >= 0\n//     );\n//     // console.log(foundNodes);\n//     // console.log(foundNodes.length);\n//     if (foundNodes && foundNodes.length > 0) {\n//       state.foundNodes = foundNodes;\n//       state.selection = [foundNodes[0].id]\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/graphutils.js"],"names":["DEBUG","navigateGraph","Id","posx","posy","cScale","visNetwork","console","log","moveTo","position","x","y","scale","animation","selectNodes","addFakeEdge","source","target","state","id_edge","nodesIn","Object","keys","body","data","nodes","_data","includes","edges","add","id","from","to","dashes","background","enabled","color","arrows","updateEdgeStyle","idEdge","options","updateGraphBorder","idChange","shapeProperties","borderDashes","updateGraphColor","newColor","updateGraphShape","shape","navToLatest","statusCode","latest","currentLevel","latestId","node","status_code","level","Number","MAX_VALUE","currentPosition","getPositions","selection","findIdinGraph"],"mappings":"wLAAA,OAASA,KAAT,KAAsB,QAAtB,CAEA;AAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,EAAD,CAAKC,IAAL,CAAWC,IAAX,CAA8C,IAA7BC,CAAAA,MAA6B,2DAApB,GAAoB,IAAfC,CAAAA,UAAe,2CACzEN,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAYL,IAAI,CAAG,GAAP,CAAaC,IAAzB,CAAT,CACA,GAAIC,MAAM,EAAI,IAAd,CAAoBA,MAAM,CAAG,IAAT,CACpB,GAAIC,UAAJ,CAAgB,CACdA,UAAU,CAACG,MAAX,CAAkB,CAChBC,QAAQ,CAAE,CAAEC,CAAC,CAAER,IAAL,CAAWS,CAAC,CAAER,IAAd,CADM,CAEhBS,KAAK,CAAER,MAFS,CAGhB;AACAS,SAAS,CAAE,KAJK,CAAlB,EAMA,GAAIZ,EAAJ,CAAQ,CACNI,UAAU,CAACS,WAAX,CAAuB,CAACb,EAAD,CAAvB,EACD,CACF,CACF,CAdM,CAgBP,MAAO,IAAMc,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASC,MAAT,CAAiBC,KAAjB,CAA2B,CACpD,GAAIC,CAAAA,OAAO,CAAGH,MAAM,CAAG,GAAT,CAAeC,MAA7B,CACAlB,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAY,yBAA2BS,MAA3B,CAAoC,MAApC,CAA6CC,MAAzD,CAAT,CACA,GAAIC,KAAK,CAACb,UAAV,CAAsB,CACpB,GAAMe,CAAAA,OAAO,CAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBC,IAAtB,CAA2BC,KAA3B,CAAiCC,KAA7C,CAAhB,CACA,GAAIN,OAAO,CAACO,QAAR,CAAiBX,MAAjB,GAA4BI,OAAO,CAACO,QAAR,CAAiBV,MAAjB,CAAhC,CAAyD,CACvDC,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBC,IAAtB,CAA2BI,KAA3B,CAAiCC,GAAjC,CAAqC,CACnC,CACEC,EAAE,CAAEX,OADN,CAEEY,IAAI,CAAEf,MAFR,CAGEgB,EAAE,CAAEf,MAHN,CAIEgB,MAAM,CAAE,IAJV,CAKEC,UAAU,CAAE,CAAEC,OAAO,CAAE,IAAX,CAAiBC,KAAK,CAAE,wBAAxB,CALd,CAMEC,MAAM,CAAE,CAAEL,EAAE,CAAE,CAAEG,OAAO,CAAE,KAAX,CAAN,CANV,CADmC,CAArC,EAUD,CACF,CACF,CAlBM,CAoBP,MAAO,IAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,MAAD,CAASrB,KAAT,CAAmB,CAChD,GAAIA,KAAK,CAACb,UAAV,CAAsB,CACpB,GAAIgB,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBK,KAAlC,EAAyCD,QAAzC,CAAkDY,MAAlD,CAAJ,CAA+D,CAC7DxC,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAY,wBAA0BgC,MAAtC,CAAT,CACArB,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBK,KAAtB,CAA4BW,MAA5B,EAAoCC,OAApC,CAA4CP,MAA5C,CAAqD,KAArD,CACAf,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBK,KAAtB,CAA4BW,MAA5B,EAAoCC,OAApC,CAA4CN,UAA5C,CAAuDC,OAAvD,CAAiE,IAAjE,CACAjB,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBK,KAAtB,CAA4BW,MAA5B,EAAoCC,OAApC,CAA4CN,UAA5C,CAAuDE,KAAvD,CACE,wBADF,CAED,CACF,CACF,CAVM,CAYP,MAAO,IAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,QAAD,CAAWxB,KAAX,CAAqB,CACpDnB,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAY,yBAA2BmC,QAAvC,CAAT,CACA,GAAIxB,KAAK,CAACb,UAAV,CAAsB,CACpBa,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBE,KAAtB,CACEiB,QADF,EAEEF,OAFF,CAEUG,eAFV,CAE0BC,YAF1B,CAEyC,IAFzC,CAGA1B,KAAK,CAACb,UAAN,CAAiBS,WAAjB,CAA6B,CAAC4B,QAAD,CAA7B,EACD,CACF,CARM,CAUP,MAAO,IAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACH,QAAD,CAAWI,QAAX,CAAqB5B,KAArB,CAA+B,CAC7DnB,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAY,wBAA0BmC,QAAtC,CAAT,CACA,GAAIxB,KAAK,CAACb,UAAV,CAAsB,CACpBa,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBE,KAAtB,CAA4BiB,QAA5B,EAAsCF,OAAtC,CAA8CJ,KAA9C,CAAoDF,UAApD,CAAiEY,QAAjE,CACA5B,KAAK,CAACb,UAAN,CAAiBS,WAAjB,CAA6B,CAAC4B,QAAD,CAA7B,EACD,CACF,CANM,CAQP,MAAO,IAAMK,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACL,QAAD,CAAWM,KAAX,CAAkB9B,KAAlB,CAA4B,CAC1DnB,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAY,wBAA0BmC,QAAtC,CAAT,CACA,GAAIxB,KAAK,CAACb,UAAV,CAAsB,CACpBa,KAAK,CAACb,UAAN,CAAiBkB,IAAjB,CAAsBE,KAAtB,CAA4BiB,QAA5B,EAAsCF,OAAtC,CAA8CQ,KAA9C,CAAsDA,KAAtD,CACA9B,KAAK,CAACb,UAAN,CAAiBS,WAAjB,CAA6B,CAAC4B,QAAD,CAA7B,EACD,CACF,CANM,CAQP,MAAO,IAAMO,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CACzBC,UADyB,CAOtB,IALHC,CAAAA,MAKG,2DALM,IAKN,IAJH/C,CAAAA,MAIG,2DAJM,GAIN,IAHHC,CAAAA,UAGG,2DAHU,IAGV,IAFHmB,CAAAA,IAEG,2DAFI,IAEJ,IADHN,CAAAA,KACG,2DADK,IACL,CACH,GAAIkC,CAAAA,YAAY,CAAG,CAAnB,CACArD,KAAK,EAAIO,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAAT,CACA;AACA,GAAI8C,CAAAA,QAAQ,CAAG,WAAf,CACA;AACA,GAAI7B,IAAI,EAAIA,IAAI,CAACC,KAAjB,CAAwB,CACtB;AACA,GAAI0B,MAAM,GAAK,IAAf,CAAqB,0CACA3B,IAAI,CAACC,KADL,YACnB,+CAA+B,IAApB6B,CAAAA,IAAoB,aAC7B,GAAIA,IAAI,CAACC,WAAL,GAAqBL,UAAzB,CAAqC,CACnC,GAAII,IAAI,CAACE,KAAL,EAAcJ,YAAlB,CAAgC,CAC9BA,YAAY,CAAGE,IAAI,CAACE,KAApB,CACA;AACAH,QAAQ,CAAGC,IAAI,CAACxB,EAAhB,CACD,CACF,CACF,CATkB,qDAUpB,CAVD,IAUO,CACLsB,YAAY,CAAGK,MAAM,CAACC,SAAtB,CADK,0CAEclC,IAAI,CAACC,KAFnB,aAEL,kDAA+B,IAApB6B,CAAAA,KAAoB,cAC7B,GAAIA,KAAI,CAACC,WAAL,GAAqBL,UAAzB,CAAqC,CACnC,GAAII,KAAI,CAACE,KAAL,EAAcJ,YAAlB,CAAgC,CAC9BA,YAAY,CAAGE,KAAI,CAACE,KAApB,CACA;AACAH,QAAQ,CAAGC,KAAI,CAACxB,EAAhB,CACD,CACF,CACF,CAVI,uDAWN,CACF,CAED;AACA,GAAI6B,CAAAA,eAAJ,CACA,GAAItD,UAAJ,CAAgB,CACdsD,eAAe,CAAGtD,UAAU,CAACuD,YAAX,CAAwB,CAACP,QAAD,CAAxB,CAAlB,CACA,GAAIM,eAAe,CAACN,QAAD,CAAnB,CAA+B,CAC7B;AACArD,aAAa,CACXqD,QADW,CAEXM,eAAe,CAACN,QAAD,CAAf,CAA0B3C,CAFf,CAGXiD,eAAe,CAACN,QAAD,CAAf,CAA0B1C,CAHf,CAIXP,MAJW,CAKXC,UALW,CAAb,CAOAa,KAAK,CAAC2C,SAAN,CAAkB,CAACR,QAAD,CAAlB,CACD,CAVD,IAUO,CACLnC,KAAK,CAAC2C,SAAN,CAAkB,IAAlB,CACD,CACF,CACD,GAAIF,eAAe,CAACN,QAAD,CAAnB,CAA+B,CAC7B,MAAO,KAAP,CACD,CAFD,IAEO,CACL,MAAO,MAAP,CACD,CACF,CA9DM,CAgEP,MAAO,IAAMS,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAC7D,EAAD,CAAKiB,KAAL,CAAe,CAC1C,GAAIA,KAAK,CAACb,UAAV,CAAsB,CACpB,GAAMsD,CAAAA,eAAe,CAAGzC,KAAK,CAACb,UAAN,CAAiBuD,YAAjB,CAA8B,CAAC3D,EAAD,CAA9B,CAAxB,CACA,GAAI0D,eAAe,CAAC1D,EAAD,CAAnB,CAAyB,CACvB,MAAO,CAAES,CAAC,CAAEiD,eAAe,CAAC1D,EAAD,CAAf,CAAoBS,CAAzB,CAA4BC,CAAC,CAAEgD,eAAe,CAAC1D,EAAD,CAAf,CAAoBU,CAAnD,CAAP,CACD,CACF,CACD,MAAO,CAAED,CAAC,CAAE,IAAL,CAAWC,CAAC,CAAE,IAAd,CAAP,CACD,CARM,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { DEBUG } from \"./vars\";\n\n// graphutils.js tests are provided in GraphNativeRep.test.js\n\nexport const navigateGraph = (Id, posx, posy, cScale = 0.9, visNetwork) => {\n  DEBUG && console.log(posx + \" \" + posy);\n  if (cScale <= 0.05) cScale = 0.05;\n  if (visNetwork) {\n    visNetwork.moveTo({\n      position: { x: posx, y: posy },\n      scale: cScale,\n      //offset: {x: 30, y: 30},\n      animation: false,\n    });\n    if (Id) {\n      visNetwork.selectNodes([Id]);\n    }\n  }\n};\n\nexport const addFakeEdge = (source, target, state) => {\n  let id_edge = source + \"-\" + target;\n  DEBUG && console.log(\"Adding fake edge from \" + source + \" to \" + target);\n  if (state.visNetwork) {\n    const nodesIn = Object.keys(state.visNetwork.body.data.nodes._data);\n    if (nodesIn.includes(source) && nodesIn.includes(target)){\n      state.visNetwork.body.data.edges.add([\n        {\n          id: id_edge,\n          from: source,\n          to: target,\n          dashes: true,\n          background: { enabled: true, color: \"rgba(63, 191, 63, 0.5)\" },\n          arrows: { to: { enabled: false } },\n        },\n      ]);\n    }    \n  }\n};\n\nexport const updateEdgeStyle = (idEdge, state) => {\n  if (state.visNetwork) {\n    if (Object.keys(state.visNetwork.body.edges).includes(idEdge)) {\n      DEBUG && console.log(\"Update style of edge \" + idEdge);\n      state.visNetwork.body.edges[idEdge].options.dashes = false;\n      state.visNetwork.body.edges[idEdge].options.background.enabled = true;\n      state.visNetwork.body.edges[idEdge].options.background.color =\n        \"rgba(63, 191, 63, 0.5)\";\n    }\n  }\n};\n\nexport const updateGraphBorder = (idChange, state) => {\n  DEBUG && console.log(\"Upate graph border of \" + idChange);\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[\n      idChange\n    ].options.shapeProperties.borderDashes = true;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\n\nexport const updateGraphColor = (idChange, newColor, state) => {\n  DEBUG && console.log(\"Upate graph color of \" + idChange);\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.color.background = newColor;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\n\nexport const updateGraphShape = (idChange, shape, state) => {\n  DEBUG && console.log(\"Upate graph shape of \" + idChange);\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.shape = shape;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\n\nexport const navToLatest = (\n  statusCode,\n  latest = true,\n  cScale = 0.9,\n  visNetwork = null,\n  data = null,\n  state = null\n) => {\n  var currentLevel = 0;\n  DEBUG && console.log(\"Nav to Latest.\");\n  //var currentNode = null;\n  var latestId = \"not found\";\n  //console.log(state.data.nodes);\n  if (data && data.nodes) {\n    //console.log(\"Iterate\")\n    if (latest === true) {\n      for (const node of data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level >= currentLevel) {\n            currentLevel = node.level;\n            //currentNode = node;\n            latestId = node.id;\n          }\n        }\n      }\n    } else {\n      currentLevel = Number.MAX_VALUE;\n      for (const node of data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level <= currentLevel) {\n            currentLevel = node.level;\n            //currentNode = node;\n            latestId = node.id;\n          }\n        }\n      }\n    }\n  }\n\n  //console.log(latestId);\n  let currentPosition;\n  if (visNetwork) {\n    currentPosition = visNetwork.getPositions([latestId]);\n    if (currentPosition[latestId]) {\n      //console.log(\"So good so far\")\n      navigateGraph(\n        latestId,\n        currentPosition[latestId].x,\n        currentPosition[latestId].y,\n        cScale,\n        visNetwork\n      );\n      state.selection = [latestId];\n    } else {\n      state.selection = null;\n    }\n  }\n  if (currentPosition[latestId]) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const findIdinGraph = (Id, state) => {\n  if (state.visNetwork) {\n    const currentPosition = state.visNetwork.getPositions([Id]);\n    if (currentPosition[Id]) {\n      return { x: currentPosition[Id].x, y: currentPosition[Id].y };\n    }\n  }\n  return { x: null, y: null };\n};\n\n// export const searchJobInGraph = async (string, state) => {\n//   if (state.data && state.data.nodes) {\n//     const foundNodes = await state.data.nodes.filter(\n//       (node) => node.id.toUpperCase().indexOf(string) >= 0\n//     );\n//     // console.log(foundNodes);\n//     // console.log(foundNodes.length);\n//     if (foundNodes && foundNodes.length > 0) {\n//       state.foundNodes = foundNodes;\n//       state.selection = [foundNodes[0].id]\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}