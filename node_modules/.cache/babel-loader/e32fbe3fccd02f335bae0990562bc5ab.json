{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/experiment/Experiments.js\";\nimport React, { useContext } from \"react\";\nimport ExperimentItem from \"./ExperimentItem\";\nimport Spinner from \"../layout/Spinner\";\nimport ExperimentContext from \"../context/experiment/experimentContext\";\n\nconst Experiments = () => {\n  const experimentContext = useContext(ExperimentContext);\n  const {\n    loading,\n    experiments\n  } = experimentContext;\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 12\n      }\n    });\n  } else {\n    // Render one Experiment Item for each item in experiments.\n    // Order them by status so the ACTIVE ones are shown first.\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row row-cols-1 row-cols-md-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }, experiments && experiments.sort((a, b) => a.status > b.status ? -1 : 1).map(experiment => /*#__PURE__*/React.createElement(ExperimentItem, {\n      key: experiment.id,\n      experiment: experiment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }))));\n  }\n}; // const experimentStyle = {\n//   display: 'grid',\n//   gridTemplateColumns: 'repeat(3, 1fr)',\n//   gridGap: '1rem'\n// };\n\n\nexport default Experiments;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/experiment/Experiments.js"],"names":["React","useContext","ExperimentItem","Spinner","ExperimentContext","Experiments","experimentContext","loading","experiments","sort","a","b","status","map","experiment","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,iBAAiB,GAAGL,UAAU,CAACG,iBAAD,CAApC;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BF,iBAAjC;;AACA,MAAIC,OAAJ,EAAa;AACX,wBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL;AACA;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,WAAW,IACVA,WAAW,CACRC,IADH,CACQ,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAAb,GAAsB,CAAC,CAAvB,GAA2B,CAD9C,EAEGC,GAFH,CAEOC,UAAU,iBACb,oBAAC,cAAD;AAAgB,MAAA,GAAG,EAAEA,UAAU,CAACC,EAAhC;AAAoC,MAAA,UAAU,EAAED,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAFJ,CADF,CADF;AAYD;AACF,CArBD,C,CAuBA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,WAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport ExperimentItem from \"./ExperimentItem\";\nimport Spinner from \"../layout/Spinner\";\nimport ExperimentContext from \"../context/experiment/experimentContext\";\n\nconst Experiments = () => {\n  const experimentContext = useContext(ExperimentContext);\n  const { loading, experiments } = experimentContext;\n  if (loading) {\n    return <Spinner />;\n  } else {\n    // Render one Experiment Item for each item in experiments.\n    // Order them by status so the ACTIVE ones are shown first.\n    return (\n      <div className='container'>        \n        <div className='row row-cols-1 row-cols-md-3'>\n          {experiments &&\n            experiments\n              .sort((a, b) => (a.status > b.status ? -1 : 1))\n              .map(experiment => (\n                <ExperimentItem key={experiment.id} experiment={experiment} />\n              ))}\n        </div>\n      </div>\n    );\n  }\n};\n\n// const experimentStyle = {\n//   display: 'grid',\n//   gridTemplateColumns: 'repeat(3, 1fr)',\n//   gridGap: '1rem'\n// };\n\nexport default Experiments;\n"]},"metadata":{},"sourceType":"module"}