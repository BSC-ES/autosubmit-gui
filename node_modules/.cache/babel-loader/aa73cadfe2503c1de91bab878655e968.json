{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphNativeRep.js\";\nimport React, { Component } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\"; // import ExperimentContext from '../context/experiment/experimentContext';\n\nimport vis from \"vis\";\n\nclass GraphNativeRep extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.shouldUpdateGraph === true) {\n      return true;\n    } else if (nextProps.data && this.props.data && nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp) {\n      console.log(\"Rerendering\");\n      return true;\n    } else if (nextProps.loadingGraph !== this.props.loadingGraph) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Unmounting\");\n    this.props.cleanGraphData();\n  }\n\n  render() {\n    if (this.props.loadingGraph) return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n\n    if (this.props.data == null) {\n      return React.createElement(\"div\", {\n        className: \"card-body text-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Press \", React.createElement(\"span\", {\n        className: \"badge badge-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Show Graph\"), \" to see the graph representation of the experiment.\"), React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"If the experiment is running, press \", React.createElement(\"span\", {\n        className: \"badge badge-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Start Job Monitor\"), \" to start a live tracker of the changes on the experiment's jobs. This process will automatically update the graph's nodes colors and show a log of the detected changes.\"));\n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n      this.props.data.nodes.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        } //level: node.priority,\n\n      }));\n      this.props.data.edges.map(edge => edges_array.push({\n        from: edge.from,\n        to: edge.to\n      }));\n    }\n\n    var nodes = new vis.DataSet(nodes_array);\n    var edges = new vis.DataSet(edges_array);\n    const options = {\n      edges: {\n        arrows: {\n          to: {\n            enabled: true\n          }\n        }\n      },\n      layout: {\n        improvedLayout: true,\n        hierarchical: {\n          nodeSpacing: 250,\n          edgeMinimization: false,\n          blockShifting: false,\n          parentCentralization: false,\n          direction: 'UD',\n          sortMethod: 'directed'\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        // multiselect: true,\n        navigationButtons: true\n      },\n      physics: {\n        enabled: false\n      },\n      nodes: {\n        shape: 'dot'\n      }\n    };\n    const graph = {\n      nodes: nodes,\n      edges: edges\n    };\n\n    class VisNetwork extends Component {\n      // shouldComponentUpdate(nextProps, nextState){ \n      //     if (nextProps.loadingGraph !== this.props.loadingGraph){\n      //       return true;    \n      //     }else{\n      //       return false;\n      //     }\n      //   }\n      componentDidMount() {\n        var network = new vis.Network(this.refs.myRef, this.props.graph, this.props.options);\n        network.on(\"click\", params => {\n          console.log(params);\n\n          if (params.nodes) {\n            console.log(params.nodes);\n            this.props.updateSelection(params.nodes);\n          }\n        });\n      }\n\n      componentWillUnmount() {\n        console.log(\"Unmounting\");\n        this.props.cleanGraphData();\n      }\n\n      render() {\n        return React.createElement(\"div\", {\n          className: \"card-body p-0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          ref: \"myRef\",\n          style: experimentStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }));\n      }\n\n    }\n\n    return React.createElement(VisNetwork, {\n      graph: graph,\n      options: options,\n      updateSelection: this.props.updateSelection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst experimentStyle = {\n  height: 600\n};\nexport default GraphNativeRep;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphNativeRep.js"],"names":["React","Component","Spinner","vis","GraphNativeRep","shouldComponentUpdate","nextProps","nextState","props","shouldUpdateGraph","data","pkl_timestamp","console","log","loadingGraph","componentWillUnmount","cleanGraphData","render","nodes_array","edges_array","nodes","edges","map","node","push","id","label","color","background","status_color","border","edge","from","to","DataSet","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","edgeMinimization","blockShifting","parentCentralization","direction","sortMethod","interaction","dragNodes","hoverConnectedEdges","navigationButtons","physics","shape","graph","VisNetwork","componentDidMount","network","Network","refs","myRef","on","params","updateSelection","experimentStyle","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\n// import ExperimentContext from '../context/experiment/experimentContext';\nimport vis from \"vis\";\n\nclass GraphNativeRep extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){ \n    \n        if (this.props.shouldUpdateGraph === true){\n          return true\n        }else if (nextProps.data && this.props.data && (nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp)){\n          console.log(\"Rerendering\")\n          return true;\n        }else if (nextProps.loadingGraph !== this.props.loadingGraph){\n          return true;    \n        }else{\n          return false;\n        }\n    }\n    componentWillUnmount() {\n        console.log(\"Unmounting\");\n        this.props.cleanGraphData();\n    }\n\n\n\n    render() {\n        if (this.props.loadingGraph) return <Spinner></Spinner>;\n        if (this.props.data == null){\n            return (\n                <div className=\"card-body text-left\">\n                    <p className='lead'>Press <span className='badge badge-info'>Show Graph</span> to see the graph representation of the experiment.</p>\n                    <p className='lead'>If the experiment is running, press <span className='badge badge-dark'>Start Job Monitor</span> to start a live tracker of the changes on the experiment's jobs.\n                        This process will automatically update the graph's nodes colors and show a log of the detected changes.\n                    </p>\n                </div> \n            );\n        }\n\n        var nodes_array = [];\n        var edges_array = [];\n    \n        if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n            this.props.data.nodes.map(node => nodes_array.push({\n                id: node.id,\n                label: node.label,\n                color: { background: node.status_color, border: \"black\" },\n                //level: node.priority,\n              })\n            );\n      \n            this.props.data.edges.map(edge => \n              edges_array.push({ from: edge.from, to: edge.to })\n            );\n        }\n    \n        var nodes = new vis.DataSet(nodes_array);\n        var edges = new vis.DataSet(edges_array);\n\n        const options = {\n            edges: {\n              arrows: {\n                to: { enabled: true }\n              }\n            },\n            layout: {\n              improvedLayout: true,\n              hierarchical: {\n      \n                nodeSpacing: 250,\n                edgeMinimization: false,\n                blockShifting: false,\n                parentCentralization: false,\n                direction: 'UD',\n                sortMethod: 'directed',\n              }\n            },\n            interaction: {\n              dragNodes: true,\n              hoverConnectedEdges: true,\n              // multiselect: true,\n              navigationButtons: true,\n            },\n            physics: {\n              enabled: false,\n            },\n            nodes: {\n              shape: 'dot',\n            }\n        };\n    \n        const graph = {\n            nodes : nodes,\n            edges : edges,\n        };\n\n        class VisNetwork extends Component {\n        \n            // shouldComponentUpdate(nextProps, nextState){ \n            //     if (nextProps.loadingGraph !== this.props.loadingGraph){\n            //       return true;    \n            //     }else{\n            //       return false;\n            //     }\n            //   }\n    \n            componentDidMount() {\n                var network = new vis.Network(this.refs.myRef, this.props.graph, this.props.options);\n                network.on(\"click\", (params) => {\n                    console.log(params);\n                    if (params.nodes){\n                        console.log(params.nodes);\n                        this.props.updateSelection(params.nodes);\n                    }\n                    \n                });\n            }\n    \n            componentWillUnmount() {\n                console.log(\"Unmounting\");\n                this.props.cleanGraphData();\n            }\n    \n            render() {            \n                return (\n                    <div className='card-body p-0'>                    \n                        <div ref=\"myRef\" style={experimentStyle}></div>\n                    </div>\n                );\n            }\n        }\n    \n        return <VisNetwork graph={graph} options={options} updateSelection={this.props.updateSelection}/>;\n\n    }\n\n\n  \n\n \n\n   \n  \n\n \n\n}\n\nconst experimentStyle = {\n    height: 600\n  };\n\nexport default GraphNativeRep;\n"]},"metadata":{},"sourceType":"module"}