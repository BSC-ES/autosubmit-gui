{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/Running.js\";\nimport React, { Component, Fragment } from 'react';\n\nclass Running extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = e => {\n      e.preventDefault();\n\n      if (this.props.experiment.running && this.interval) {\n        clearInterval(this.interval);\n        this.props.setAutoUpdateRun(false);\n      }\n    };\n\n    this.rundata = null;\n  } // componentDidUpdate() {\n  //     //console.log(this.props.experiment.updateTime)\n  //     // if(this.props.autoUpdateLog) {\n  //     //     console.log(this.props.autoUpdateLog)\n  //     //     this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid) , this.props.experiment.updateTime);\n  //     // }        \n  // }\n\n\n  componentDidMount() {\n    this.props.getExperimentRun(this.props.experiment.expid);\n\n    if (this.props.experiment.running) {\n      this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid), this.props.experiment.updateTime * 1000);\n    } // if (this.props.rundata){\n    //     console.log('DidMount Running.')\n    // }\n\n  }\n\n  componentWillUnmount() {\n    this.props.cleanRunData();\n\n    if (this.props.experiment.running) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    if (this.props.rundata === null) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    const _this$props$rundata = this.props.rundata,\n          logcontent = _this$props$rundata.logcontent,\n          error = _this$props$rundata.error,\n          error_message = _this$props$rundata.error_message,\n          found = _this$props$rundata.found,\n          logfile = _this$props$rundata.logfile,\n          lastModified = _this$props$rundata.lastModified,\n          timeStamp = _this$props$rundata.timeStamp;\n    const logitems = logcontent.map(item => React.createElement(\"li\", {\n      key: item.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, item.content)));\n\n    if (error) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, error_message), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    }\n\n    if (!found) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Running log not found. This experiment might not be currently running on Autosubmit.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12 px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-6 text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Logfile: \", logfile), \" \", React.createElement(\"small\", {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"(\", timeStamp, \")\")), React.createElement(\"div\", {\n      className: \"col-6 text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Last Modified: \", lastModified))), React.createElement(\"pre\", {\n      className: \"bash mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      style: pStyle,\n      className: \"p-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, logitems)), React.createElement(\"div\", {\n      className: \"text-muted text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Showing last 50 lines.\"))));\n  }\n\n}\n\nconst pStyle = {\n  'listStyleType': 'none'\n};\nexport default Running;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/Running.js"],"names":["React","Component","Fragment","Running","constructor","props","onSubmit","e","preventDefault","experiment","running","interval","clearInterval","setAutoUpdateRun","rundata","componentDidMount","getExperimentRun","expid","setInterval","updateTime","componentWillUnmount","cleanRunData","render","logcontent","error","error_message","found","logfile","lastModified","timeStamp","logitems","map","item","index","content","pStyle"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\n\nclass Running extends Component {\n    constructor(props) {\n        super(props);\n        this.rundata = null;\n    }\n    // componentDidUpdate() {\n    //     //console.log(this.props.experiment.updateTime)\n    //     // if(this.props.autoUpdateLog) {\n    //     //     console.log(this.props.autoUpdateLog)\n    //     //     this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid) , this.props.experiment.updateTime);\n    //     // }        \n    // }\n\n    componentDidMount(){\n        this.props.getExperimentRun(this.props.experiment.expid);\n        if (this.props.experiment.running) {\n            this.interval = setInterval(() => this.props.getExperimentRun(this.props.experiment.expid) , this.props.experiment.updateTime * 1000);\n        }\n        \n        // if (this.props.rundata){\n        //     console.log('DidMount Running.')\n        // }\n    }\n\n    componentWillUnmount() {\n        this.props.cleanRunData();\n        if (this.props.experiment.running) {\n            clearInterval(this.interval);\n        }        \n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        if (this.props.experiment.running && this.interval) {\n            clearInterval(this.interval);\n            this.props.setAutoUpdateRun(false);\n        }\n    }\n    \n    \n    render() {\n\n        if (this.props.rundata === null){\n            return (\n              <Fragment>\n                <div>Loading...</div>\n              </Fragment>\n            );       \n          }\n\n        const { logcontent,\n        error,\n        error_message,\n        found,\n        logfile,\n        lastModified,\n        timeStamp} = this.props.rundata;\n\n        const logitems = logcontent.map((item) =>\n            <li key={item.index}><small>{item.content}</small></li>\n        );\n        \n        if (error) {\n            return (\n                <Fragment>\n                    <div>{error_message}</div>\n                    <br></br>\n                    <hr></hr>\n                </Fragment>\n                \n            );\n        }\n        if (!found) {\n            return (\n                <Fragment>\n                    <div>Running log not found. This experiment might not be currently running on Autosubmit.</div>\n                    <br></br>\n                    <hr></hr>\n                </Fragment>                \n            );\n        }\n\n        return (\n            <div className='row'>\n                <div className='col-12 px-0'>\n                    <div className=\"row\">\n                        <div className=\"col-6 text-left\"><small>Logfile: {logfile}</small> <small className=\"text-muted\">({timeStamp})</small></div>\n                        <div className=\"col-6 text-right\"><small>Last Modified: {lastModified}</small></div>                        \n                    </div>\n\n                    {/* <p><strong>Showing last 50 lines of the log file:</strong></p> */}\n                    <pre className=\"bash mb-0\">\n                        <ul style={pStyle} className='p-0'>{logitems}</ul>                    \n                    </pre>\n                    <div className='text-muted text-center'>\n                        <small>Showing last 50 lines.</small>\n                    </div>\n                    \n\n                </div>\n                \n                {/* {this.props.startAutoUpdateRun && this.interval &&\n                    <div>\n                        <form onSubmit={this.onSubmit} className='form'>\n                        <input\n                        type='submit'\n                        value='Stop Live Update'\n                        className='btn btn-dark btn-block'\n                        // disabled={!enabledGraphSearch}\n                        />\n                        </form>\n                    </div>\n                } */}\n            </div>\n            \n        )\n    }\n}\n\nconst pStyle = {\n    'listStyleType': 'none',\n};\n\n\nexport default Running;"]},"metadata":{},"sourceType":"module"}