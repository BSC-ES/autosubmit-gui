{"ast":null,"code":"import { DEBUG } from \"./vars\";\nexport const navigateGraph = (Id, posx, posy, cScale = 0.9, visNetwork) => {\n  DEBUG && console.log(posx + \" \" + posy);\n  if (cScale <= 0.05) cScale = 0.05;\n\n  if (visNetwork) {\n    visNetwork.moveTo({\n      position: {\n        x: posx,\n        y: posy\n      },\n      scale: cScale,\n      //offset: {x: 30, y: 30},\n      animation: false\n    });\n\n    if (Id) {\n      visNetwork.selectNodes([Id]);\n    }\n  }\n};\nexport const addFakeEdge = (source, target, state) => {\n  let id_edge = source + \"-\" + target;\n  DEBUG && console.log(\"Adding fake edge from \" + source + \" to \" + target);\n\n  if (state.visNetwork) {\n    state.visNetwork.body.data.edges.add([{\n      id: id_edge,\n      from: source,\n      to: target,\n      dashes: true,\n      background: {\n        enabled: true,\n        color: \"rgba(63, 191, 63, 0.5)\"\n      },\n      arrows: {\n        to: {\n          enabled: false\n        }\n      }\n    }]);\n  }\n};\nexport const updateEdgeStyle = (idEdge, state) => {\n  if (state.visNetwork) {\n    if (Object.keys(state.visNetwork.body.edges).includes(idEdge)) {\n      DEBUG && console.log(\"Update style of edge \" + idEdge);\n      state.visNetwork.body.edges[idEdge].options.dashes = false;\n      state.visNetwork.body.edges[idEdge].options.background.enabled = true;\n      state.visNetwork.body.edges[idEdge].options.background.color = \"rgba(63, 191, 63, 0.5)\";\n    }\n  }\n};\nexport const updateGraphBorder = (idChange, state) => {\n  DEBUG && console.log(\"Upate graph border of \" + idChange);\n\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.shapeProperties.borderDashes = true;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\nexport const updateGraphColor = (idChange, newColor, state) => {\n  DEBUG && console.log(\"Upate graph color of \" + idChange);\n\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.color.background = newColor;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\nexport const updateGraphShape = (idChange, shape, state) => {\n  DEBUG && console.log(\"Upate graph shape of \" + idChange);\n\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.shape = shape;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\nexport const navToLatest = (statusCode, latest = true, cScale = 0.9, visNetwork = null, data = null, state = null) => {\n  var currentLevel = 0;\n  DEBUG && console.log(\"Nav to Latest.\"); //var currentNode = null;\n\n  var latestId = \"not found\"; //console.log(state.data.nodes);\n\n  if (data && data.nodes) {\n    //console.log(\"Iterate\")\n    if (latest === true) {\n      for (const node of data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level >= currentLevel) {\n            currentLevel = node.level; //currentNode = node;\n\n            latestId = node.id;\n          }\n        }\n      }\n    } else {\n      currentLevel = Number.MAX_VALUE;\n\n      for (const node of data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level <= currentLevel) {\n            currentLevel = node.level; //currentNode = node;\n\n            latestId = node.id;\n          }\n        }\n      }\n    }\n  } //console.log(latestId);\n\n\n  let currentPosition;\n\n  if (visNetwork) {\n    currentPosition = visNetwork.getPositions([latestId]);\n\n    if (currentPosition[latestId]) {\n      //console.log(\"So good so far\")\n      navigateGraph(latestId, currentPosition[latestId].x, currentPosition[latestId].y, cScale, visNetwork);\n      state.selection = [latestId];\n    } else {\n      state.selection = null;\n    }\n  }\n\n  if (currentPosition[latestId]) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const findIdinGraph = (Id, state) => {\n  if (state.visNetwork) {\n    const currentPosition = state.visNetwork.getPositions([Id]);\n\n    if (currentPosition[Id]) {\n      return {\n        x: currentPosition[Id].x,\n        y: currentPosition[Id].y\n      };\n    }\n  }\n\n  return {\n    x: null,\n    y: null\n  };\n}; // export const searchJobInGraph = async (string, state) => {\n//   if (state.data && state.data.nodes) {\n//     const foundNodes = await state.data.nodes.filter(\n//       (node) => node.id.toUpperCase().indexOf(string) >= 0\n//     );\n//     // console.log(foundNodes);\n//     // console.log(foundNodes.length);\n//     if (foundNodes && foundNodes.length > 0) {\n//       state.foundNodes = foundNodes;\n//       state.selection = [foundNodes[0].id]\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/graphutils.js"],"names":["DEBUG","navigateGraph","Id","posx","posy","cScale","visNetwork","console","log","moveTo","position","x","y","scale","animation","selectNodes","addFakeEdge","source","target","state","id_edge","body","data","edges","add","id","from","to","dashes","background","enabled","color","arrows","updateEdgeStyle","idEdge","Object","keys","includes","options","updateGraphBorder","idChange","nodes","shapeProperties","borderDashes","updateGraphColor","newColor","updateGraphShape","shape","navToLatest","statusCode","latest","currentLevel","latestId","node","status_code","level","Number","MAX_VALUE","currentPosition","getPositions","selection","findIdinGraph"],"mappings":"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","sourcesContent":["import { DEBUG } from \"./vars\";\nexport const navigateGraph = (Id, posx, posy, cScale = 0.9, visNetwork) => {\n  DEBUG && console.log(posx + \" \" + posy);\n  if (cScale <= 0.05) cScale = 0.05;\n  if (visNetwork) {\n    visNetwork.moveTo({\n      position: { x: posx, y: posy },\n      scale: cScale,\n      //offset: {x: 30, y: 30},\n      animation: false,\n    });\n    if (Id) {\n      visNetwork.selectNodes([Id]);\n    }\n  }\n};\n\nexport const addFakeEdge = (source, target, state) => {\n  let id_edge = source + \"-\" + target;\n  DEBUG && console.log(\"Adding fake edge from \" + source + \" to \" + target);\n  if (state.visNetwork) {\n    state.visNetwork.body.data.edges.add([\n      {\n        id: id_edge,\n        from: source,\n        to: target,\n        dashes: true,\n        background: { enabled: true, color: \"rgba(63, 191, 63, 0.5)\" },\n        arrows: { to: { enabled: false } },\n      },\n    ]);\n  }\n};\n\nexport const updateEdgeStyle = (idEdge, state) => {\n  if (state.visNetwork) {\n    if (Object.keys(state.visNetwork.body.edges).includes(idEdge)) {\n      DEBUG && console.log(\"Update style of edge \" + idEdge);\n      state.visNetwork.body.edges[idEdge].options.dashes = false;\n      state.visNetwork.body.edges[idEdge].options.background.enabled = true;\n      state.visNetwork.body.edges[idEdge].options.background.color =\n        \"rgba(63, 191, 63, 0.5)\";\n    }\n  }\n};\n\nexport const updateGraphBorder = (idChange, state) => {\n  DEBUG && console.log(\"Upate graph border of \" + idChange);\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[\n      idChange\n    ].options.shapeProperties.borderDashes = true;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\n\nexport const updateGraphColor = (idChange, newColor, state) => {\n  DEBUG && console.log(\"Upate graph color of \" + idChange);\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.color.background = newColor;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\n\nexport const updateGraphShape = (idChange, shape, state) => {\n  DEBUG && console.log(\"Upate graph shape of \" + idChange);\n  if (state.visNetwork) {\n    state.visNetwork.body.nodes[idChange].options.shape = shape;\n    state.visNetwork.selectNodes([idChange]);\n  }\n};\n\nexport const navToLatest = (\n  statusCode,\n  latest = true,\n  cScale = 0.9,\n  visNetwork = null,\n  data = null,\n  state = null\n) => {\n  var currentLevel = 0;\n  DEBUG && console.log(\"Nav to Latest.\");\n  //var currentNode = null;\n  var latestId = \"not found\";\n  //console.log(state.data.nodes);\n  if (data && data.nodes) {\n    //console.log(\"Iterate\")\n    if (latest === true) {\n      for (const node of data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level >= currentLevel) {\n            currentLevel = node.level;\n            //currentNode = node;\n            latestId = node.id;\n          }\n        }\n      }\n    } else {\n      currentLevel = Number.MAX_VALUE;\n      for (const node of data.nodes) {\n        if (node.status_code === statusCode) {\n          if (node.level <= currentLevel) {\n            currentLevel = node.level;\n            //currentNode = node;\n            latestId = node.id;\n          }\n        }\n      }\n    }\n  }\n\n  //console.log(latestId);\n  let currentPosition;\n  if (visNetwork) {\n    currentPosition = visNetwork.getPositions([latestId]);\n    if (currentPosition[latestId]) {\n      //console.log(\"So good so far\")\n      navigateGraph(\n        latestId,\n        currentPosition[latestId].x,\n        currentPosition[latestId].y,\n        cScale,\n        visNetwork\n      );\n      state.selection = [latestId];\n    } else {\n      state.selection = null;\n    }\n  }\n  if (currentPosition[latestId]) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const findIdinGraph = (Id, state) => {\n  if (state.visNetwork) {\n    const currentPosition = state.visNetwork.getPositions([Id]);\n    if (currentPosition[Id]) {\n      return { x: currentPosition[Id].x, y: currentPosition[Id].y };\n    }\n  }\n  return { x: null, y: null };\n};\n\n// export const searchJobInGraph = async (string, state) => {\n//   if (state.data && state.data.nodes) {\n//     const foundNodes = await state.data.nodes.filter(\n//       (node) => node.id.toUpperCase().indexOf(string) >= 0\n//     );\n//     // console.log(foundNodes);\n//     // console.log(foundNodes.length);\n//     if (foundNodes && foundNodes.length > 0) {\n//       state.foundNodes = foundNodes;\n//       state.selection = [foundNodes[0].id]\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}