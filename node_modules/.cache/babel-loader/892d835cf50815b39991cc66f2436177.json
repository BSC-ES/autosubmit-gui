{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphNativeRep.js\";\nimport React, { useContext } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport vis from \"vis\";\n\nconst GraphNativeRep = () => {\n  const experimentContext = useContext(ExperimentContext);\n  const data = experimentContext.data,\n        loadingGraph = experimentContext.loadingGraph;\n  if (loadingGraph) return React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  });\n\n  if (data === null) {\n    return React.createElement(\"div\", {\n      className: \"card-body text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Press \", React.createElement(\"span\", {\n      className: \"badge badge-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Show Graph\"), \" to see the graph representation of the experiment.\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"If the experiment is running, press \", React.createElement(\"span\", {\n      className: \"badge badge-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Start Job Monitor\"), \" to start a live tracker of the changes on the experiment's jobs. This process will automatically update the graph's nodes colors and show a log of the detected changes.\"));\n  }\n\n  var nodes_array = [];\n  var edges_array = [];\n\n  if (data.nodes !== null || data.edges !== null) {\n    data.nodes.map(node => nodes_array.push({\n      id: node.id,\n      label: node.label,\n      color: {\n        background: node.status_color,\n        border: \"black\"\n      } //level: node.priority,\n\n    }));\n    data.edges.map(edge => edges_array.push({\n      from: edge.from,\n      to: edge.to\n    }));\n  }\n\n  var nodes = new vis.DataSet(nodes_array);\n  var edges = new vis.DataSet(edges_array);\n  const options = {\n    edges: {\n      arrows: {\n        to: {\n          enabled: true\n        }\n      }\n    },\n    layout: {\n      improvedLayout: true,\n      hierarchical: {\n        nodeSpacing: 250,\n        edgeMinimization: false,\n        blockShifting: false,\n        parentCentralization: false,\n        direction: 'UD',\n        sortMethod: 'directed'\n      }\n    },\n    interaction: {\n      dragNodes: true,\n      hoverConnectedEdges: true,\n      // multiselect: true,\n      navigationButtons: true\n    },\n    physics: {\n      enabled: false\n    },\n    nodes: {\n      shape: 'dot'\n    }\n  };\n  const graph = {\n    nodes: nodes,\n    edges: edges\n  };\n  var VisNetwork = React.createClass({\n    displayName: \"VisNetwork\",\n\n    componentDidMount() {\n      var network = new vis.Network(this.ref.myRef, graph, options);\n    },\n\n    render: function () {\n      return React.createElement(\"div\", {\n        className: \"card-body p-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: \"myRef\",\n        style: experimentStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    }\n  });\n  return React.createElement(VisNetwork, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  });\n};\n\nconst experimentStyle = {\n  height: 600\n};\nexport default GraphNativeRep;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphNativeRep.js"],"names":["React","useContext","Spinner","ExperimentContext","vis","GraphNativeRep","experimentContext","data","loadingGraph","nodes_array","edges_array","nodes","edges","map","node","push","id","label","color","background","status_color","border","edge","from","to","DataSet","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","edgeMinimization","blockShifting","parentCentralization","direction","sortMethod","interaction","dragNodes","hoverConnectedEdges","navigationButtons","physics","shape","graph","VisNetwork","createClass","componentDidMount","network","Network","ref","myRef","render","experimentStyle","height"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport vis from \"vis\";\n\nconst GraphNativeRep = () => {\n\n    const experimentContext = useContext(ExperimentContext);    \n    const { data, loadingGraph } = experimentContext;\n    if (loadingGraph) return <Spinner></Spinner>\n    if (data === null) {\n        return (\n            <div className=\"card-body text-left\">\n                <p className='lead'>Press <span className='badge badge-info'>Show Graph</span> to see the graph representation of the experiment.</p>\n                <p className='lead'>If the experiment is running, press <span className='badge badge-dark'>Start Job Monitor</span> to start a live tracker of the changes on the experiment's jobs.\n                    This process will automatically update the graph's nodes colors and show a log of the detected changes.\n                </p>\n            </div> \n        );\n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (data.nodes !== null || data.edges !== null) {\n        data.nodes.map(node => nodes_array.push({\n            id: node.id,\n            label: node.label,\n            color: { background: node.status_color, border: \"black\" },\n            //level: node.priority,\n          })\n        );\n  \n        data.edges.map(edge => \n          edges_array.push({ from: edge.from, to: edge.to })\n        );\n    }\n\n    var nodes = new vis.DataSet(nodes_array);\n    var edges = new vis.DataSet(edges_array);\n\n    const options = {\n        edges: {\n          arrows: {\n            to: { enabled: true }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n  \n            nodeSpacing: 250,\n            edgeMinimization: false,\n            blockShifting: false,\n            parentCentralization: false,\n            direction: 'UD',\n            sortMethod: 'directed',\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true,\n          // multiselect: true,\n          navigationButtons: true,\n        },\n        physics: {\n          enabled: false,\n        },\n        nodes: {\n          shape: 'dot',\n        }\n    };\n\n    const graph = {\n        nodes : nodes,\n        edges : edges,\n    };\n  \n\n    var VisNetwork = React.createClass({\n        componentDidMount() {\n            var network = new vis.Network(this.ref.myRef, graph, options);\n        },\n\n        render: function() {            \n            return (\n                <div className='card-body p-0'>                    \n                    <div ref=\"myRef\" style={experimentStyle}></div>\n                </div>\n            );\n        }\n    });\n\n    return <VisNetwork />;\n\n}\n\nconst experimentStyle = {\n    height: 600\n  };\n\nexport default GraphNativeRep;\n"]},"metadata":{},"sourceType":"module"}