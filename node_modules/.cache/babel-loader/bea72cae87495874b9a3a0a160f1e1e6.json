{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/context/statistics/StatsState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport StatsContext from './statsContext';\nimport StatsReducer from './statsReducer';\nimport { SET_LOADING, GET_EXPERIMENT_STATS, CLEAR_STATS, SET_ERROR_STATS } from '../types';\n\nconst StatsState = props => {\n  const initialState = {\n    loading: false,\n    statdata: null,\n    ticksdata: null,\n    isError: false,\n    totaldata: null,\n    errorMessage: \"\" // const bscserver = 'http://192.168.11.91:8888'\n\n  };\n  const localserver = 'http://84.88.185.94:8888';\n\n  const _useReducer = useReducer(StatsReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Get Experiment Stats\n\n\n  const getExperimentStats = async (expid, hours, type) => {\n    if (hours.length === 0) {\n      hours = 0;\n    }\n\n    if (type.length === 0) {\n      type = 'Any';\n    }\n\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(\"\".concat(localserver, \"/stats/\").concat(expid, \"/\").concat(hours, \"/\").concat(type));\n    let result = [];\n    var requestResult = null;\n    let ticks = []; //console.log(res.data);\n\n    if (res.data) {\n      if (res.data.error === true) {\n        setIsError(true, res.data.error_message);\n      } else {\n        setIsError(false, \"\");\n      }\n\n      result.push(['Jobs', \"Queued\", \"Run\", \"Failed Jobs\", \"Failed Queued\", \"Fail Run\"]);\n\n      for (var i = 0; i < res.data.jobs.length; i++) {\n        result.push([{\n          v: i + 1,\n          f: res.data.jobs[i]\n        }, res.data.stats.queued[i], res.data.stats.run[i], res.data.stats.failed_jobs[i], res.data.stats.fail_queued[i], res.data.stats.fail_run[i]]);\n        ticks.push({\n          v: i + 1,\n          f: res.data.jobs[i]\n        });\n      }\n\n      requestResult = res.data;\n    } //console.log(ticks);\n\n\n    dispatch({\n      type: GET_EXPERIMENT_STATS,\n      payload: {\n        result,\n        requestResult,\n        ticks\n      }\n    });\n  }; // Clear stats data\n\n\n  const clearStats = () => dispatch({\n    type: CLEAR_STATS\n  });\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setIsError = (error, msg) => {\n    dispatch({\n      type: SET_ERROR_STATS,\n      payload: {\n        error,\n        msg\n      }\n    });\n  };\n\n  return React.createElement(StatsContext.Provider, {\n    value: {\n      loading: state.loading,\n      statdata: state.statdata,\n      isError: state.isError,\n      errorMessage: state.errorMessage,\n      totaldata: state.totaldata,\n      ticksdata: state.ticksdata,\n      getExperimentStats,\n      clearStats\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default StatsState;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/context/statistics/StatsState.js"],"names":["React","useReducer","axios","StatsContext","StatsReducer","SET_LOADING","GET_EXPERIMENT_STATS","CLEAR_STATS","SET_ERROR_STATS","StatsState","props","initialState","loading","statdata","ticksdata","isError","totaldata","errorMessage","localserver","state","dispatch","getExperimentStats","expid","hours","type","length","setLoading","res","get","result","requestResult","ticks","data","error","setIsError","error_message","push","i","jobs","v","f","stats","queued","run","failed_jobs","fail_queued","fail_run","payload","clearStats","msg","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport StatsContext from './statsContext';\nimport StatsReducer from './statsReducer';\nimport {\n    SET_LOADING,\n    GET_EXPERIMENT_STATS,\n    CLEAR_STATS,\n    SET_ERROR_STATS,\n} from '../types';\n\n\nconst StatsState = props => {\n    const initialState = {\n        loading: false,\n        statdata: null,\n        ticksdata: null,\n        isError: false,\n        totaldata: null,\n        errorMessage: \"\",\n    }\n\n    // const bscserver = 'http://192.168.11.91:8888'\n    const localserver= 'http://84.88.185.94:8888'\n    \n\n    const [state, dispatch] = useReducer(StatsReducer, initialState);\n\n    // Get Experiment Stats\n    const getExperimentStats = async (expid,hours,type)  => {\n        if (hours.length === 0){\n            hours = 0;\n        }\n        if (type.length === 0){\n            type = 'Any';\n        }\n\n        setLoading();\n        //cleanGraphData();\n        const res = await axios.get(`${localserver}/stats/${expid}/${hours}/${type}`);        \n        let result = [];\n        var requestResult = null;\n        let ticks = [];\n        //console.log(res.data);\n        if (res.data) {\n            if (res.data.error === true){\n                setIsError(true, res.data.error_message);\n            }\n            else {\n                setIsError(false, \"\");\n            }\n            \n            result.push(['Jobs',\"Queued\",\"Run\",\"Failed Jobs\",\"Failed Queued\",\"Fail Run\"])\n            \n            for (var i = 0; i < res.data.jobs.length; i++){\n                result.push([\n                    {v: i+1, f: res.data.jobs[i]}, \n                    res.data.stats.queued[i],\n                    res.data.stats.run[i],\n                    res.data.stats.failed_jobs[i],\n                    res.data.stats.fail_queued[i],\n                    res.data.stats.fail_run[i]\n                ]);\n                ticks.push({v: i+1, f: res.data.jobs[i]});\n            }            \n            requestResult = res.data;\n        }\n        //console.log(ticks);\n        dispatch({\n            type: GET_EXPERIMENT_STATS,\n            payload: { result, requestResult, ticks }\n        });\n    };\n\n    // Clear stats data\n    const clearStats = () => dispatch({ type: CLEAR_STATS })\n\n    const setLoading = () => dispatch({ type: SET_LOADING });\n\n    const setIsError = ( error, msg ) => {\n        dispatch({\n            type: SET_ERROR_STATS,\n            payload: { error, msg }\n        });\n    };\n\n\n\n    return (\n        <StatsContext.Provider\n            value={{\n                loading: state.loading,\n                statdata: state.statdata,\n                isError: state.isError,\n                errorMessage: state.errorMessage,\n                totaldata: state.totaldata,\n                ticksdata: state.ticksdata,\n                getExperimentStats,\n                clearStats,\n            }}>\n            {props.children}\n        </StatsContext.Provider>\n    );\n};\n\nexport default StatsState;"]},"metadata":{},"sourceType":"module"}