{"ast":null,"code":"import _slicedToArray from \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/context/experiment/ExperimentState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ExperimentContext from './experimentContext';\nimport ExperimentReducer from './experimentReducer';\nimport { SEARCH_EXPERIMENTS, SET_LOADING, CLEAR_EXPERIMENTS, GET_EXPERIMENT, GET_GRAPH, SET_LOADING_GRAPH, CLEAN_GRAPH_DATA, UPDATE_SELECTION, GET_EXPERIMENT_RUN, SET_LOADING_RUN, CLEAN_RUN_DATA, SET_AUTOUPDATE_RUN, GET_PKL_DATA, SET_LOADING_PKL, UPDATE_NODES } from '../types';\n\nconst ExperimentState = props => {\n  const initialState = {\n    experiments: [],\n    experiment: {},\n    loading: false,\n    data: null,\n    rundata: null,\n    pkldata: null,\n    loadingGraph: false,\n    loadingRun: false,\n    loadingPkl: false,\n    selection: null,\n    enabledGraphSearch: true,\n    startAutoUpdateRun: false\n  };\n\n  const _useReducer = useReducer(ExperimentReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Search Experiments\n\n\n  const searchExperiments = async text => {\n    setLoading();\n    const res = await axios.get(\"http://localhost:8888/search/\".concat(text));\n    dispatch({\n      type: SEARCH_EXPERIMENTS,\n      payload: res.data.experiment\n    });\n  }; // Get Experiment\n\n\n  const getExperiment = async expid => {\n    setLoading(); //cleanGraphData();\n\n    const res = await axios.get(\"http://localhost:8888/expinfo/\".concat(expid));\n    dispatch({\n      type: GET_EXPERIMENT,\n      payload: res.data\n    });\n  }; // Get Experiment Graph\n\n\n  const getExperimentGraph = async expid => {\n    setLoadingGraph();\n    const res = await axios.get(\"http://localhost:8888/graph/\".concat(expid));\n    console.log(res.data);\n    dispatch({\n      type: GET_GRAPH,\n      payload: res.data\n    }); //this.setState({ data: res.data, loading: false, showGraph: !res.data.error });\n  }; // Get Experiment Run\n\n\n  const getExperimentRun = async expid => {\n    setLoadingRun();\n    const res = await axios.get(\"http://localhost:8888/exprun/\".concat(expid));\n    console.log(res.data);\n    dispatch({\n      type: GET_EXPERIMENT_RUN,\n      payload: res.data\n    });\n  }; // Get Experiment Pkl Data\n\n\n  const getExperimentPkl = async (expid, timeStamp) => {\n    setLoadingPkl();\n    timeStamp = 1000;\n    const res = await axios.get(\"http://localhost:8888/pklinfo/\".concat(expid, \"/\").concat(timeStamp));\n    console.log(res.data); // const actualPkl = res.data;\n\n    let newData = null;\n    let retrievedPkl = null;\n    var jobs = {};\n    retrievedPkl = res.data;\n\n    if (state.data !== null && retrievedPkl !== null) {\n      //console.log(retrievedPkl.pkl_content.length);\n      for (var j = 0, job; j < retrievedPkl.pkl_content.length; j++) {\n        job = retrievedPkl.pkl_content[j]; //console.log(job);\n\n        jobs[job.name] = job; //console.log(jobs[job.name]);\n      }\n\n      let requireUpdate = false;\n      newData = state.data;\n\n      for (var i = 0; i < newData.nodes.length; i++) {\n        // console.log(newNodes[i].id);\n        // console.log(newNodes[i]);\n        // console.log(jobs[ newNodes[i].id ]);\n        if (newData.nodes[i].status_code !== jobs[newData.nodes[i].id].status_code) {\n          console.log(newData.nodes[i].id + \" from \" + newData.nodes[i].status + \" to \" + jobs[newData.nodes[i].id].status);\n          newData.nodes[i].status_code = jobs[newData.nodes[i].id].status_code;\n          newData.nodes[i].status_color = jobs[newData.nodes[i].id].status_color;\n          newData.nodes[i].status_color = jobs[newData.nodes[i].id].status_color;\n          requireUpdate = true;\n        }\n      }\n\n      if (requireUpdate) {\n        updateNodes(newData);\n      }\n    }\n\n    dispatch({\n      type: GET_PKL_DATA,\n      payload: res.data\n    });\n  }; // Cleaning\n\n\n  const clearExperiments = () => dispatch({\n    type: CLEAR_EXPERIMENTS\n  });\n\n  const cleanGraphData = () => dispatch({\n    type: CLEAN_GRAPH_DATA\n  });\n\n  const cleanRunData = () => dispatch({\n    type: CLEAN_RUN_DATA\n  }); // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const setLoadingGraph = () => dispatch({\n    type: SET_LOADING_GRAPH\n  });\n\n  const setLoadingRun = () => dispatch({\n    type: SET_LOADING_RUN\n  });\n\n  const setLoadingPkl = () => dispatch({\n    type: SET_LOADING_PKL\n  }); // Action Things\n\n\n  const updateSelection = currentSelection => dispatch({\n    type: UPDATE_SELECTION,\n    payload: currentSelection\n  });\n\n  const updateNodes = nodes => dispatch({\n    type: UPDATE_NODES,\n    payload: nodes\n  });\n\n  const setAutoUpdateRun = () => dispatch({\n    type: SET_AUTOUPDATE_RUN\n  }); // Other Utils\n\n\n  const hashCode = value => {\n    var hash = 0,\n        i,\n        chr;\n    if (value.length === 0) return hash;\n\n    for (i = 0; i < value.length; i++) {\n      chr = value.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    console.log(hash);\n    return hash;\n  };\n\n  return React.createElement(ExperimentContext.Provider, {\n    value: {\n      experiments: state.experiments,\n      experiment: state.experiment,\n      loading: state.loading,\n      loadingGraph: state.loadingGraph,\n      loadingRun: state.loadingRun,\n      loadingPkl: state.loadingPkl,\n      data: state.data,\n      rundata: state.rundata,\n      pkldata: state.pkldata,\n      selection: state.selection,\n      enabledGraphSearch: state.enabledGraphSearch,\n      startAutoUpdateRun: state.startAutoUpdateRun,\n      setAutoUpdateRun,\n      searchExperiments,\n      clearExperiments,\n      getExperiment,\n      getExperimentGraph,\n      cleanGraphData,\n      cleanRunData,\n      updateSelection,\n      getExperimentRun,\n      getExperimentPkl,\n      hashCode\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ExperimentState;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/context/experiment/ExperimentState.js"],"names":["React","useReducer","axios","ExperimentContext","ExperimentReducer","SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","GET_GRAPH","SET_LOADING_GRAPH","CLEAN_GRAPH_DATA","UPDATE_SELECTION","GET_EXPERIMENT_RUN","SET_LOADING_RUN","CLEAN_RUN_DATA","SET_AUTOUPDATE_RUN","GET_PKL_DATA","SET_LOADING_PKL","UPDATE_NODES","ExperimentState","props","initialState","experiments","experiment","loading","data","rundata","pkldata","loadingGraph","loadingRun","loadingPkl","selection","enabledGraphSearch","startAutoUpdateRun","state","dispatch","searchExperiments","text","setLoading","res","get","type","payload","getExperiment","expid","getExperimentGraph","setLoadingGraph","console","log","getExperimentRun","setLoadingRun","getExperimentPkl","timeStamp","setLoadingPkl","newData","retrievedPkl","jobs","j","job","pkl_content","length","name","requireUpdate","i","nodes","status_code","id","status","status_color","updateNodes","clearExperiments","cleanGraphData","cleanRunData","updateSelection","currentSelection","setAutoUpdateRun","hashCode","value","hash","chr","charCodeAt","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ExperimentContext from './experimentContext';\nimport ExperimentReducer from './experimentReducer';\nimport {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  GET_GRAPH,\n  SET_LOADING_GRAPH,\n  CLEAN_GRAPH_DATA,\n  UPDATE_SELECTION,\n  GET_EXPERIMENT_RUN,\n  SET_LOADING_RUN,\n  CLEAN_RUN_DATA,\n  SET_AUTOUPDATE_RUN,\n  GET_PKL_DATA,\n  SET_LOADING_PKL,\n  UPDATE_NODES,\n} from '../types';\n\nconst ExperimentState = props => {\n    const initialState = {\n        experiments: [],\n        experiment: {},\n        loading: false,\n        data: null,\n        rundata: null,\n        pkldata: null,\n        loadingGraph: false,\n        loadingRun: false,\n        loadingPkl: false,\n        selection: null,\n        enabledGraphSearch: true,  \n        startAutoUpdateRun: false,      \n    }\n\n    const [state, dispatch] = useReducer(ExperimentReducer, initialState);\n\n    // Search Experiments\n    const searchExperiments = async text => {\n        setLoading();\n        const res = await axios.get(`http://localhost:8888/search/${text}`);\n        dispatch({\n            type: SEARCH_EXPERIMENTS,\n            payload: res.data.experiment,\n        });\n      };\n\n    // Get Experiment\n    const getExperiment = async expid => {\n        setLoading();\n        //cleanGraphData();\n        const res = await axios.get(`http://localhost:8888/expinfo/${expid}`);        \n        dispatch({\n            type: GET_EXPERIMENT,\n            payload: res.data,\n        });\n      };\n    \n    // Get Experiment Graph\n    const getExperimentGraph = async expid => {\n        setLoadingGraph();\n        \n        const res = await axios.get(`http://localhost:8888/graph/${expid}`);\n        console.log(res.data);\n        dispatch({\n            type: GET_GRAPH,\n            payload: res.data,\n        });\n        //this.setState({ data: res.data, loading: false, showGraph: !res.data.error });\n      };\n\n    // Get Experiment Run\n    const getExperimentRun = async expid => {\n        setLoadingRun();\n        const res = await axios.get(`http://localhost:8888/exprun/${expid}`);\n        console.log(res.data);\n        dispatch({\n            type: GET_EXPERIMENT_RUN,\n            payload: res.data,\n        });\n    }\n\n    // Get Experiment Pkl Data\n    const getExperimentPkl = async (expid, timeStamp) => {\n      setLoadingPkl();\n      timeStamp = 1000;\n      const res = await axios.get(`http://localhost:8888/pklinfo/${expid}/${timeStamp}`);\n      console.log(res.data);\n      // const actualPkl = res.data;\n      let newData = null;\n      let retrievedPkl = null;\n      var jobs = {}\n      retrievedPkl = res.data;\n      if (state.data !== null && retrievedPkl !== null){\n        //console.log(retrievedPkl.pkl_content.length);\n        for(var j = 0, job; j < retrievedPkl.pkl_content.length; j++){\n          job = retrievedPkl.pkl_content[j];\n          //console.log(job);\n          jobs[ job.name ] = job;\n          //console.log(jobs[job.name]);\n        }\n        let requireUpdate = false;\n        newData = state.data;\n        for(var i = 0; i < newData.nodes.length; i++){\n          // console.log(newNodes[i].id);\n          // console.log(newNodes[i]);\n          // console.log(jobs[ newNodes[i].id ]);\n          if (newData.nodes[i].status_code !== jobs[ newData.nodes[i].id ].status_code){\n            console.log(newData.nodes[i].id + \" from \" + newData.nodes[i].status + \" to \" + jobs[ newData.nodes[i].id ].status);\n            newData.nodes[i].status_code = jobs[ newData.nodes[i].id ].status_code;\n            newData.nodes[i].status_color = jobs[ newData.nodes[i].id ].status_color;\n            newData.nodes[i].status_color = jobs[ newData.nodes[i].id ].status_color;\n            requireUpdate = true;\n          }\n        }\n        if (requireUpdate){\n          updateNodes(newData);\n        }\n      }\n\n\n      dispatch({\n        type: GET_PKL_DATA,\n        payload: res.data,\n      });\n    }\n\n    // Cleaning\n    const clearExperiments = () => dispatch({ type: CLEAR_EXPERIMENTS });\n    const cleanGraphData = () => dispatch({ type: CLEAN_GRAPH_DATA });\n    const cleanRunData = () => dispatch({ type: CLEAN_RUN_DATA });\n\n    // Set Loading\n    const setLoading = () => dispatch({ type: SET_LOADING });\n    const setLoadingGraph = () => dispatch({ type: SET_LOADING_GRAPH });\n    const setLoadingRun = () => dispatch({ type: SET_LOADING_RUN });\n    const setLoadingPkl = () => dispatch({ type: SET_LOADING_PKL });\n\n\n    // Action Things\n    const updateSelection = (currentSelection) => dispatch({ type: UPDATE_SELECTION, payload: currentSelection });\n    const updateNodes = (nodes) => dispatch({ type: UPDATE_NODES, payload: nodes });\n    const setAutoUpdateRun = () => dispatch({ type: SET_AUTOUPDATE_RUN });\n\n    // Other Utils\n    const hashCode = (value) => {\n        var hash = 0, i, chr;\n        if (value.length === 0) return hash;\n        for (i = 0; i < value.length; i++) {\n          chr   = value.charCodeAt(i);\n          hash  = ((hash << 5) - hash) + chr;\n          hash |= 0; // Convert to 32bit integer\n        }\n        console.log(hash);\n        return hash;\n      };\n\n    return (\n        <ExperimentContext.Provider\n        value ={{\n            experiments: state.experiments,\n            experiment: state.experiment,\n            loading: state.loading,\n            loadingGraph: state.loadingGraph,\n            loadingRun: state.loadingRun,\n            loadingPkl: state.loadingPkl,\n            data: state.data,\n            rundata: state.rundata,\n            pkldata: state.pkldata,\n            selection: state.selection,\n            enabledGraphSearch: state.enabledGraphSearch,\n            startAutoUpdateRun: state.startAutoUpdateRun,\n            setAutoUpdateRun,\n            searchExperiments,\n            clearExperiments,\n            getExperiment,\n            getExperimentGraph,\n            cleanGraphData, \n            cleanRunData,\n            updateSelection,\n            getExperimentRun, \n            getExperimentPkl,           \n            hashCode,       \n        }}>\n            {props.children}\n        </ExperimentContext.Provider>\n    );\n};\n\nexport default ExperimentState;"]},"metadata":{},"sourceType":"module"}