{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/react-api/src/App.js\";\nimport React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Nodes from './components/nodes';\nimport Graph from './components/graph';\n\nclass Selection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        expid: event.target.value\n      });\n    };\n\n    this.state = {\n      expid: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"expid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"expid\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"expid\",\n      value: this.state.expid,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"You are selecting: \", this.state.expid)), React.createElement(\"button\", {\n      onClick: this.props.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"View \", this.props.value));\n  }\n\n}\n\nclass AutosubmitIndex extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expid: null\n    };\n  }\n\n  handleClick(i) {\n    alert(i);\n  }\n\n  render() {\n    return React.createElement(Selection, {\n      value: 'Graph-vis',\n      onClick: x => this.handleClick(x),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      nodes: [],\n      total: []\n    };\n  }\n\n  componentDidMount() {\n    //const {expid} = this.props.match.params;\n    //console.log(this.props);\n    fetch('http://84.88.185.94:5002/graph/a22l').then(res => res.json()).then(data => {\n      this.setState({\n        contacts: data['edges'],\n        nodes: data['nodes'],\n        total: data\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    if (typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Graph, {\n        nodes_prop: this.state.total.nodes,\n        edges_prop: this.state.total.edges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"No data\"));\n    }\n  }\n\n}\n\nexport default AutosubmitIndex;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/react-api/src/App.js"],"names":["React","Component","Contacts","Nodes","Graph","Selection","constructor","props","handleChange","event","setState","expid","target","value","state","render","onClick","AutosubmitIndex","handleClick","i","alert","x","App","contacts","nodes","total","componentDidMount","fetch","then","res","json","data","catch","console","log","edges"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Nodes from './components/nodes';\nimport Graph from './components/graph'\n\n\n\nclass Selection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expid : null,\n    }\n  }\n\n  handleChange = event => {\n    this.setState({ expid : event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        \n        <React.Fragment>\n          <form>\n            <label htmlFor=\"expid\">expid</label>\n            <input\n              type = \"text\"\n              name = \"expid\"\n              value = {this.state.expid}\n              onChange = {this.handleChange}\n            />\n          </form>\n          <h3>You are selecting: {this.state.expid}</h3>\n        </React.Fragment>\n\n        <button onClick={this.props.onClick}>\n          View {this.props.value}  \n        </button>\n      </div>      \n    );\n  }\n}\n\nclass AutosubmitIndex extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      expid : null,\n    }\n  }\n\n  handleClick(i) {\n    alert(i);\n  }\n  \n  render() {\n    return (\n      <Selection \n        value={'Graph-vis'} \n        onClick={(x) => this.handleClick(x)}\n      />\n    );\n  }\n}\n\nclass App extends Component{\n\n  componentDidMount() {\n\n    //const {expid} = this.props.match.params;\n    //console.log(this.props);\n\n    fetch('http://84.88.185.94:5002/graph/a22l')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ contacts: data['edges'], nodes : data['nodes'], total : data })\n    })\n    .catch(console.log)\n  }\n\n  state = {\n    contacts: [],\n    nodes: [],\n    total : []\n  }\n\n  render() {\n    if (typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n      return (\n        <div>        \n          <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n          {/* <Contacts contacts={this.state.contacts} />\n          <Nodes nodes={this.state.nodes} />  */}\n        </div>      \n      );\n    } else {\n      return (\n        <div>\n          <p>No data</p>\n        </div>\n      );\n    }\n   \n  }\n}\n\nexport default AutosubmitIndex;\n"]},"metadata":{},"sourceType":"module"}