{"ast":null,"code":"import _objectSpread from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_GRAPH,GET_PKL_DATA,SET_LOADING_GRAPH,SET_OFF_LOADING_GRAPH,CLEAN_ONLY_GRAH_DATA,SET_VIS_DATA,SET_VIS_NETWORK,SET_FOUND_NODES,SET_LOADING_SEARCH_JOB,SET_LOADING_JOB_MONITOR,SET_LOADING_PKL,CLEAN_GRAPH_DATA,UPDATE_NODES,SET_PKL_CHANGES,SHOULD_UPDATE_GRAPH,CLEAN_PKL_DATA,CLEAN_NAV_DATA,UPDATE_SELECTION,SET_AUTOUPDATE_PKL,NAVIGATE_AFTER_LOADING_GRAPH,NAVIGATE_GRAPH_TO,NAVIGATE_TO_GROUP_GRAPH,NAVIGATE_TO_LATEST,UPDATE_GRAPH_SELECTED_NODES,SET_CURRENT_COMMAND,SET_NOTIFICATION_TITLE_GRAPH,SET_CURRENT_TEXT_COMMAND//DEACTIVATE_COPY_TO,\n}from\"../types\";import{DEBUG}from\"../vars\";import{WaitingCode,FailedCode,CompletedCode,RunningCode,QueueCode,SubmittedCode}from\"../vars\";import{addFakeEdge,updateEdgeStyle,updateGraphBorder,updateGraphColor,updateGraphShape,navToLatest,navigateGraph,findIdinGraph}from\"../graphutils\";import{timeStampToDate}from\"../utils\";export default(function(state,action){switch(action.type){case GET_GRAPH:var _action$payload=action.payload,resdata=_action$payload.resdata,grouped=_action$payload.grouped,layout=_action$payload.layout;return _objectSpread(_objectSpread({},state),{},{data:resdata,current_grouped:grouped,current_layout:layout,loadingGraph:false,enabledGraphSearch:true,graphSelectedNodes:null});case GET_PKL_DATA:var retrievedPkl=action.payload;if(state.data!==null&&retrievedPkl.has_changed===true&&retrievedPkl.pkl_content.length>0){var current_jobs={};var jobs={};var colorChanges={};var shapeChanges={};var edgeUpdates={};var new_fakeEdges={};var changes=\"\";var changesSummarized=\"\";var pkl_packages=retrievedPkl[\"packages\"];var current_packages=state.data[\"packages\"];// Saving current state data into a dictionary\nfor(var k=0,kjob;k<state.data.nodes.length;k++){kjob=state.data.nodes[k];current_jobs[kjob.id]=kjob;}// Saving retrieved jobs into a dictionary\nfor(var j=0,job;j<retrievedPkl.pkl_content.length;j++){job=retrievedPkl.pkl_content[j];jobs[job.name]=job;}// Updating list of packages and adding to shape change\n// Shape change currently not working\nfor(var pkl_package in pkl_packages){if(!Object.keys(current_packages).includes(pkl_package)){current_packages[pkl_package]=pkl_packages[pkl_package];//console.log(pkl_packages[pkl_package]);\nfor(var index in pkl_packages[pkl_package]){var index_i=parseInt(index);var job_name=pkl_packages[pkl_package][index_i];//console.log(job_name);\nshapeChanges[job_name]=\"hexagon\";//console.log(index_i);\n//console.log(pkl_packages[pkl_package].length);\nvar next=index_i+1;//console.log(next);\nif(next<pkl_packages[pkl_package].length){//console.log(pkl_packages[pkl_package][index_i]);\n//console.log(pkl_packages[pkl_package][next]);\nif(current_jobs[pkl_packages[pkl_package][index_i]].level===current_jobs[pkl_packages[pkl_package][next]].level){new_fakeEdges[pkl_packages[pkl_package][index_i]]=pkl_packages[pkl_package][next];}}}}}var requireUpdate=false;DEBUG&&console.log(\"Current ts: \"+retrievedPkl.pkl_timestamp);if(state.data.nodes){for(var i=0;i<state.data.nodes.length;i++){// console.log(newNodes[i].id);\n//console.log(state.data.nodes[i]);\n// console.log(jobs[ newNodes[i].id ]);\nvar jobPkl=jobs[state.data.nodes[i].id];if(jobPkl&&(state.data.nodes[i].status_code!==jobPkl.status_code||state.data.nodes[i].package!==jobPkl.package||state.data.nodes[i].minutes!==jobPkl.minutes||state.data.nodes[i].minutes_queue!==jobPkl.minutes_queue)){// changes += state.data.nodes[i].id + \" from \" + state.data.nodes[i].status + \" to \" + jobs[ state.data.nodes[i].id ].status + \" || \";\nif(state.data.nodes[i].status_code!==jobs[state.data.nodes[i].id].status_code){changes+=timeStampToDate(retrievedPkl.pkl_timestamp)+\": \"+state.data.nodes[i].id+\" to \"+jobs[state.data.nodes[i].id].status+\"\\n\";changesSummarized+=jobs[state.data.nodes[i].id].status+\" : \"+state.data.nodes[i].id+\"\\n\";}else{// Not decided.\n}if(state.data.nodes[i].package!==jobs[state.data.nodes[i].id].package){changes+=timeStampToDate(retrievedPkl.pkl_timestamp)+\": \"+state.data.nodes[i].id+\" added to \"+jobs[state.data.nodes[i].id].package+\"\\n\";changesSummarized+=\"Wrapper \"+jobs[state.data.nodes[i].id].package+\" added.\\n\";var current_job=current_jobs[state.data.nodes[i].id];var children_current=current_job.children_list;for(var child in children_current){if(jobs[children_current[child]].package===jobs[state.data.nodes[i].id].package){edgeUpdates[state.data.nodes[i].id]=children_current[child];}}}// If status change, add to change colors. Set to new status color.\nif(state.data.nodes[i].status_code!==jobs[state.data.nodes[i].id].status_code){colorChanges[state.data.nodes[i].id]=jobs[state.data.nodes[i].id].status_color;state.data.nodes[i].status_code=jobs[state.data.nodes[i].id].status_code;state.data.nodes[i].status_color=jobs[state.data.nodes[i].id].status_color;state.data.nodes[i].status=jobs[state.data.nodes[i].id].status;}state.data.nodes[i].package=jobs[state.data.nodes[i].id].package;state.data.nodes[i].dashed=jobs[state.data.nodes[i].id].dashed;state.data.nodes[i].shape=jobs[state.data.nodes[i].id].shape;state.data.nodes[i].out=jobs[state.data.nodes[i].id].out;state.data.nodes[i].err=jobs[state.data.nodes[i].id].err;state.data.nodes[i].minutes=jobs[state.data.nodes[i].id].minutes;state.data.nodes[i].minutes_queue=jobs[state.data.nodes[i].id].minutes_queue;state.data.nodes[i].submit=jobs[state.data.nodes[i].id].submit;state.data.nodes[i].start=jobs[state.data.nodes[i].id].start;state.data.nodes[i].finish=jobs[state.data.nodes[i].id].finish;state.data.nodes[i].rm_id=jobs[state.data.nodes[i].id].rm_id;//console.log(state.data.nodes[i].status_color)\nrequireUpdate=true;}}if(requireUpdate){DEBUG&&console.log(\"New ts: \"+retrievedPkl.pkl_timestamp);state.data.pkl_timestamp=retrievedPkl.pkl_timestamp;state.notificationTitleGraph=changesSummarized;if(state.pklchanges){state.pklchanges=changes+state.pklchanges;}else{state.pklchanges=changes;}for(var key in colorChanges){//console.log( key, colorChanges[key] );\nupdateGraphColor(key,colorChanges[key],state);}for(var key_shape in shapeChanges){updateGraphShape(key_shape,shapeChanges[key_shape],state);updateGraphBorder(key_shape,state);}for(var key_edge in edgeUpdates){updateEdgeStyle(key_edge+\"-\"+edgeUpdates[key_edge],state);}for(var key_added in new_fakeEdges){addFakeEdge(key_added,new_fakeEdges[key_added],state);}}else{DEBUG&&console.log(\"No changes but updating pkl anyway.\");}}}return _objectSpread(_objectSpread({},state),{},{pkldata:retrievedPkl,loadingPkl:false,loadingJobMonitor:false});case NAVIGATE_AFTER_LOADING_GRAPH:var running=action.payload;if(state.visNetwork){var found=false;var cScale=0.5;if(running===true){//console.log(\"Search Running\")\nfound=navToLatest(RunningCode,true,cScale,state.visNetwork,state.data,state);if(!found){found=navToLatest(QueueCode,true,cScale,state.visNetwork,state.data,state);if(!found){found=navToLatest(SubmittedCode,true,cScale,state.visNetwork,state.data,state);if(!found){found=navToLatest(CompletedCode,true,cScale,state.visNetwork,state.data,state);}}}}else{found=navToLatest(FailedCode,true,cScale,state.visNetwork,state.data,state);if(!found){found=navToLatest(CompletedCode,true,cScale,state.visNetwork,state.data,state);}}if(!found){navToLatest(WaitingCode,false,cScale,state.visNetwork,state.data,state);}}return _objectSpread({},state);case NAVIGATE_GRAPH_TO:var Id=action.payload;if(state.visNetwork){var position=findIdinGraph(Id,state);//const currentPosition = state.visNetwork.getPositions([Id]);\nif(position.x&&position.y){navigateGraph(Id,position.x,position.y,0.9,state.visNetwork);//state.visNetwork.selectNodes([Id]);\nstate.selection=[Id];}}return _objectSpread({},state);case NAVIGATE_TO_GROUP_GRAPH:var IdList=action.payload;if(state.visNetwork){state.visNetwork.unselectAll();var currentLength=IdList.length;var _Id=IdList[parseInt(Math.floor(IdList.length/2))];var rescale=Math.sqrt(currentLength)*0.065;var currentPosition=state.visNetwork.getPositions(_Id);if(currentPosition[_Id]){navigateGraph(null,currentPosition[_Id].x,currentPosition[_Id].y,0.6-rescale,state.visNetwork);state.visNetwork.selectNodes(IdList);}}return _objectSpread({},state);case NAVIGATE_TO_LATEST:var _action$payload2=action.payload,status=_action$payload2.status,latest=_action$payload2.latest;navToLatest(status,latest,0.9,state.visNetwork,state.data,state);return _objectSpread({},state);case SET_LOADING_GRAPH:return _objectSpread(_objectSpread({},state),{},{loadingGraph:true,enabledGraphSearch:false});case SET_OFF_LOADING_GRAPH:return _objectSpread(_objectSpread({},state),{},{loadingGraph:false,enabledGraphSearch:true});case SET_VIS_DATA:return _objectSpread(_objectSpread({},state),{},{visNodes:action.payload});case SET_VIS_NETWORK:return _objectSpread(_objectSpread({},state),{},{visNetwork:action.payload});case SET_FOUND_NODES:var string=action.payload;if(state.data&&state.data.nodes){var foundNodes=state.data.nodes.filter(function(node){return node.id.toUpperCase().indexOf(string)>=0;});if(foundNodes&&foundNodes.length>0){state.foundNodes=foundNodes;var _position=findIdinGraph(foundNodes[0].id,state);if(_position.x&&_position.y){navigateGraph(foundNodes[0].id,_position.x,_position.y,0.9,state.visNetwork);state.selection=[foundNodes[0].id];}}else{state.foundNodes=null;}}return _objectSpread(_objectSpread({},state),{},{loadingSearchJob:false//foundNodes: action.payload,\n});case SET_PKL_CHANGES:return _objectSpread(_objectSpread({},state),{},{pklchanges:action.payload});case SET_LOADING_SEARCH_JOB:return _objectSpread(_objectSpread({},state),{},{loadingSearchJob:true});case SET_LOADING_JOB_MONITOR:return _objectSpread(_objectSpread({},state),{},{loadingJobMonitor:true});case SET_LOADING_PKL:return _objectSpread(_objectSpread({},state),{},{loadingPkl:true});case SET_AUTOUPDATE_PKL:return _objectSpread(_objectSpread({},state),{},{startAutoUpdatePkl:action.payload});case UPDATE_NODES:return _objectSpread(_objectSpread({},state),{},{data:action.payload});case CLEAN_ONLY_GRAH_DATA:return _objectSpread(_objectSpread({},state),{},{data:null,selection:null,enabledGraphSearch:true,visNodes:null,visNetwork:null,foundNodes:null,current_grouped:\"none\",current_layout:\"standard\",graphSelectedNodes:null});case SHOULD_UPDATE_GRAPH:return _objectSpread(_objectSpread({},state),{},{shouldUpdateGraph:action.payload});case CLEAN_GRAPH_DATA:return _objectSpread(_objectSpread({},state),{},{data:null,selection:null,enabledGraphSearch:true,loadingGraph:false,loadingPkl:false,visNodes:null,visNetwork:null,foundNodes:null,experimentRunning:false,experiment:null,current_grouped:\"none\",current_layout:\"standard\",//allowJobMonitor: false,\nperformancedata:null,canSelect:false,currentSelected:[],currentCommand:null,currentTextCommandGraph:null,graphSelectedNodes:null//startAutoUpdatePkl: false,\n});case CLEAN_PKL_DATA:return _objectSpread(_objectSpread({},state),{},{shouldUpdateGraph:false,startAutoUpdatePkl:false,pklchanges:null});case CLEAN_NAV_DATA:return _objectSpread(_objectSpread({},state),{},{foundNodes:null,startAutoUpdatePkl:false,selection:null});case UPDATE_SELECTION:return _objectSpread(_objectSpread({},state),{},{selection:action.payload});case UPDATE_GRAPH_SELECTED_NODES://const selectedNodes = action.payload;\nstate.graphSelectedNodes=null;state.currentCommandGraph=null;state.currentTextCommandGraph=null;if(state.selection){var currentSelectedNodes=state.visNetwork.getSelectedNodes();DEBUG&&console.log(currentSelectedNodes);state.graphSelectedNodes=currentSelectedNodes;}return _objectSpread({},state);case SET_CURRENT_COMMAND:return _objectSpread(_objectSpread({},state),{},{currentCommandGraph:action.payload,canCopyToClipboard:true});case SET_CURRENT_TEXT_COMMAND:return _objectSpread(_objectSpread({},state),{},{currentTextCommandGraph:action.payload,canCopyToClipboard:true});case SET_NOTIFICATION_TITLE_GRAPH:return _objectSpread(_objectSpread({},state),{},{notificationTitleGraph:action.payload});// case DEACTIVATE_COPY_TO:\n//   return {\n//     ...state,\n//     canCopyToClipboard: false,\n//   };\ndefault:return null;}});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/graph/graphReducer.js"],"names":["GET_GRAPH","GET_PKL_DATA","SET_LOADING_GRAPH","SET_OFF_LOADING_GRAPH","CLEAN_ONLY_GRAH_DATA","SET_VIS_DATA","SET_VIS_NETWORK","SET_FOUND_NODES","SET_LOADING_SEARCH_JOB","SET_LOADING_JOB_MONITOR","SET_LOADING_PKL","CLEAN_GRAPH_DATA","UPDATE_NODES","SET_PKL_CHANGES","SHOULD_UPDATE_GRAPH","CLEAN_PKL_DATA","CLEAN_NAV_DATA","UPDATE_SELECTION","SET_AUTOUPDATE_PKL","NAVIGATE_AFTER_LOADING_GRAPH","NAVIGATE_GRAPH_TO","NAVIGATE_TO_GROUP_GRAPH","NAVIGATE_TO_LATEST","UPDATE_GRAPH_SELECTED_NODES","SET_CURRENT_COMMAND","SET_NOTIFICATION_TITLE_GRAPH","SET_CURRENT_TEXT_COMMAND","DEBUG","WaitingCode","FailedCode","CompletedCode","RunningCode","QueueCode","SubmittedCode","addFakeEdge","updateEdgeStyle","updateGraphBorder","updateGraphColor","updateGraphShape","navToLatest","navigateGraph","findIdinGraph","timeStampToDate","state","action","type","payload","resdata","grouped","layout","data","current_grouped","current_layout","loadingGraph","enabledGraphSearch","graphSelectedNodes","retrievedPkl","has_changed","pkl_content","length","current_jobs","jobs","colorChanges","shapeChanges","edgeUpdates","new_fakeEdges","changes","changesSummarized","pkl_packages","current_packages","k","kjob","nodes","id","j","job","name","pkl_package","Object","keys","includes","index","index_i","parseInt","job_name","next","level","requireUpdate","console","log","pkl_timestamp","i","jobPkl","status_code","package","minutes","minutes_queue","status","current_job","children_current","children_list","child","status_color","dashed","shape","out","err","submit","start","finish","rm_id","notificationTitleGraph","pklchanges","key","key_shape","key_edge","key_added","pkldata","loadingPkl","loadingJobMonitor","running","visNetwork","found","cScale","Id","position","x","y","selection","IdList","unselectAll","currentLength","Math","floor","rescale","sqrt","currentPosition","getPositions","selectNodes","latest","visNodes","string","foundNodes","filter","node","toUpperCase","indexOf","loadingSearchJob","startAutoUpdatePkl","shouldUpdateGraph","experimentRunning","experiment","performancedata","canSelect","currentSelected","currentCommand","currentTextCommandGraph","currentCommandGraph","currentSelectedNodes","getSelectedNodes","canCopyToClipboard"],"mappings":"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","sourcesContent":["import {\n  GET_GRAPH,\n  GET_PKL_DATA,\n  SET_LOADING_GRAPH,\n  SET_OFF_LOADING_GRAPH,\n  CLEAN_ONLY_GRAH_DATA,\n  SET_VIS_DATA,\n  SET_VIS_NETWORK,\n  SET_FOUND_NODES,\n  SET_LOADING_SEARCH_JOB,\n  SET_LOADING_JOB_MONITOR,\n  SET_LOADING_PKL,\n  CLEAN_GRAPH_DATA,\n  UPDATE_NODES,\n  SET_PKL_CHANGES,\n  SHOULD_UPDATE_GRAPH,\n  CLEAN_PKL_DATA,\n  CLEAN_NAV_DATA,\n  UPDATE_SELECTION,\n  SET_AUTOUPDATE_PKL,\n  NAVIGATE_AFTER_LOADING_GRAPH,\n  NAVIGATE_GRAPH_TO,\n  NAVIGATE_TO_GROUP_GRAPH,\n  NAVIGATE_TO_LATEST,\n  UPDATE_GRAPH_SELECTED_NODES,\n  SET_CURRENT_COMMAND,\n  SET_NOTIFICATION_TITLE_GRAPH,\n  SET_CURRENT_TEXT_COMMAND,\n  //DEACTIVATE_COPY_TO,\n} from \"../types\";\n\nimport { DEBUG } from \"../vars\";\n\nimport {\n  WaitingCode,\n  FailedCode,\n  CompletedCode,\n  RunningCode,\n  QueueCode,\n  SubmittedCode,\n} from \"../vars\";\n\nimport {\n  addFakeEdge,\n  updateEdgeStyle,\n  updateGraphBorder,\n  updateGraphColor,\n  updateGraphShape,\n  navToLatest,\n  navigateGraph,\n  findIdinGraph,\n} from \"../graphutils\";\n\nimport { timeStampToDate } from \"../utils\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_GRAPH:\n      const { resdata, grouped, layout } = action.payload;\n      return {\n        ...state,\n        data: resdata,\n        current_grouped: grouped,\n        current_layout: layout,\n        loadingGraph: false,\n        enabledGraphSearch: true,\n        graphSelectedNodes: null,\n      };\n    case GET_PKL_DATA:\n      let retrievedPkl = action.payload;\n      if (\n        state.data !== null &&\n        retrievedPkl.has_changed === true &&\n        retrievedPkl.pkl_content.length > 0\n      ) {\n        let current_jobs = {};\n        let jobs = {};\n        let colorChanges = {};\n        let shapeChanges = {};\n        let edgeUpdates = {};\n        let new_fakeEdges = {};\n        let changes = \"\";\n        let changesSummarized = \"\";\n        let pkl_packages = retrievedPkl[\"packages\"];\n        let current_packages = state.data[\"packages\"];\n\n        // Saving current state data into a dictionary\n        for (let k = 0, kjob; k < state.data.nodes.length; k++) {\n          kjob = state.data.nodes[k];\n          current_jobs[kjob.id] = kjob;\n        }\n        // Saving retrieved jobs into a dictionary\n        for (let j = 0, job; j < retrievedPkl.pkl_content.length; j++) {\n          job = retrievedPkl.pkl_content[j];\n          jobs[job.name] = job;\n        }\n\n        // Updating list of packages and adding to shape change\n        // Shape change currently not working\n        for (let pkl_package in pkl_packages) {\n          if (!Object.keys(current_packages).includes(pkl_package)) {\n            current_packages[pkl_package] = pkl_packages[pkl_package];\n            //console.log(pkl_packages[pkl_package]);\n            for (let index in pkl_packages[pkl_package]) {\n              let index_i = parseInt(index);\n              let job_name = pkl_packages[pkl_package][index_i];\n              //console.log(job_name);\n              shapeChanges[job_name] = \"hexagon\";\n              //console.log(index_i);\n              //console.log(pkl_packages[pkl_package].length);\n              let next = index_i + 1;\n              //console.log(next);\n              if (next < pkl_packages[pkl_package].length) {\n                //console.log(pkl_packages[pkl_package][index_i]);\n                //console.log(pkl_packages[pkl_package][next]);\n                if (\n                  current_jobs[pkl_packages[pkl_package][index_i]].level ===\n                  current_jobs[pkl_packages[pkl_package][next]].level\n                ) {\n                  new_fakeEdges[pkl_packages[pkl_package][index_i]] =\n                    pkl_packages[pkl_package][next];\n                }\n              }\n            }\n          }\n        }\n\n        let requireUpdate = false;\n        DEBUG && console.log(\"Current ts: \" + retrievedPkl.pkl_timestamp);\n\n        if (state.data.nodes) {\n          for (let i = 0; i < state.data.nodes.length; i++) {\n            // console.log(newNodes[i].id);\n            //console.log(state.data.nodes[i]);\n            // console.log(jobs[ newNodes[i].id ]);\n            let jobPkl = jobs[state.data.nodes[i].id];\n            if (\n              jobPkl &&\n              (state.data.nodes[i].status_code !== jobPkl.status_code ||\n                state.data.nodes[i].package !== jobPkl.package ||\n                state.data.nodes[i].minutes !== jobPkl.minutes ||\n                state.data.nodes[i].minutes_queue !== jobPkl.minutes_queue)\n            ) {\n              // changes += state.data.nodes[i].id + \" from \" + state.data.nodes[i].status + \" to \" + jobs[ state.data.nodes[i].id ].status + \" || \";\n              if (\n                state.data.nodes[i].status_code !==\n                jobs[state.data.nodes[i].id].status_code\n              ) {\n                changes +=\n                  timeStampToDate(retrievedPkl.pkl_timestamp) +\n                  \": \" +\n                  state.data.nodes[i].id +\n                  \" to \" +\n                  jobs[state.data.nodes[i].id].status +\n                  \"\\n\";\n                changesSummarized +=\n                  jobs[state.data.nodes[i].id].status +\n                  \" : \" +\n                  state.data.nodes[i].id +\n                  \"\\n\";\n              } else {\n                // Not decided.\n              }\n\n              if (\n                state.data.nodes[i].package !==\n                jobs[state.data.nodes[i].id].package\n              ) {\n                changes +=\n                  timeStampToDate(retrievedPkl.pkl_timestamp) +\n                  \": \" +\n                  state.data.nodes[i].id +\n                  \" added to \" +\n                  jobs[state.data.nodes[i].id].package +\n                  \"\\n\";\n                changesSummarized +=\n                  \"Wrapper \" +\n                  jobs[state.data.nodes[i].id].package +\n                  \" added.\\n\";\n                let current_job = current_jobs[state.data.nodes[i].id];\n                let children_current = current_job.children_list;\n                for (let child in children_current) {\n                  if (\n                    jobs[children_current[child]].package ===\n                    jobs[state.data.nodes[i].id].package\n                  ) {\n                    edgeUpdates[state.data.nodes[i].id] =\n                      children_current[child];\n                  }\n                }\n              }\n              // If status change, add to change colors. Set to new status color.\n              if (\n                state.data.nodes[i].status_code !==\n                jobs[state.data.nodes[i].id].status_code\n              ) {\n                colorChanges[state.data.nodes[i].id] =\n                  jobs[state.data.nodes[i].id].status_color;\n                state.data.nodes[i].status_code =\n                  jobs[state.data.nodes[i].id].status_code;\n                state.data.nodes[i].status_color =\n                  jobs[state.data.nodes[i].id].status_color;\n                state.data.nodes[i].status =\n                  jobs[state.data.nodes[i].id].status;\n              }\n\n              state.data.nodes[i].package =\n                jobs[state.data.nodes[i].id].package;\n              state.data.nodes[i].dashed = jobs[state.data.nodes[i].id].dashed;\n              state.data.nodes[i].shape = jobs[state.data.nodes[i].id].shape;\n              state.data.nodes[i].out = jobs[state.data.nodes[i].id].out;\n              state.data.nodes[i].err = jobs[state.data.nodes[i].id].err;\n              state.data.nodes[i].minutes =\n                jobs[state.data.nodes[i].id].minutes;\n              state.data.nodes[i].minutes_queue =\n                jobs[state.data.nodes[i].id].minutes_queue;\n              state.data.nodes[i].submit = jobs[state.data.nodes[i].id].submit;\n              state.data.nodes[i].start = jobs[state.data.nodes[i].id].start;\n              state.data.nodes[i].finish = jobs[state.data.nodes[i].id].finish;\n              state.data.nodes[i].rm_id = jobs[state.data.nodes[i].id].rm_id;\n              //console.log(state.data.nodes[i].status_color)\n\n              requireUpdate = true;\n            }\n          }\n\n          if (requireUpdate) {\n            DEBUG && console.log(\"New ts: \" + retrievedPkl.pkl_timestamp);\n            state.data.pkl_timestamp = retrievedPkl.pkl_timestamp;\n            state.notificationTitleGraph = changesSummarized;\n            if (state.pklchanges) {\n              state.pklchanges = changes + state.pklchanges;\n            } else {\n              state.pklchanges = changes;\n            }\n\n            for (var key in colorChanges) {\n              //console.log( key, colorChanges[key] );\n              updateGraphColor(key, colorChanges[key], state);\n            }\n\n            for (var key_shape in shapeChanges) {\n              updateGraphShape(key_shape, shapeChanges[key_shape], state);\n              updateGraphBorder(key_shape, state);\n            }\n\n            for (var key_edge in edgeUpdates) {\n              updateEdgeStyle(key_edge + \"-\" + edgeUpdates[key_edge], state);\n            }\n\n            for (var key_added in new_fakeEdges) {\n              addFakeEdge(key_added, new_fakeEdges[key_added], state);\n            }\n          } else {\n            DEBUG && console.log(\"No changes but updating pkl anyway.\");\n          }\n        }\n      }\n      return {\n        ...state,\n        pkldata: retrievedPkl,\n        loadingPkl: false,\n        loadingJobMonitor: false,\n      };\n    case NAVIGATE_AFTER_LOADING_GRAPH:\n      const running = action.payload;\n      if (state.visNetwork) {\n        var found = false;\n        const cScale = 0.5;\n        if (running === true) {\n          //console.log(\"Search Running\")\n          found = navToLatest(\n            RunningCode,\n            true,\n            cScale,\n            state.visNetwork,\n            state.data,\n            state\n          );\n          if (!found) {\n            found = navToLatest(\n              QueueCode,\n              true,\n              cScale,\n              state.visNetwork,\n              state.data,\n              state\n            );\n            if (!found) {\n              found = navToLatest(\n                SubmittedCode,\n                true,\n                cScale,\n                state.visNetwork,\n                state.data,\n                state\n              );\n              if (!found) {\n                found = navToLatest(\n                  CompletedCode,\n                  true,\n                  cScale,\n                  state.visNetwork,\n                  state.data,\n                  state\n                );\n              }\n            }\n          }\n        } else {\n          found = navToLatest(\n            FailedCode,\n            true,\n            cScale,\n            state.visNetwork,\n            state.data,\n            state\n          );\n          if (!found) {\n            found = navToLatest(\n              CompletedCode,\n              true,\n              cScale,\n              state.visNetwork,\n              state.data,\n              state\n            );\n          }\n        }\n        if (!found) {\n          navToLatest(\n            WaitingCode,\n            false,\n            cScale,\n            state.visNetwork,\n            state.data,\n            state\n          );\n        }\n      }\n      return {\n        ...state,\n      };\n    case NAVIGATE_GRAPH_TO:\n      const Id = action.payload;\n      if (state.visNetwork) {\n        const position = findIdinGraph(Id, state);\n        //const currentPosition = state.visNetwork.getPositions([Id]);\n        if (position.x && position.y) {\n          navigateGraph(Id, position.x, position.y, 0.9, state.visNetwork);\n          //state.visNetwork.selectNodes([Id]);\n          state.selection = [Id];\n        }\n      }\n      return {\n        ...state,\n      };\n    case NAVIGATE_TO_GROUP_GRAPH:\n      const IdList = action.payload;\n      if (state.visNetwork) {\n        state.visNetwork.unselectAll();\n        const currentLength = IdList.length;\n        const Id = IdList[parseInt(Math.floor(IdList.length / 2))];\n        const rescale = Math.sqrt(currentLength) * 0.065;\n        var currentPosition = state.visNetwork.getPositions(Id);\n        if (currentPosition[Id]) {\n          navigateGraph(\n            null,\n            currentPosition[Id].x,\n            currentPosition[Id].y,\n            0.6 - rescale,\n            state.visNetwork\n          );\n          state.visNetwork.selectNodes(IdList);\n        }\n      }\n      return {\n        ...state,\n      };\n    case NAVIGATE_TO_LATEST:\n      const { status, latest } = action.payload;\n      navToLatest(status, latest, 0.9, state.visNetwork, state.data, state);\n      return {\n        ...state,\n      };\n    case SET_LOADING_GRAPH:\n      return {\n        ...state,\n        loadingGraph: true,\n        enabledGraphSearch: false,\n      };\n    case SET_OFF_LOADING_GRAPH:\n      return {\n        ...state,\n        loadingGraph: false,\n        enabledGraphSearch: true,\n      };\n    case SET_VIS_DATA:\n      return {\n        ...state,\n        visNodes: action.payload,\n      };\n    case SET_VIS_NETWORK:\n      return {\n        ...state,\n        visNetwork: action.payload,\n      };\n    case SET_FOUND_NODES:\n      const string = action.payload;\n      if (state.data && state.data.nodes) {\n        const foundNodes = state.data.nodes.filter(\n          (node) => node.id.toUpperCase().indexOf(string) >= 0\n        );\n\n        if (foundNodes && foundNodes.length > 0) {\n          state.foundNodes = foundNodes;\n          const position = findIdinGraph(foundNodes[0].id, state);\n          if (position.x && position.y) {\n            navigateGraph(\n              foundNodes[0].id,\n              position.x,\n              position.y,\n              0.9,\n              state.visNetwork\n            );\n            state.selection = [foundNodes[0].id];\n          }\n        } else {\n          state.foundNodes = null;\n        }\n      }\n      return {\n        ...state,\n        loadingSearchJob: false,\n        //foundNodes: action.payload,\n      };\n    case SET_PKL_CHANGES:\n      return {\n        ...state,\n        pklchanges: action.payload,\n      };\n    case SET_LOADING_SEARCH_JOB:\n      return {\n        ...state,\n        loadingSearchJob: true,\n      };\n    case SET_LOADING_JOB_MONITOR:\n      return {\n        ...state,\n        loadingJobMonitor: true,\n      };\n    case SET_LOADING_PKL:\n      return {\n        ...state,\n        loadingPkl: true,\n      };\n    case SET_AUTOUPDATE_PKL:\n      return {\n        ...state,\n        startAutoUpdatePkl: action.payload,\n      };\n    case UPDATE_NODES:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case CLEAN_ONLY_GRAH_DATA:\n      return {\n        ...state,\n        data: null,\n        selection: null,\n        enabledGraphSearch: true,\n        visNodes: null,\n        visNetwork: null,\n        foundNodes: null,\n        current_grouped: \"none\",\n        current_layout: \"standard\",\n        graphSelectedNodes: null,\n      };\n    case SHOULD_UPDATE_GRAPH:\n      return {\n        ...state,\n        shouldUpdateGraph: action.payload,\n      };\n    case CLEAN_GRAPH_DATA:\n      return {\n        ...state,\n        data: null,\n        selection: null,\n        enabledGraphSearch: true,\n        loadingGraph: false,\n        loadingPkl: false,\n        visNodes: null,\n        visNetwork: null,\n        foundNodes: null,\n        experimentRunning: false,\n        experiment: null,\n        current_grouped: \"none\",\n        current_layout: \"standard\",\n        //allowJobMonitor: false,\n        performancedata: null,\n        canSelect: false,\n        currentSelected: [],\n        currentCommand: null,\n        currentTextCommandGraph: null,\n        graphSelectedNodes: null,\n        //startAutoUpdatePkl: false,\n      };\n    case CLEAN_PKL_DATA:\n      return {\n        ...state,\n        shouldUpdateGraph: false,\n        startAutoUpdatePkl: false,\n        pklchanges: null,\n      };\n    case CLEAN_NAV_DATA:\n      return {\n        ...state,\n        foundNodes: null,\n        startAutoUpdatePkl: false,\n        selection: null,\n      };\n    case UPDATE_SELECTION:\n      return {\n        ...state,\n        selection: action.payload,\n      };\n    case UPDATE_GRAPH_SELECTED_NODES:\n      //const selectedNodes = action.payload;\n      state.graphSelectedNodes = null;\n      state.currentCommandGraph = null;\n      state.currentTextCommandGraph = null;\n      if (state.selection) {\n        const currentSelectedNodes = state.visNetwork.getSelectedNodes();\n        DEBUG && console.log(currentSelectedNodes);\n        state.graphSelectedNodes = currentSelectedNodes;\n      }\n      return {\n        ...state,\n      };\n    case SET_CURRENT_COMMAND:\n      return {\n        ...state,\n        currentCommandGraph: action.payload,        \n        canCopyToClipboard: true,\n      };\n    case SET_CURRENT_TEXT_COMMAND:\n      return {\n        ...state, \n        currentTextCommandGraph: action.payload,\n        canCopyToClipboard: true,\n      }\n    case SET_NOTIFICATION_TITLE_GRAPH:\n      return {\n        ...state,\n        notificationTitleGraph: action.payload,\n      };\n    // case DEACTIVATE_COPY_TO:\n    //   return {\n    //     ...state,\n    //     canCopyToClipboard: false,\n    //   };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}