{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphNativeRep.js\";\nimport React, { Component } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport vis from \"vis\";\n\nclass GraphNativeRep extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.render = () => {\n      if (this.props.loadingGraph) return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n\n      if (this.props.data == null) {\n        return React.createElement(\"div\", {\n          className: \"card-body text-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"lead\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, \"Press \", React.createElement(\"span\", {\n          className: \"badge badge-info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, \"Show Graph\"), \" to see the graph representation of the experiment.\"), React.createElement(\"p\", {\n          className: \"lead\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, \"If the experiment is running, press \", React.createElement(\"span\", {\n          className: \"badge badge-dark\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, \"Start Job Monitor\"), \" to start a live tracker of the changes on the experiment's jobs. This process will automatically update the graph's nodes colors and show a log of the detected changes.\"));\n      }\n\n      var nodes_array = [];\n      var edges_array = [];\n\n      if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n        this.props.data.nodes.map(node => nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: {\n            background: node.status_color,\n            border: \"black\"\n          } //level: node.priority,\n\n        }));\n        this.props.data.edges.map(edge => edges_array.push({\n          from: edge.from,\n          to: edge.to\n        }));\n      }\n\n      var nodes = new vis.DataSet(nodes_array);\n      var edges = new vis.DataSet(edges_array);\n      this.props.setVisData(nodes);\n      const options = {\n        edges: {\n          arrows: {\n            to: {\n              enabled: true\n            }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            nodeSpacing: 250,\n            edgeMinimization: false,\n            blockShifting: false,\n            parentCentralization: false,\n            direction: 'UD',\n            sortMethod: 'directed'\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true,\n          // multiselect: true,\n          navigationButtons: true\n        },\n        physics: {\n          enabled: false\n        },\n        nodes: {\n          shape: 'dot'\n        }\n      };\n      const graph = {\n        nodes: nodes,\n        edges: edges\n      };\n\n      class VisNetwork extends Component {\n        shouldComponentUpdate(nextProps, nextState) {\n          if (this.props.shouldUpdateGraph === true) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        componentDidMount() {\n          var network = new vis.Network(this.refs.myRef, this.props.graph, this.props.options);\n          network.on(\"click\", params => {\n            //console.log(params);\n            if (params.nodes) {\n              //console.log(params.nodes);\n              this.props.updateSelection(params.nodes);\n            }\n          });\n        } // componentWillUnmount() {\n        //     console.log(\"Unmounting\");\n        //     this.props.cleanGraphData();\n        // }\n\n\n        render() {\n          return React.createElement(\"div\", {\n            className: \"card-body p-0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            ref: \"myRef\",\n            style: experimentStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }));\n        }\n\n      }\n\n      return React.createElement(VisNetwork, {\n        graph: graph,\n        options: options,\n        updateSelection: this.props.updateSelection,\n        shouldUpdateGraph: this.props.shouldUpdateGraph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      });\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.data && this.props.data) {\n      console.log(\"Rerendering\");\n      return true;\n    } else if (nextProps.loadingGraph !== this.props.loadingGraph) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Unmounting\");\n    this.props.cleanGraphData();\n  }\n\n}\n\nconst experimentStyle = {\n  height: 600\n};\nexport default GraphNativeRep;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphNativeRep.js"],"names":["React","Component","Spinner","vis","GraphNativeRep","render","props","loadingGraph","data","nodes_array","edges_array","nodes","edges","map","node","push","id","label","color","background","status_color","border","edge","from","to","DataSet","setVisData","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","edgeMinimization","blockShifting","parentCentralization","direction","sortMethod","interaction","dragNodes","hoverConnectedEdges","navigationButtons","physics","shape","graph","VisNetwork","shouldComponentUpdate","nextProps","nextState","shouldUpdateGraph","componentDidMount","network","Network","refs","myRef","on","params","updateSelection","experimentStyle","console","log","componentWillUnmount","cleanGraphData","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport vis from \"vis\";\n\nclass GraphNativeRep extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){ \n    \n        if (nextProps.data && this.props.data){\n          console.log(\"Rerendering\")\n          return true;\n        }else if (nextProps.loadingGraph !== this.props.loadingGraph){\n          return true;    \n        }else{\n          return false;\n        }\n    }\n    componentWillUnmount() {\n        console.log(\"Unmounting\");\n        this.props.cleanGraphData();\n    }\n\n\n\n    render = () => {\n        if (this.props.loadingGraph) return <Spinner></Spinner>;\n        if (this.props.data == null){\n            return (\n                <div className=\"card-body text-left\">\n                    <p className='lead'>Press <span className='badge badge-info'>Show Graph</span> to see the graph representation of the experiment.</p>\n                    <p className='lead'>If the experiment is running, press <span className='badge badge-dark'>Start Job Monitor</span> to start a live tracker of the changes on the experiment's jobs.\n                        This process will automatically update the graph's nodes colors and show a log of the detected changes.\n                    </p>\n                </div> \n            );\n        }\n\n        var nodes_array = [];\n        var edges_array = [];\n    \n        if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n            this.props.data.nodes.map(node => nodes_array.push({\n                id: node.id,\n                label: node.label,\n                color: { background: node.status_color, border: \"black\" },\n                //level: node.priority,\n              })\n            );\n      \n            this.props.data.edges.map(edge => \n              edges_array.push({ from: edge.from, to: edge.to })\n            );\n        }\n    \n        var nodes = new vis.DataSet(nodes_array);\n        var edges = new vis.DataSet(edges_array);\n        this.props.setVisData(nodes);\n\n        const options = {\n            edges: {\n              arrows: {\n                to: { enabled: true }\n              }\n            },\n            layout: {\n              improvedLayout: true,\n              hierarchical: {\n      \n                nodeSpacing: 250,\n                edgeMinimization: false,\n                blockShifting: false,\n                parentCentralization: false,\n                direction: 'UD',\n                sortMethod: 'directed',\n              }\n            },\n            interaction: {\n              dragNodes: true,\n              hoverConnectedEdges: true,\n              // multiselect: true,\n              navigationButtons: true,\n            },\n            physics: {\n              enabled: false,\n            },\n            nodes: {\n              shape: 'dot',\n            }\n        };\n    \n        const graph = {\n            nodes : nodes,\n            edges : edges,\n        };\n\n        class VisNetwork extends Component {\n        \n            shouldComponentUpdate(nextProps, nextState){ \n               if (this.props.shouldUpdateGraph === true){\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n    \n            componentDidMount() {\n                var network = new vis.Network(this.refs.myRef, this.props.graph, this.props.options);\n                network.on(\"click\", (params) => {\n                    //console.log(params);\n                    if (params.nodes){\n                        //console.log(params.nodes);\n                        this.props.updateSelection(params.nodes);\n                    }\n                    \n                });\n            }\n    \n            // componentWillUnmount() {\n            //     console.log(\"Unmounting\");\n            //     this.props.cleanGraphData();\n            // }\n    \n            render() {            \n                return (\n                    <div className='card-body p-0'>                    \n                        <div ref=\"myRef\" style={experimentStyle}></div>\n                    </div>\n                );\n            }\n        }\n    \n        return <VisNetwork \n            graph={graph} \n            options={options} \n            updateSelection={this.props.updateSelection}\n            shouldUpdateGraph={this.props.shouldUpdateGraph}\n            />;\n\n    }\n\n\n  \n\n \n\n   \n  \n\n \n\n}\n\nconst experimentStyle = {\n    height: 600\n  };\n\nexport default GraphNativeRep;\n"]},"metadata":{},"sourceType":"module"}