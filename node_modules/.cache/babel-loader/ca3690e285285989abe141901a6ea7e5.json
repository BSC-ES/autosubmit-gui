{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js\";\nimport React from \"react\"; // import vis from \"vis-network\";\n// import Spinner from \"../layout/Spinner\";\n\nimport Graph from 'react-graph-vis';\n\nfunction GraphRepresentation({\n  nodes_prop,\n  edges_prop,\n  cleanParent\n}) {\n  // var data = {\n  //   nodes: nodes,\n  //   edges: edges\n  // };\n  var nodes_array = [];\n  var edges_array = [];\n\n  if (typeof this.props.nodes_prop !== \"undefined\" || typeof this.props.edges_prop !== \"undefined\") {\n    this.props.nodes_prop.map(node => nodes_array.push({\n      id: node.id,\n      label: node.label,\n      color: {\n        background: node.status_color,\n        border: \"black\"\n      }\n    }));\n    this.props.edges_prop.map(edge => {\n      edges_array.push({\n        from: edge.from,\n        to: edge.to\n      });\n    }); // var nodes = new vis.DataSet(nodes_array);\n    // var edges = new vis.DataSet(edges_array);\n    //var network = new vis.Network(container, data, options);\n    //window.test(nodes_array, edges_array);\n  }\n\n  const graph = {\n    nodes: nodes_array,\n    edges: edges_array\n  };\n  const options = {\n    edges: {\n      arrows: {\n        to: {\n          enabled: true\n        }\n      }\n    },\n    layout: {\n      randomSeed: undefined,\n      improvedLayout: true,\n      hierarchical: {\n        parentCentralization: true,\n        treeSpacing: 100,\n        nodeSpacing: 250\n      }\n    },\n    interaction: {\n      dragNodes: true,\n      hoverConnectedEdges: true\n    },\n    physics: {\n      enabled: false\n    } // configure: {\n    //   enabled: true,\n    //   filter: 'nodes,edges',\n    //   container: undefined,\n    //   showButton: true\n    // }\n\n  };\n  const events = {\n    select: function (event) {\n      var nodes = event.nodes,\n          edges = event.edges;\n      console.log(\"Selected nodes:\");\n      console.log(nodes);\n      console.log(\"Selected edges:\");\n      console.log(edges);\n    }\n  };\n  return React.createElement(Graph, {\n    graph: graph,\n    options: options,\n    events: events,\n    getNetwork: network => {//  if you want access to vis.js network api you can set the state in a parent component using this property\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }); // componentDidMount() {\n  //   console.log(\"In Graph\");\n  //   // let container = document.getElementById(\"myNetwork\");\n  //   var nodes_array = [];\n  //   var edges_array = [];\n  //   if (\n  //     typeof this.props.nodes_prop !== \"undefined\" ||\n  //     typeof this.props.edges_prop !== \"undefined\"\n  //   ) {\n  //     this.props.nodes_prop.map(node =>\n  //       nodes_array.push({\n  //         id: node.id,\n  //         label: node.label,\n  //         color: { background: node.status_color, border: \"black\" }\n  //       })\n  //     );\n  //     this.props.edges_prop.map(edge => {\n  //       edges_array.push({ from: edge.from, to: edge.to });\n  //     });\n  //     // var nodes = new vis.DataSet(nodes_array);\n  //     // var edges = new vis.DataSet(edges_array);\n  //     //var network = new vis.Network(container, data, options);\n  //     //window.test(nodes_array, edges_array);\n  //   }\n  // }\n  // componentWillUnmount() {\n  //   this.props.cleanParent();\n  //   // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n  //   //   console.log(\"Unmounting\")\n  //   //   window.clearIt();\n  //   // }\n  // }\n  // experimentStyle = {\n  //   height: 1200\n  // };\n  // render() {\n  //   // if (this.props.loading) {\n  //   //   console.log(\"Spinning\");\n  //   //   return <Spinner />;\n  //   // }\n  //   // console.log(\"Not Spinning\");\n  //   //return <div style={this.experimentStyle} id='myNetwork' />\n  //   return (\n  //     <Graph\n  //     graph={graph}\n  //     options={options}\n  //     events={events}\n  //     getNetwork={network => {\n  //       //  if you want access to vis.js network api you can set the state in a parent component using this property\n  //     }}\n  //   />\n  //   );    \n  // }\n}\n\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js"],"names":["React","Graph","GraphRepresentation","nodes_prop","edges_prop","cleanParent","nodes_array","edges_array","props","map","node","push","id","label","color","background","status_color","border","edge","from","to","graph","nodes","edges","options","arrows","enabled","layout","randomSeed","undefined","improvedLayout","hierarchical","parentCentralization","treeSpacing","nodeSpacing","interaction","dragNodes","hoverConnectedEdges","physics","events","select","event","console","log","network"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import vis from \"vis-network\";\n// import Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\n\nfunction GraphRepresentation({nodes_prop, edges_prop, cleanParent}) {\n  \n\n  // var data = {\n  //   nodes: nodes,\n  //   edges: edges\n  // };\n\n  var nodes_array = [];\n  var edges_array = [];\n\n  if (\n    typeof this.props.nodes_prop !== \"undefined\" ||\n    typeof this.props.edges_prop !== \"undefined\"\n  ) {\n    this.props.nodes_prop.map(node =>\n      nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: { background: node.status_color, border: \"black\" }\n      })\n    );\n\n    this.props.edges_prop.map(edge => {\n      edges_array.push({ from: edge.from, to: edge.to });\n    });\n\n    // var nodes = new vis.DataSet(nodes_array);\n\n    // var edges = new vis.DataSet(edges_array);\n\n    //var network = new vis.Network(container, data, options);\n    //window.test(nodes_array, edges_array);\n  }\n\n  const graph = {\n    nodes : nodes_array,\n    edges : edges_array\n  };\n\n\n    const options = {\n      edges: {\n        arrows: {\n          to: { enabled: true }\n        }\n      },\n      layout: {\n        randomSeed: undefined,\n        improvedLayout: true,\n        hierarchical: {\n          parentCentralization: true,\n          treeSpacing: 100,\n          nodeSpacing: 250\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true\n      },\n      physics: {\n        enabled: false,\n      },\n      // configure: {\n      //   enabled: true,\n      //   filter: 'nodes,edges',\n      //   container: undefined,\n      //   showButton: true\n      // }\n    };\n  \n    const events = {\n      select: function(event) {\n        var { nodes, edges } = event;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n      }\n    };\n\n    return (\n      <Graph\n      graph={graph}\n      options={options}\n      events={events}\n      getNetwork={network => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n      }}\n    />\n    );  \n\n  // componentDidMount() {\n  //   console.log(\"In Graph\");\n\n  //   // let container = document.getElementById(\"myNetwork\");\n\n  //   var nodes_array = [];\n  //   var edges_array = [];\n\n  //   if (\n  //     typeof this.props.nodes_prop !== \"undefined\" ||\n  //     typeof this.props.edges_prop !== \"undefined\"\n  //   ) {\n  //     this.props.nodes_prop.map(node =>\n  //       nodes_array.push({\n  //         id: node.id,\n  //         label: node.label,\n  //         color: { background: node.status_color, border: \"black\" }\n  //       })\n  //     );\n\n  //     this.props.edges_prop.map(edge => {\n  //       edges_array.push({ from: edge.from, to: edge.to });\n  //     });\n\n  //     // var nodes = new vis.DataSet(nodes_array);\n\n  //     // var edges = new vis.DataSet(edges_array);\n\n  //     //var network = new vis.Network(container, data, options);\n  //     //window.test(nodes_array, edges_array);\n  //   }\n\n      \n \n  // }\n\n  // componentWillUnmount() {\n  //   this.props.cleanParent();\n  //   // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n  //   //   console.log(\"Unmounting\")\n  //   //   window.clearIt();\n  //   // }\n  // }\n\n  // experimentStyle = {\n  //   height: 1200\n  // };\n\n  // render() {\n  //   // if (this.props.loading) {\n  //   //   console.log(\"Spinning\");\n  //   //   return <Spinner />;\n  //   // }\n  //   // console.log(\"Not Spinning\");\n  //   //return <div style={this.experimentStyle} id='myNetwork' />\n  //   return (\n  //     <Graph\n  //     graph={graph}\n  //     options={options}\n  //     events={events}\n  //     getNetwork={network => {\n  //       //  if you want access to vis.js network api you can set the state in a parent component using this property\n  //     }}\n  //   />\n  //   );    \n  // }\n}\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}