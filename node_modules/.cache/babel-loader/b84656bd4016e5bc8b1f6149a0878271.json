{"ast":null,"code":"export const updateTreeData = (runData, treedata, fancyTree) => {\n  //const updatedData = {};\n  // console.log(fancyTree);\n  if (!runData) {\n    return;\n  }\n\n  let currentJobNames = new Map();\n  let parentCompletedMap = new Map();\n  let parentFailedMap = new Map();\n  runData.forEach(item => currentJobNames[String(item.job_name)] = item); // console.log(currentJobNames);\n  // console.log(treedata);\n\n  treedata.jobs.forEach(item => {\n    item.status = \"WAITING\";\n    item.status_code = 0;\n    item.status_color = \"gray\";\n    item.minutes = 0;\n    item.minutes_queue = 0;\n    item.submit = null;\n    item.start = null;\n    item.finish = null;\n    item.rm_id = null; // item.id is job_name\n\n    if (currentJobNames[String(item.id)]) {\n      // console.log(\"Found \" + item.id);\n      const sourceInfoJob = currentJobNames[String(item.id)];\n      item.status = sourceInfoJob.status;\n      item.status_code = sourceInfoJob.status_code;\n      item.status_color = sourceInfoJob.status_color;\n      item.minutes = sourceInfoJob.running_time_s;\n      item.minutes_queue = sourceInfoJob.queue_time_s;\n      item.submit = sourceInfoJob.submit;\n      item.start = sourceInfoJob.start;\n      item.finish = sourceInfoJob.finish;\n      item.rm_id = sourceInfoJob.job_id;\n    }\n  }); //console.log(treedata.tree);\n\n  for (const key of Object.keys(treedata.tree)) {\n    // console.log(treedata.tree[key].title);\n    traverseUpdate(treedata.tree[key], currentJobNames, fancyTree, parentCompletedMap, parentFailedMap); // fancyTreeObject.keyMap[key].title = fancyTreeObject.keyMap[key].refKey;\n    // console.log(value);\n  }\n\n  console.log(parentCompletedMap);\n  console.log(parentFailedMap); //return updatedData;\n};\n\nconst traverseUpdate = (treeNode, currentMap, fancyTree, parentCompletedMap, parentFailedMap) => {\n  //fancyTreeNode.title = treeNode.refKey;\n  // const underscores = (treeNode.title.match(/_/g) || []).length;\n  //if (underscores >= 1 && treeNode.folder === false) {\n  //treeNode.title = treeNode.refKey;\n  let nodes = fancyTree.getNodesByRef(treeNode.refKey); // node = node ? node[0] : null;\n\n  if (nodes) {\n    nodes.forEach(node => {\n      const newNodeInfo = currentMap[node.refKey];\n      let currentTitle = node.title; //let newTitle = currentTitle;\n      // Setting status string        \n\n      if (!node.folder) {\n        const statusIndexStart = currentTitle.indexOf(\"#\");\n        const statusIndexEnd = currentTitle.indexOf(\"<\", statusIndexStart);\n        const statusText = currentTitle.substring(statusIndexStart, statusIndexEnd);\n        currentTitle = currentTitle.replace(statusText, '#' + (currentMap[node.refKey] ? String(newNodeInfo.status) : \"WAITING\"));\n        const bgIndexStart = currentTitle.indexOf(\"background-color:\");\n        const bgIndexEnd = currentTitle.indexOf(\"'>\");\n        const bgColor = currentTitle.substring(bgIndexStart, bgIndexEnd);\n        currentTitle = currentTitle.replace(bgColor, \"background-color:\" + (currentMap[node.refKey] ? String(newNodeInfo.status_color) : \"gray\"));\n        const timeTagIndexStart = currentTitle.indexOf(\"~\", statusIndexEnd);\n\n        if (timeTagIndexStart > 0) {\n          const timeTagIndexEnd = currentTitle.indexOf(\"<\", timeTagIndexStart);\n          let timeTag = \"\";\n\n          if (timeTagIndexEnd > 0) {\n            timeTag = currentTitle.substring(timeTagIndexStart, timeTagIndexEnd);\n          } else {\n            timeTag = currentTitle.substring(timeTagIndexStart);\n          }\n\n          currentTitle = currentTitle.replace(timeTag, currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \" \");\n        } else {\n          currentTitle = currentTitle + (currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \"\");\n        }\n\n        node.setTitle(currentTitle);\n        let parent = node.parent;\n        parent.setTitle(parent.refKey);\n\n        if (statusText === \"COMPLETED\") {\n          parentCompletedMap[parent.refKey] = parentCompletedMap[parent.refKey] ? parentCompletedMap[parent.refKey] + 1 : 0;\n        }\n\n        if (statusText === \"FAILED\") {\n          parentFailedMap[parent.refKey] = parentFailedMap[parent.refKey] ? parentFailedMap[parent.refKey] + 1 : 0;\n        }\n      }\n    });\n  }\n\n  if (treeNode.children) {\n    treeNode.children.forEach(item => {\n      //console.log(item);\n      traverseUpdate(item, currentMap, fancyTree, parentCompletedMap, parentFailedMap);\n    });\n  }\n};\n\nexport const buildRunTitle = (runId, meta) => {\n  let runTitle = \"Run \" + runId;\n  console.log(meta);\n\n  if (meta) {\n    const {\n      created,\n      finished,\n      completed,\n      total\n    } = meta;\n    runTitle = runTitle + \" created on \" + String(created) + (finished ? \" finished on \" + finished : \" \") + \" | \" + String(completed) + \" of \" + String(total) + \" jobs completed.\";\n  }\n\n  console.log(runTitle);\n  return runTitle;\n};","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/treeutils.js"],"names":["updateTreeData","runData","treedata","fancyTree","currentJobNames","Map","parentCompletedMap","parentFailedMap","forEach","item","String","job_name","jobs","status","status_code","status_color","minutes","minutes_queue","submit","start","finish","rm_id","id","sourceInfoJob","running_time_s","queue_time_s","job_id","key","Object","keys","tree","traverseUpdate","console","log","treeNode","currentMap","nodes","getNodesByRef","refKey","node","newNodeInfo","currentTitle","title","folder","statusIndexStart","indexOf","statusIndexEnd","statusText","substring","replace","bgIndexStart","bgIndexEnd","bgColor","timeTagIndexStart","timeTagIndexEnd","timeTag","titletag","setTitle","parent","children","buildRunTitle","runId","meta","runTitle","created","finished","completed","total"],"mappings":"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","sourcesContent":["export const updateTreeData = (runData, treedata, fancyTree) => {\n  //const updatedData = {};\n  // console.log(fancyTree);\n  if(!runData) {\n    return;\n  }\n  let currentJobNames = new Map();\n  let parentCompletedMap = new Map();\n  let parentFailedMap = new Map();\n  runData.forEach((item) => currentJobNames[String(item.job_name)] = item);\n  // console.log(currentJobNames);\n  // console.log(treedata);\n  treedata.jobs.forEach((item) => {\n    item.status = \"WAITING\"; \n    item.status_code = 0; \n    item.status_color = \"gray\"; \n    item.minutes = 0; \n    item.minutes_queue = 0;\n    item.submit = null;\n    item.start = null;\n    item.finish = null;\n    item.rm_id = null;\n    // item.id is job_name\n    if (currentJobNames[String(item.id)]){\n      // console.log(\"Found \" + item.id);\n      const sourceInfoJob = currentJobNames[String(item.id)];\n      item.status = sourceInfoJob.status; \n      item.status_code = sourceInfoJob.status_code; \n      item.status_color = sourceInfoJob.status_color; \n      item.minutes = sourceInfoJob.running_time_s; \n      item.minutes_queue = sourceInfoJob.queue_time_s;\n      item.submit = sourceInfoJob.submit;\n      item.start = sourceInfoJob.start;\n      item.finish = sourceInfoJob.finish;\n      item.rm_id = sourceInfoJob.job_id;\n    }\n  });\n  \n  //console.log(treedata.tree);\n  for (const key of Object.keys(treedata.tree)) {\n    // console.log(treedata.tree[key].title);\n    traverseUpdate(treedata.tree[key], currentJobNames, fancyTree, parentCompletedMap, parentFailedMap);\n    // fancyTreeObject.keyMap[key].title = fancyTreeObject.keyMap[key].refKey;\n    // console.log(value);\n  }\n  console.log(parentCompletedMap);\n  console.log(parentFailedMap);\n  //return updatedData;\n}\n\nconst traverseUpdate = (treeNode, currentMap, fancyTree, parentCompletedMap, parentFailedMap) => {\n  //fancyTreeNode.title = treeNode.refKey;\n  // const underscores = (treeNode.title.match(/_/g) || []).length;\n  //if (underscores >= 1 && treeNode.folder === false) {\n  //treeNode.title = treeNode.refKey;\n  let nodes = fancyTree.getNodesByRef(treeNode.refKey);\n  // node = node ? node[0] : null;\n  if (nodes){\n    nodes.forEach(node => {\n      const newNodeInfo = currentMap[node.refKey];\n      let currentTitle = node.title;\n      //let newTitle = currentTitle;\n      // Setting status string        \n      if (!node.folder){\n        const statusIndexStart = currentTitle.indexOf(\"#\");\n        const statusIndexEnd = currentTitle.indexOf(\"<\", statusIndexStart);\n        const statusText = currentTitle.substring(statusIndexStart, statusIndexEnd);\n        currentTitle = currentTitle.replace(statusText, '#'+ (currentMap[node.refKey] ?String(newNodeInfo.status) : \"WAITING\" ));\n        const bgIndexStart = currentTitle.indexOf(\"background-color:\");\n        const bgIndexEnd =  currentTitle.indexOf(\"'>\");\n        const bgColor = currentTitle.substring(bgIndexStart, bgIndexEnd);\n        currentTitle = currentTitle.replace(bgColor, \"background-color:\"+(currentMap[node.refKey] ? String(newNodeInfo.status_color) : \"gray\"));\n        const timeTagIndexStart = currentTitle.indexOf(\"~\", statusIndexEnd);\n        if (timeTagIndexStart > 0){\n          const timeTagIndexEnd = currentTitle.indexOf(\"<\", timeTagIndexStart);\n          let timeTag = \"\";\n          if (timeTagIndexEnd > 0){\n            timeTag = currentTitle.substring(timeTagIndexStart, timeTagIndexEnd);            \n          } else {\n            timeTag = currentTitle.substring(timeTagIndexStart);           \n          }          \n          currentTitle = currentTitle.replace(timeTag, currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \" \")\n        } else {\n          currentTitle = currentTitle + (currentMap[node.refKey] ? \"~ \" + String(newNodeInfo.titletag) + \" \" : \"\");\n        }\n        node.setTitle(currentTitle);\n        let parent = node.parent;\n        parent.setTitle(parent.refKey);\n        if (statusText === \"COMPLETED\") {\n          parentCompletedMap[parent.refKey] = parentCompletedMap[parent.refKey] ? parentCompletedMap[parent.refKey] + 1 : 0;\n        }     \n        if (statusText === \"FAILED\") {\n          parentFailedMap[parent.refKey] = parentFailedMap[parent.refKey] ? parentFailedMap[parent.refKey] + 1 : 0;\n        }\n      }                    \n    });\n  }\n\n  if (treeNode.children){\n    treeNode.children.forEach(item => {\n      //console.log(item);\n      traverseUpdate(item, currentMap, fancyTree, parentCompletedMap, parentFailedMap);\n    });\n  }\n}\n\nexport const buildRunTitle = (runId, meta) => {\n  let runTitle = \"Run \" + runId;\n  console.log(meta);\n  if (meta){\n    const { created, finished, completed, total } = meta;\n    runTitle = runTitle + \" created on \" + String(created) + (finished ? \" finished on \" + finished : \" \") + \" | \" + String(completed) + \" of \" + String(total) + \" jobs completed.\";\n  }  \n  console.log(runTitle);\n  return runTitle;\n}"]},"metadata":{},"sourceType":"module"}