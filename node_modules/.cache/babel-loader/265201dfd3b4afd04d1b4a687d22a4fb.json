{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/tree/TreeState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport TreeContext from \"./treeContext\";\nimport TreeReducer from \"./treeReducer\";\nimport { GET_TREE, SET_LOADING_TREE_REFRESH, SET_LOADING_TREE_PKL, PKL_TREE_LOADED, SET_FANCYTREE, SET_LOADING_FILTER, CLEAN_TREE_DATA, CLEAN_TREE_PKL_DATA, SET_AUTOUPDATE_TREE_PKL, UPDATE_SELECTION_TREE, CLEAR_FILTER_TREE, FILTER_TREEVIEW, SET_LOADING_TREE, SET_START_TREE_SELECTION, SET_NOTIFICATION_TITLE_TREE, SET_OFF_LOADING_TREE, INCREASE_LOADING_TREE, UPDATE_RUNDETAIL_ON_TREE, GET_EXPERIMENT_RUN_JOBDATA } from \"../types\"; // import { start, end } from \"../utils\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG } from \"../vars\";\n\nconst TreeState = props => {\n  const initialState = {\n    treedata: null,\n    loadingTree: false,\n    enabledTreeSearch: true,\n    loadingTreePkl: false,\n    loadingTreeRefresh: false,\n    loadingFilterTree: false,\n    loadingPreviousRun: false,\n    fancyTree: null,\n    experimentRunDetailForTree: null,\n    currentRunIdOnTree: null,\n    elapsedLoadingTree: 1,\n    startAutoUpdateTreePkl: false,\n    pkltreechanges: null,\n    selectedTreeNode: null,\n    notificationTitleTree: null\n  };\n  const [state, dispatch] = useReducer(TreeReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  const debug = DEBUG;\n\n  const getExperimentTree = async expid => {\n    setLoadingTree(); //start();\n\n    const res = await axios.get(`${localserver}/tree/${expid}`).catch(error => {\n      alert(error.message);\n      setOffLoadingTree();\n    });\n\n    if (res) {\n      debug && console.log(res.data);\n      dispatch({\n        type: GET_TREE,\n        payload: res.data\n      });\n    } //end();\n\n  }; // Get experiment pkl data for tree\n\n\n  const getExperimentTreePkl = async (expid, timeStamp) => {\n    //console.log(expid, timeStamp);\n    setLoadingTreePkl();\n    setLoadingTreeRefresh();\n    const res = await axios.get(`${localserver}/pkltreeinfo/${expid}/${timeStamp}`);\n    const retrievedPklTree = res.data;\n    debug && console.log(retrievedPklTree);\n    dispatch({\n      type: PKL_TREE_LOADED,\n      payload: retrievedPklTree\n    });\n  };\n\n  const getExperimentRunJobData = async (expid, run_id, meta) => {\n    const res = await axios.get(`${localserver}/rundetail/${expid}/${run_id}`).catch(error => {\n      alert(error.message);\n    });\n    debug && console.log(res.data); // console.log(res.data);\n\n    const result = res ? res.data.rundata : null;\n    dispatch({\n      type: GET_EXPERIMENT_RUN_JOBDATA,\n      payload: {\n        result: result,\n        runId: run_id,\n        meta: meta\n      }\n    }); // setAutoUpdateTreePkl(false);\n  };\n\n  const updateTreeContent = async (runDetail, run_id) => {\n    // setLoadingTreePkl();\n    // setLoadingTreeRefresh();\n    // setLoadingTree();\n    dispatch({\n      type: UPDATE_RUNDETAIL_ON_TREE,\n      payload: {\n        runDetail: runDetail,\n        runId: run_id\n      }\n    });\n  };\n\n  const filterTreeView = string => {\n    setLoadingFilter();\n    dispatch({\n      type: FILTER_TREEVIEW,\n      payload: string\n    });\n  };\n\n  const setFancyTree = value => dispatch({\n    type: SET_FANCYTREE,\n    payload: value\n  });\n\n  const updateSelectionTree = currentSelected => {\n    dispatch({\n      type: UPDATE_SELECTION_TREE,\n      payload: currentSelected\n    });\n  };\n\n  const cleanTreeData = () => dispatch({\n    type: CLEAN_TREE_DATA\n  });\n\n  const cleanPklTreeData = () => dispatch({\n    type: CLEAN_TREE_PKL_DATA\n  });\n\n  const clearFilterTreeView = () => dispatch({\n    type: CLEAR_FILTER_TREE\n  });\n\n  const increaseElapsedLoadingTree = () => {\n    dispatch({\n      type: INCREASE_LOADING_TREE\n    });\n  };\n\n  const setLoadingTree = () => dispatch({\n    type: SET_LOADING_TREE\n  }); //here\n\n\n  const setOffLoadingTree = () => dispatch({\n    type: SET_OFF_LOADING_TREE\n  });\n\n  const setLoadingFilter = () => dispatch({\n    type: SET_LOADING_FILTER\n  });\n\n  const setLoadingTreeRefresh = () => dispatch({\n    type: SET_LOADING_TREE_REFRESH\n  });\n\n  const setLoadingTreePkl = () => dispatch({\n    type: SET_LOADING_TREE_PKL\n  });\n\n  const setAutoUpdateTreePkl = value => dispatch({\n    type: SET_AUTOUPDATE_TREE_PKL,\n    payload: value\n  });\n\n  const setStartSelection = () => dispatch({\n    type: SET_START_TREE_SELECTION\n  });\n\n  const setNotificationTitleTree = notification => dispatch({\n    type: SET_NOTIFICATION_TITLE_TREE,\n    payload: notification\n  });\n\n  return /*#__PURE__*/React.createElement(TreeContext.Provider, {\n    value: {\n      treedata: state.treedata,\n      loadingTree: state.loadingTree,\n      loadingTreePkl: state.loadingTreePkl,\n      loadingFilterTree: state.loadingFilterTree,\n      enabledTreeSearch: state.enabledTreeSearch,\n      returnFilter: state.returnFilter,\n      fancyTree: state.fancyTree,\n      notificationTitleTree: state.notificationTitleTree,\n      //canSelect: state.canSelect,\n      startAutoUpdateTreePkl: state.startAutoUpdateTreePkl,\n      pkltreechanges: state.pkltreechanges,\n      selectedTreeNode: state.selectedTreeNode,\n      expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n      elapsedLoadingTree: state.elapsedLoadingTree,\n      currentRunIdOnTree: state.currentRunIdOnTree,\n      getExperimentTree,\n      getExperimentTreePkl,\n      filterTreeView,\n      setFancyTree,\n      cleanTreeData,\n      cleanPklTreeData,\n      updateSelectionTree,\n      setAutoUpdateTreePkl,\n      clearFilterTreeView,\n      setStartSelection,\n      setNotificationTitleTree,\n      increaseElapsedLoadingTree,\n      updateTreeContent,\n      getExperimentRunJobData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default TreeState;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/tree/TreeState.js"],"names":["React","useReducer","axios","TreeContext","TreeReducer","GET_TREE","SET_LOADING_TREE_REFRESH","SET_LOADING_TREE_PKL","PKL_TREE_LOADED","SET_FANCYTREE","SET_LOADING_FILTER","CLEAN_TREE_DATA","CLEAN_TREE_PKL_DATA","SET_AUTOUPDATE_TREE_PKL","UPDATE_SELECTION_TREE","CLEAR_FILTER_TREE","FILTER_TREEVIEW","SET_LOADING_TREE","SET_START_TREE_SELECTION","SET_NOTIFICATION_TITLE_TREE","SET_OFF_LOADING_TREE","INCREASE_LOADING_TREE","UPDATE_RUNDETAIL_ON_TREE","GET_EXPERIMENT_RUN_JOBDATA","AUTOSUBMIT_API_SOURCE","DEBUG","TreeState","props","initialState","treedata","loadingTree","enabledTreeSearch","loadingTreePkl","loadingTreeRefresh","loadingFilterTree","loadingPreviousRun","fancyTree","experimentRunDetailForTree","currentRunIdOnTree","elapsedLoadingTree","startAutoUpdateTreePkl","pkltreechanges","selectedTreeNode","notificationTitleTree","state","dispatch","localserver","debug","getExperimentTree","expid","setLoadingTree","res","get","catch","error","alert","message","setOffLoadingTree","console","log","data","type","payload","getExperimentTreePkl","timeStamp","setLoadingTreePkl","setLoadingTreeRefresh","retrievedPklTree","getExperimentRunJobData","run_id","meta","result","rundata","runId","updateTreeContent","runDetail","filterTreeView","string","setLoadingFilter","setFancyTree","value","updateSelectionTree","currentSelected","cleanTreeData","cleanPklTreeData","clearFilterTreeView","increaseElapsedLoadingTree","setAutoUpdateTreePkl","setStartSelection","setNotificationTitleTree","notification","returnFilter","expectedLoadingTreeTime","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport TreeContext from \"./treeContext\";\nimport TreeReducer from \"./treeReducer\";\n\nimport {\n  GET_TREE,\n  SET_LOADING_TREE_REFRESH,\n  SET_LOADING_TREE_PKL,\n  PKL_TREE_LOADED,\n  SET_FANCYTREE,\n  SET_LOADING_FILTER,\n  CLEAN_TREE_DATA,\n  CLEAN_TREE_PKL_DATA,\n  SET_AUTOUPDATE_TREE_PKL,\n  UPDATE_SELECTION_TREE,\n  CLEAR_FILTER_TREE,\n  FILTER_TREEVIEW,\n  SET_LOADING_TREE,\n  SET_START_TREE_SELECTION,\n  SET_NOTIFICATION_TITLE_TREE,\n  SET_OFF_LOADING_TREE,\n  INCREASE_LOADING_TREE,\n  UPDATE_RUNDETAIL_ON_TREE,\n  GET_EXPERIMENT_RUN_JOBDATA,  \n} from \"../types\";\n\n// import { start, end } from \"../utils\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG } from \"../vars\";\n\nconst TreeState = (props) => {\n  const initialState = {\n    treedata: null,\n    loadingTree: false,\n    enabledTreeSearch: true,\n    loadingTreePkl: false,\n    loadingTreeRefresh: false,\n    loadingFilterTree: false,\n    loadingPreviousRun: false,\n    fancyTree: null,\n    experimentRunDetailForTree: null,\n    currentRunIdOnTree: null,\n    elapsedLoadingTree: 1,\n    startAutoUpdateTreePkl: false,\n    pkltreechanges: null,\n    selectedTreeNode: null,\n    notificationTitleTree: null,\n  };\n\n  const [state, dispatch] = useReducer(TreeReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  const debug = DEBUG;\n\n  const getExperimentTree = async (expid) => {\n    setLoadingTree();\n    //start();\n    const res = await axios\n      .get(`${localserver}/tree/${expid}`)\n      .catch((error) => {\n        alert(error.message);\n        setOffLoadingTree();\n      });\n    if (res) {\n      debug && console.log(res.data);\n      dispatch({\n        type: GET_TREE,\n        payload: res.data,\n      });\n    }\n\n    //end();\n  };\n\n  // Get experiment pkl data for tree\n  const getExperimentTreePkl = async (expid, timeStamp) => {\n    //console.log(expid, timeStamp);\n    setLoadingTreePkl();\n    setLoadingTreeRefresh();\n    const res = await axios.get(\n      `${localserver}/pkltreeinfo/${expid}/${timeStamp}`\n    );\n    const retrievedPklTree = res.data;\n    debug && console.log(retrievedPklTree);\n    dispatch({\n      type: PKL_TREE_LOADED,\n      payload: retrievedPklTree,\n    });\n  };\n\n  const getExperimentRunJobData = async (expid, run_id, meta) => {\n    const res = await axios.get(`${localserver}/rundetail/${expid}/${run_id}`).catch((error) => { alert(error.message);});\n    debug && console.log(res.data);\n    // console.log(res.data);\n    const result = res ? res.data.rundata : null;\n    dispatch({\n      type: GET_EXPERIMENT_RUN_JOBDATA,\n      payload: {result: result, runId: run_id, meta: meta},\n    });    \n    // setAutoUpdateTreePkl(false);\n  }\n\n  const updateTreeContent = async (runDetail, run_id) => {\n    // setLoadingTreePkl();\n    // setLoadingTreeRefresh();\n    // setLoadingTree();\n    dispatch({\n      type: UPDATE_RUNDETAIL_ON_TREE,\n      payload: {runDetail: runDetail, runId: run_id},\n    })\n  }\n\n  const filterTreeView = (string) => {\n    setLoadingFilter();\n    dispatch({\n      type: FILTER_TREEVIEW,\n      payload: string,\n    });\n  };\n\n  const setFancyTree = (value) =>\n    dispatch({ type: SET_FANCYTREE, payload: value });\n\n  const updateSelectionTree = (currentSelected) => {\n    dispatch({ type: UPDATE_SELECTION_TREE, payload: currentSelected });\n  };\n\n  const cleanTreeData = () => dispatch({ type: CLEAN_TREE_DATA });\n  const cleanPklTreeData = () => dispatch({ type: CLEAN_TREE_PKL_DATA });\n  const clearFilterTreeView = () =>\n    dispatch({\n      type: CLEAR_FILTER_TREE,\n    });\n  const increaseElapsedLoadingTree = () => {\n    dispatch({ type: INCREASE_LOADING_TREE });\n  };\n\n  const setLoadingTree = () => dispatch({ type: SET_LOADING_TREE }); //here\n  const setOffLoadingTree = () => dispatch({ type: SET_OFF_LOADING_TREE });\n  const setLoadingFilter = () => dispatch({ type: SET_LOADING_FILTER });\n  const setLoadingTreeRefresh = () =>\n    dispatch({ type: SET_LOADING_TREE_REFRESH });\n  const setLoadingTreePkl = () => dispatch({ type: SET_LOADING_TREE_PKL });\n  const setAutoUpdateTreePkl = (value) =>\n    dispatch({ type: SET_AUTOUPDATE_TREE_PKL, payload: value });\n\n  const setStartSelection = () => dispatch({ type: SET_START_TREE_SELECTION });\n  const setNotificationTitleTree = (notification) =>\n    dispatch({ type: SET_NOTIFICATION_TITLE_TREE, payload: notification });\n\n  return (\n    <TreeContext.Provider\n      value={{\n        treedata: state.treedata,\n        loadingTree: state.loadingTree,\n        loadingTreePkl: state.loadingTreePkl,\n        loadingFilterTree: state.loadingFilterTree,\n        enabledTreeSearch: state.enabledTreeSearch,\n        returnFilter: state.returnFilter,\n        fancyTree: state.fancyTree,\n        notificationTitleTree: state.notificationTitleTree,\n        //canSelect: state.canSelect,\n        startAutoUpdateTreePkl: state.startAutoUpdateTreePkl,\n        pkltreechanges: state.pkltreechanges,\n        selectedTreeNode: state.selectedTreeNode,\n        expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n        elapsedLoadingTree: state.elapsedLoadingTree,\n        currentRunIdOnTree: state.currentRunIdOnTree,\n        getExperimentTree,\n        getExperimentTreePkl,\n        filterTreeView,\n        setFancyTree,\n        cleanTreeData,\n        cleanPklTreeData,\n        updateSelectionTree,\n        setAutoUpdateTreePkl,\n        clearFilterTreeView,\n        setStartSelection,\n        setNotificationTitleTree,\n        increaseElapsedLoadingTree,\n        updateTreeContent,\n        getExperimentRunJobData,\n      }}\n    >\n      {props.children}\n    </TreeContext.Provider>\n  );\n};\n\nexport default TreeState;\n"]},"metadata":{},"sourceType":"module"}