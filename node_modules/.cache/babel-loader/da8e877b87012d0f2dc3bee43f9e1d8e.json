{"ast":null,"code":"/*!\n *\n * jquery.fancytree.clones.js\n * Support faster lookup of nodes by key and shared ref-ids.\n * (Extension module for jquery.fancytree.js: https://github.com/mar10/fancytree/)\n *\n * Copyright (c) 2008-2020, Martin Wendt (https://wwWendt.de)\n *\n * Released under the MIT license\n * https://github.com/mar10/fancytree/wiki/LicenseInfo\n *\n * @version 2.37.0\n * @date 2020-09-11T18:58:08Z\n */\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./jquery.fancytree\"], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node/CommonJS\n    require(\"./jquery.fancytree\");\n\n    module.exports = factory(require(\"jquery\"));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  \"use strict\";\n  /*******************************************************************************\n   * Private functions and variables\n   */\n\n  function _assert(cond, msg) {\n    // TODO: see qunit.js extractStacktrace()\n    if (!cond) {\n      msg = msg ? \": \" + msg : \"\";\n      $.error(\"Assertion failed\" + msg);\n    }\n  }\n  /* Return first occurrence of member from array. */\n\n\n  function _removeArrayMember(arr, elem) {\n    // TODO: use Array.indexOf for IE >= 9\n    var i;\n\n    for (i = arr.length - 1; i >= 0; i--) {\n      if (arr[i] === elem) {\n        arr.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n   *\n   * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n   * @see http://github.com/garycourt/murmurhash-js\n   * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n   * @see http://sites.google.com/site/murmurhash/\n   *\n   * @param {string} key ASCII only\n   * @param {boolean} [asString=false]\n   * @param {number} seed Positive integer only\n   * @return {number} 32-bit positive integer hash\n   */\n\n\n  function hashMurmur3(key, asString, seed) {\n    /*eslint-disable no-bitwise */\n    var h1b,\n        k1,\n        remainder = key.length & 3,\n        bytes = key.length - remainder,\n        h1 = seed,\n        c1 = 0xcc9e2d51,\n        c2 = 0x1b873593,\n        i = 0;\n\n    while (i < bytes) {\n      k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n      ++i;\n      k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n      h1 ^= k1;\n      h1 = h1 << 13 | h1 >>> 19;\n      h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n      h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n      // fall through\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n      // fall through\n\n      case 1:\n        k1 ^= key.charCodeAt(i) & 0xff;\n        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 ^= h1 >>> 16;\n    h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    if (asString) {\n      // Convert to 8 digit hex string\n      return (\"0000000\" + (h1 >>> 0).toString(16)).substr(-8);\n    }\n\n    return h1 >>> 0;\n    /*eslint-enable no-bitwise */\n  }\n  /*\n   * Return a unique key for node by calculating the hash of the parents refKey-list.\n   */\n\n\n  function calcUniqueKey(node) {\n    var key,\n        h1,\n        path = $.map(node.getParentList(false, true), function (e) {\n      return e.refKey || e.key;\n    });\n    path = path.join(\"/\"); // 32-bit has a high probability of collisions, so we pump up to 64-bit\n    // https://security.stackexchange.com/q/209882/207588\n\n    h1 = hashMurmur3(path, true);\n    key = \"id_\" + h1 + hashMurmur3(h1 + path, true);\n    return key;\n  }\n  /**\n   * [ext-clones] Return a list of clone-nodes (i.e. same refKey) or null.\n   * @param {boolean} [includeSelf=false]\n   * @returns {FancytreeNode[] | null}\n   *\n   * @alias FancytreeNode#getCloneList\n   * @requires jquery.fancytree.clones.js\n   */\n\n\n  $.ui.fancytree._FancytreeNodeClass.prototype.getCloneList = function (includeSelf) {\n    var key,\n        tree = this.tree,\n        refList = tree.refMap[this.refKey] || null,\n        keyMap = tree.keyMap;\n\n    if (refList) {\n      key = this.key; // Convert key list to node list\n\n      if (includeSelf) {\n        refList = $.map(refList, function (val) {\n          return keyMap[val];\n        });\n      } else {\n        refList = $.map(refList, function (val) {\n          return val === key ? null : keyMap[val];\n        });\n\n        if (refList.length < 1) {\n          refList = null;\n        }\n      }\n    }\n\n    return refList;\n  };\n  /**\n   * [ext-clones] Return true if this node has at least another clone with same refKey.\n   * @returns {boolean}\n   *\n   * @alias FancytreeNode#isClone\n   * @requires jquery.fancytree.clones.js\n   */\n\n\n  $.ui.fancytree._FancytreeNodeClass.prototype.isClone = function () {\n    var refKey = this.refKey || null,\n        refList = refKey && this.tree.refMap[refKey] || null;\n    return !!(refList && refList.length > 1);\n  };\n  /**\n   * [ext-clones] Update key and/or refKey for an existing node.\n   * @param {string} key\n   * @param {string} refKey\n   * @returns {boolean}\n   *\n   * @alias FancytreeNode#reRegister\n   * @requires jquery.fancytree.clones.js\n   */\n\n\n  $.ui.fancytree._FancytreeNodeClass.prototype.reRegister = function (key, refKey) {\n    key = key == null ? null : \"\" + key;\n    refKey = refKey == null ? null : \"\" + refKey; // this.debug(\"reRegister\", key, refKey);\n\n    var tree = this.tree,\n        prevKey = this.key,\n        prevRefKey = this.refKey,\n        keyMap = tree.keyMap,\n        refMap = tree.refMap,\n        refList = refMap[prevRefKey] || null,\n        //\t\tcurCloneKeys = refList ? node.getCloneList(true),\n    modified = false; // Key has changed: update all references\n\n    if (key != null && key !== this.key) {\n      if (keyMap[key]) {\n        $.error(\"[ext-clones] reRegister(\" + key + \"): already exists: \" + this);\n      } // Update keyMap\n\n\n      delete keyMap[prevKey];\n      keyMap[key] = this; // Update refMap\n\n      if (refList) {\n        refMap[prevRefKey] = $.map(refList, function (e) {\n          return e === prevKey ? key : e;\n        });\n      }\n\n      this.key = key;\n      modified = true;\n    } // refKey has changed\n\n\n    if (refKey != null && refKey !== this.refKey) {\n      // Remove previous refKeys\n      if (refList) {\n        if (refList.length === 1) {\n          delete refMap[prevRefKey];\n        } else {\n          refMap[prevRefKey] = $.map(refList, function (e) {\n            return e === prevKey ? null : e;\n          });\n        }\n      } // Add refKey\n\n\n      if (refMap[refKey]) {\n        refMap[refKey].append(key);\n      } else {\n        refMap[refKey] = [this.key];\n      }\n\n      this.refKey = refKey;\n      modified = true;\n    }\n\n    return modified;\n  };\n  /**\n   * [ext-clones] Define a refKey for an existing node.\n   * @param {string} refKey\n   * @returns {boolean}\n   *\n   * @alias FancytreeNode#setRefKey\n   * @requires jquery.fancytree.clones.js\n   * @since 2.16\n   */\n\n\n  $.ui.fancytree._FancytreeNodeClass.prototype.setRefKey = function (refKey) {\n    return this.reRegister(null, refKey);\n  };\n  /**\n   * [ext-clones] Return all nodes with a given refKey (null if not found).\n   * @param {string} refKey\n   * @param {FancytreeNode} [rootNode] optionally restrict results to descendants of this node\n   * @returns {FancytreeNode[] | null}\n   * @alias Fancytree#getNodesByRef\n   * @requires jquery.fancytree.clones.js\n   */\n\n\n  $.ui.fancytree._FancytreeClass.prototype.getNodesByRef = function (refKey, rootNode) {\n    var keyMap = this.keyMap,\n        refList = this.refMap[refKey] || null;\n\n    if (refList) {\n      // Convert key list to node list\n      if (rootNode) {\n        refList = $.map(refList, function (val) {\n          var node = keyMap[val];\n          return node.isDescendantOf(rootNode) ? node : null;\n        });\n      } else {\n        refList = $.map(refList, function (val) {\n          return keyMap[val];\n        });\n      }\n\n      if (refList.length < 1) {\n        refList = null;\n      }\n    }\n\n    return refList;\n  };\n  /**\n   * [ext-clones] Replace a refKey with a new one.\n   * @param {string} oldRefKey\n   * @param {string} newRefKey\n   * @alias Fancytree#changeRefKey\n   * @requires jquery.fancytree.clones.js\n   */\n\n\n  $.ui.fancytree._FancytreeClass.prototype.changeRefKey = function (oldRefKey, newRefKey) {\n    var i,\n        node,\n        keyMap = this.keyMap,\n        refList = this.refMap[oldRefKey] || null;\n\n    if (refList) {\n      for (i = 0; i < refList.length; i++) {\n        node = keyMap[refList[i]];\n        node.refKey = newRefKey;\n      }\n\n      delete this.refMap[oldRefKey];\n      this.refMap[newRefKey] = refList;\n    }\n  };\n  /*******************************************************************************\n   * Extension code\n   */\n\n\n  $.ui.fancytree.registerExtension({\n    name: \"clones\",\n    version: \"2.37.0\",\n    // Default options for this extension.\n    options: {\n      highlightActiveClones: true,\n      // set 'fancytree-active-clone' on active clones and all peers\n      highlightClones: false // set 'fancytree-clone' class on any node that has at least one clone\n\n    },\n    treeCreate: function (ctx) {\n      this._superApply(arguments);\n\n      ctx.tree.refMap = {};\n      ctx.tree.keyMap = {};\n    },\n    treeInit: function (ctx) {\n      this.$container.addClass(\"fancytree-ext-clones\");\n\n      _assert(ctx.options.defaultKey == null); // Generate unique / reproducible default keys\n\n\n      ctx.options.defaultKey = function (node) {\n        return calcUniqueKey(node);\n      }; // The default implementation loads initial data\n\n\n      this._superApply(arguments);\n    },\n    treeClear: function (ctx) {\n      ctx.tree.refMap = {};\n      ctx.tree.keyMap = {};\n      return this._superApply(arguments);\n    },\n    treeRegisterNode: function (ctx, add, node) {\n      var refList,\n          len,\n          tree = ctx.tree,\n          keyMap = tree.keyMap,\n          refMap = tree.refMap,\n          key = node.key,\n          refKey = node && node.refKey != null ? \"\" + node.refKey : null; //\t\tctx.tree.debug(\"clones.treeRegisterNode\", add, node);\n\n      if (node.isStatusNode()) {\n        return this._super(ctx, add, node);\n      }\n\n      if (add) {\n        if (keyMap[node.key] != null) {\n          var other = keyMap[node.key],\n              msg = \"clones.treeRegisterNode: duplicate key '\" + node.key + \"': /\" + node.getPath(true) + \" => \" + other.getPath(true); // Sometimes this exception is not visible in the console,\n          // so we also write it:\n\n          tree.error(msg);\n          $.error(msg);\n        }\n\n        keyMap[key] = node;\n\n        if (refKey) {\n          refList = refMap[refKey];\n\n          if (refList) {\n            refList.push(key);\n\n            if (refList.length === 2 && ctx.options.clones.highlightClones) {\n              // Mark peer node, if it just became a clone (no need to\n              // mark current node, since it will be rendered later anyway)\n              keyMap[refList[0]].renderStatus();\n            }\n          } else {\n            refMap[refKey] = [key];\n          } // node.debug(\"clones.treeRegisterNode: add clone =>\", refMap[refKey]);\n\n        }\n      } else {\n        if (keyMap[key] == null) {\n          $.error(\"clones.treeRegisterNode: node.key not registered: \" + node.key);\n        }\n\n        delete keyMap[key];\n\n        if (refKey) {\n          refList = refMap[refKey]; // node.debug(\"clones.treeRegisterNode: remove clone BEFORE =>\", refMap[refKey]);\n\n          if (refList) {\n            len = refList.length;\n\n            if (len <= 1) {\n              _assert(len === 1);\n\n              _assert(refList[0] === key);\n\n              delete refMap[refKey];\n            } else {\n              _removeArrayMember(refList, key); // Unmark peer node, if this was the only clone\n\n\n              if (len === 2 && ctx.options.clones.highlightClones) {\n                //\t\t\t\t\t\t\tnode.debug(\"clones.treeRegisterNode: last =>\", node.getCloneList());\n                keyMap[refList[0]].renderStatus();\n              }\n            } // node.debug(\"clones.treeRegisterNode: remove clone =>\", refMap[refKey]);\n\n          }\n        }\n      }\n\n      return this._super(ctx, add, node);\n    },\n    nodeRenderStatus: function (ctx) {\n      var $span,\n          res,\n          node = ctx.node;\n      res = this._super(ctx);\n\n      if (ctx.options.clones.highlightClones) {\n        $span = $(node[ctx.tree.statusClassPropName]); // Only if span already exists\n\n        if ($span.length && node.isClone()) {\n          //\t\t\t\tnode.debug(\"clones.nodeRenderStatus: \", ctx.options.clones.highlightClones);\n          $span.addClass(\"fancytree-clone\");\n        }\n      }\n\n      return res;\n    },\n    nodeSetActive: function (ctx, flag, callOpts) {\n      var res,\n          scpn = ctx.tree.statusClassPropName,\n          node = ctx.node;\n      res = this._superApply(arguments);\n\n      if (ctx.options.clones.highlightActiveClones && node.isClone()) {\n        $.each(node.getCloneList(true), function (idx, n) {\n          // n.debug(\"clones.nodeSetActive: \", flag !== false);\n          $(n[scpn]).toggleClass(\"fancytree-active-clone\", flag !== false);\n        });\n      }\n\n      return res;\n    }\n  }); // Value returned by `require('jquery.fancytree..')`\n\n  return $.ui.fancytree;\n}); // End of closure","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/jquery.fancytree/dist/modules/jquery.fancytree.clones.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","_assert","cond","msg","error","_removeArrayMember","arr","elem","i","length","splice","hashMurmur3","key","asString","seed","h1b","k1","remainder","bytes","h1","c1","c2","charCodeAt","toString","substr","calcUniqueKey","node","path","map","getParentList","e","refKey","join","ui","fancytree","_FancytreeNodeClass","prototype","getCloneList","includeSelf","tree","refList","refMap","keyMap","val","isClone","reRegister","prevKey","prevRefKey","modified","append","setRefKey","_FancytreeClass","getNodesByRef","rootNode","isDescendantOf","changeRefKey","oldRefKey","newRefKey","registerExtension","name","version","options","highlightActiveClones","highlightClones","treeCreate","ctx","_superApply","arguments","treeInit","$container","addClass","defaultKey","treeClear","treeRegisterNode","add","len","isStatusNode","_super","other","getPath","push","clones","renderStatus","nodeRenderStatus","$span","res","statusClassPropName","nodeSetActive","flag","callOpts","scpn","each","idx","n","toggleClass"],"mappings":"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","sourcesContent":["/*!\n *\n * jquery.fancytree.clones.js\n * Support faster lookup of nodes by key and shared ref-ids.\n * (Extension module for jquery.fancytree.js: https://github.com/mar10/fancytree/)\n *\n * Copyright (c) 2008-2020, Martin Wendt (https://wwWendt.de)\n *\n * Released under the MIT license\n * https://github.com/mar10/fancytree/wiki/LicenseInfo\n *\n * @version 2.37.0\n * @date 2020-09-11T18:58:08Z\n */\n\n(function(factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([\"jquery\", \"./jquery.fancytree\"], factory);\n\t} else if (typeof module === \"object\" && module.exports) {\n\t\t// Node/CommonJS\n\t\trequire(\"./jquery.fancytree\");\n\t\tmodule.exports = factory(require(\"jquery\"));\n\t} else {\n\t\t// Browser globals\n\t\tfactory(jQuery);\n\t}\n})(function($) {\n\t\"use strict\";\n\n\t/*******************************************************************************\n\t * Private functions and variables\n\t */\n\tfunction _assert(cond, msg) {\n\t\t// TODO: see qunit.js extractStacktrace()\n\t\tif (!cond) {\n\t\t\tmsg = msg ? \": \" + msg : \"\";\n\t\t\t$.error(\"Assertion failed\" + msg);\n\t\t}\n\t}\n\n\t/* Return first occurrence of member from array. */\n\tfunction _removeArrayMember(arr, elem) {\n\t\t// TODO: use Array.indexOf for IE >= 9\n\t\tvar i;\n\t\tfor (i = arr.length - 1; i >= 0; i--) {\n\t\t\tif (arr[i] === elem) {\n\t\t\t\tarr.splice(i, 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n\t *\n\t * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n\t * @see http://github.com/garycourt/murmurhash-js\n\t * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n\t * @see http://sites.google.com/site/murmurhash/\n\t *\n\t * @param {string} key ASCII only\n\t * @param {boolean} [asString=false]\n\t * @param {number} seed Positive integer only\n\t * @return {number} 32-bit positive integer hash\n\t */\n\tfunction hashMurmur3(key, asString, seed) {\n\t\t/*eslint-disable no-bitwise */\n\t\tvar h1b,\n\t\t\tk1,\n\t\t\tremainder = key.length & 3,\n\t\t\tbytes = key.length - remainder,\n\t\t\th1 = seed,\n\t\t\tc1 = 0xcc9e2d51,\n\t\t\tc2 = 0x1b873593,\n\t\t\ti = 0;\n\n\t\twhile (i < bytes) {\n\t\t\tk1 =\n\t\t\t\t(key.charCodeAt(i) & 0xff) |\n\t\t\t\t((key.charCodeAt(++i) & 0xff) << 8) |\n\t\t\t\t((key.charCodeAt(++i) & 0xff) << 16) |\n\t\t\t\t((key.charCodeAt(++i) & 0xff) << 24);\n\t\t\t++i;\n\n\t\t\tk1 =\n\t\t\t\t((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) &\n\t\t\t\t0xffffffff;\n\t\t\tk1 = (k1 << 15) | (k1 >>> 17);\n\t\t\tk1 =\n\t\t\t\t((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) &\n\t\t\t\t0xffffffff;\n\n\t\t\th1 ^= k1;\n\t\t\th1 = (h1 << 13) | (h1 >>> 19);\n\t\t\th1b =\n\t\t\t\t((h1 & 0xffff) * 5 + ((((h1 >>> 16) * 5) & 0xffff) << 16)) &\n\t\t\t\t0xffffffff;\n\t\t\th1 =\n\t\t\t\t(h1b & 0xffff) +\n\t\t\t\t0x6b64 +\n\t\t\t\t((((h1b >>> 16) + 0xe654) & 0xffff) << 16);\n\t\t}\n\n\t\tk1 = 0;\n\n\t\tswitch (remainder) {\n\t\t\tcase 3:\n\t\t\t\tk1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\t\t\t// fall through\n\t\t\tcase 2:\n\t\t\t\tk1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\t\t\t// fall through\n\t\t\tcase 1:\n\t\t\t\tk1 ^= key.charCodeAt(i) & 0xff;\n\n\t\t\t\tk1 =\n\t\t\t\t\t((k1 & 0xffff) * c1 +\n\t\t\t\t\t\t((((k1 >>> 16) * c1) & 0xffff) << 16)) &\n\t\t\t\t\t0xffffffff;\n\t\t\t\tk1 = (k1 << 15) | (k1 >>> 17);\n\t\t\t\tk1 =\n\t\t\t\t\t((k1 & 0xffff) * c2 +\n\t\t\t\t\t\t((((k1 >>> 16) * c2) & 0xffff) << 16)) &\n\t\t\t\t\t0xffffffff;\n\t\t\t\th1 ^= k1;\n\t\t}\n\n\t\th1 ^= key.length;\n\n\t\th1 ^= h1 >>> 16;\n\t\th1 =\n\t\t\t((h1 & 0xffff) * 0x85ebca6b +\n\t\t\t\t((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) &\n\t\t\t0xffffffff;\n\t\th1 ^= h1 >>> 13;\n\t\th1 =\n\t\t\t((h1 & 0xffff) * 0xc2b2ae35 +\n\t\t\t\t((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) &\n\t\t\t0xffffffff;\n\t\th1 ^= h1 >>> 16;\n\n\t\tif (asString) {\n\t\t\t// Convert to 8 digit hex string\n\t\t\treturn (\"0000000\" + (h1 >>> 0).toString(16)).substr(-8);\n\t\t}\n\t\treturn h1 >>> 0;\n\t\t/*eslint-enable no-bitwise */\n\t}\n\n\t/*\n\t * Return a unique key for node by calculating the hash of the parents refKey-list.\n\t */\n\tfunction calcUniqueKey(node) {\n\t\tvar key,\n\t\t\th1,\n\t\t\tpath = $.map(node.getParentList(false, true), function(e) {\n\t\t\t\treturn e.refKey || e.key;\n\t\t\t});\n\n\t\tpath = path.join(\"/\");\n\t\t// 32-bit has a high probability of collisions, so we pump up to 64-bit\n\t\t// https://security.stackexchange.com/q/209882/207588\n\n\t\th1 = hashMurmur3(path, true);\n\t\tkey = \"id_\" + h1 + hashMurmur3(h1 + path, true);\n\n\t\treturn key;\n\t}\n\n\t/**\n\t * [ext-clones] Return a list of clone-nodes (i.e. same refKey) or null.\n\t * @param {boolean} [includeSelf=false]\n\t * @returns {FancytreeNode[] | null}\n\t *\n\t * @alias FancytreeNode#getCloneList\n\t * @requires jquery.fancytree.clones.js\n\t */\n\t$.ui.fancytree._FancytreeNodeClass.prototype.getCloneList = function(\n\t\tincludeSelf\n\t) {\n\t\tvar key,\n\t\t\ttree = this.tree,\n\t\t\trefList = tree.refMap[this.refKey] || null,\n\t\t\tkeyMap = tree.keyMap;\n\n\t\tif (refList) {\n\t\t\tkey = this.key;\n\t\t\t// Convert key list to node list\n\t\t\tif (includeSelf) {\n\t\t\t\trefList = $.map(refList, function(val) {\n\t\t\t\t\treturn keyMap[val];\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trefList = $.map(refList, function(val) {\n\t\t\t\t\treturn val === key ? null : keyMap[val];\n\t\t\t\t});\n\t\t\t\tif (refList.length < 1) {\n\t\t\t\t\trefList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn refList;\n\t};\n\n\t/**\n\t * [ext-clones] Return true if this node has at least another clone with same refKey.\n\t * @returns {boolean}\n\t *\n\t * @alias FancytreeNode#isClone\n\t * @requires jquery.fancytree.clones.js\n\t */\n\t$.ui.fancytree._FancytreeNodeClass.prototype.isClone = function() {\n\t\tvar refKey = this.refKey || null,\n\t\t\trefList = (refKey && this.tree.refMap[refKey]) || null;\n\t\treturn !!(refList && refList.length > 1);\n\t};\n\n\t/**\n\t * [ext-clones] Update key and/or refKey for an existing node.\n\t * @param {string} key\n\t * @param {string} refKey\n\t * @returns {boolean}\n\t *\n\t * @alias FancytreeNode#reRegister\n\t * @requires jquery.fancytree.clones.js\n\t */\n\t$.ui.fancytree._FancytreeNodeClass.prototype.reRegister = function(\n\t\tkey,\n\t\trefKey\n\t) {\n\t\tkey = key == null ? null : \"\" + key;\n\t\trefKey = refKey == null ? null : \"\" + refKey;\n\t\t// this.debug(\"reRegister\", key, refKey);\n\n\t\tvar tree = this.tree,\n\t\t\tprevKey = this.key,\n\t\t\tprevRefKey = this.refKey,\n\t\t\tkeyMap = tree.keyMap,\n\t\t\trefMap = tree.refMap,\n\t\t\trefList = refMap[prevRefKey] || null,\n\t\t\t//\t\tcurCloneKeys = refList ? node.getCloneList(true),\n\t\t\tmodified = false;\n\n\t\t// Key has changed: update all references\n\t\tif (key != null && key !== this.key) {\n\t\t\tif (keyMap[key]) {\n\t\t\t\t$.error(\n\t\t\t\t\t\"[ext-clones] reRegister(\" +\n\t\t\t\t\t\tkey +\n\t\t\t\t\t\t\"): already exists: \" +\n\t\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Update keyMap\n\t\t\tdelete keyMap[prevKey];\n\t\t\tkeyMap[key] = this;\n\t\t\t// Update refMap\n\t\t\tif (refList) {\n\t\t\t\trefMap[prevRefKey] = $.map(refList, function(e) {\n\t\t\t\t\treturn e === prevKey ? key : e;\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.key = key;\n\t\t\tmodified = true;\n\t\t}\n\n\t\t// refKey has changed\n\t\tif (refKey != null && refKey !== this.refKey) {\n\t\t\t// Remove previous refKeys\n\t\t\tif (refList) {\n\t\t\t\tif (refList.length === 1) {\n\t\t\t\t\tdelete refMap[prevRefKey];\n\t\t\t\t} else {\n\t\t\t\t\trefMap[prevRefKey] = $.map(refList, function(e) {\n\t\t\t\t\t\treturn e === prevKey ? null : e;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add refKey\n\t\t\tif (refMap[refKey]) {\n\t\t\t\trefMap[refKey].append(key);\n\t\t\t} else {\n\t\t\t\trefMap[refKey] = [this.key];\n\t\t\t}\n\t\t\tthis.refKey = refKey;\n\t\t\tmodified = true;\n\t\t}\n\t\treturn modified;\n\t};\n\n\t/**\n\t * [ext-clones] Define a refKey for an existing node.\n\t * @param {string} refKey\n\t * @returns {boolean}\n\t *\n\t * @alias FancytreeNode#setRefKey\n\t * @requires jquery.fancytree.clones.js\n\t * @since 2.16\n\t */\n\t$.ui.fancytree._FancytreeNodeClass.prototype.setRefKey = function(refKey) {\n\t\treturn this.reRegister(null, refKey);\n\t};\n\n\t/**\n\t * [ext-clones] Return all nodes with a given refKey (null if not found).\n\t * @param {string} refKey\n\t * @param {FancytreeNode} [rootNode] optionally restrict results to descendants of this node\n\t * @returns {FancytreeNode[] | null}\n\t * @alias Fancytree#getNodesByRef\n\t * @requires jquery.fancytree.clones.js\n\t */\n\t$.ui.fancytree._FancytreeClass.prototype.getNodesByRef = function(\n\t\trefKey,\n\t\trootNode\n\t) {\n\t\tvar keyMap = this.keyMap,\n\t\t\trefList = this.refMap[refKey] || null;\n\n\t\tif (refList) {\n\t\t\t// Convert key list to node list\n\t\t\tif (rootNode) {\n\t\t\t\trefList = $.map(refList, function(val) {\n\t\t\t\t\tvar node = keyMap[val];\n\t\t\t\t\treturn node.isDescendantOf(rootNode) ? node : null;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trefList = $.map(refList, function(val) {\n\t\t\t\t\treturn keyMap[val];\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (refList.length < 1) {\n\t\t\t\trefList = null;\n\t\t\t}\n\t\t}\n\t\treturn refList;\n\t};\n\n\t/**\n\t * [ext-clones] Replace a refKey with a new one.\n\t * @param {string} oldRefKey\n\t * @param {string} newRefKey\n\t * @alias Fancytree#changeRefKey\n\t * @requires jquery.fancytree.clones.js\n\t */\n\t$.ui.fancytree._FancytreeClass.prototype.changeRefKey = function(\n\t\toldRefKey,\n\t\tnewRefKey\n\t) {\n\t\tvar i,\n\t\t\tnode,\n\t\t\tkeyMap = this.keyMap,\n\t\t\trefList = this.refMap[oldRefKey] || null;\n\n\t\tif (refList) {\n\t\t\tfor (i = 0; i < refList.length; i++) {\n\t\t\t\tnode = keyMap[refList[i]];\n\t\t\t\tnode.refKey = newRefKey;\n\t\t\t}\n\t\t\tdelete this.refMap[oldRefKey];\n\t\t\tthis.refMap[newRefKey] = refList;\n\t\t}\n\t};\n\n\t/*******************************************************************************\n\t * Extension code\n\t */\n\t$.ui.fancytree.registerExtension({\n\t\tname: \"clones\",\n\t\tversion: \"2.37.0\",\n\t\t// Default options for this extension.\n\t\toptions: {\n\t\t\thighlightActiveClones: true, // set 'fancytree-active-clone' on active clones and all peers\n\t\t\thighlightClones: false, // set 'fancytree-clone' class on any node that has at least one clone\n\t\t},\n\n\t\ttreeCreate: function(ctx) {\n\t\t\tthis._superApply(arguments);\n\t\t\tctx.tree.refMap = {};\n\t\t\tctx.tree.keyMap = {};\n\t\t},\n\t\ttreeInit: function(ctx) {\n\t\t\tthis.$container.addClass(\"fancytree-ext-clones\");\n\t\t\t_assert(ctx.options.defaultKey == null);\n\t\t\t// Generate unique / reproducible default keys\n\t\t\tctx.options.defaultKey = function(node) {\n\t\t\t\treturn calcUniqueKey(node);\n\t\t\t};\n\t\t\t// The default implementation loads initial data\n\t\t\tthis._superApply(arguments);\n\t\t},\n\t\ttreeClear: function(ctx) {\n\t\t\tctx.tree.refMap = {};\n\t\t\tctx.tree.keyMap = {};\n\t\t\treturn this._superApply(arguments);\n\t\t},\n\t\ttreeRegisterNode: function(ctx, add, node) {\n\t\t\tvar refList,\n\t\t\t\tlen,\n\t\t\t\ttree = ctx.tree,\n\t\t\t\tkeyMap = tree.keyMap,\n\t\t\t\trefMap = tree.refMap,\n\t\t\t\tkey = node.key,\n\t\t\t\trefKey = node && node.refKey != null ? \"\" + node.refKey : null;\n\n\t\t\t//\t\tctx.tree.debug(\"clones.treeRegisterNode\", add, node);\n\n\t\t\tif (node.isStatusNode()) {\n\t\t\t\treturn this._super(ctx, add, node);\n\t\t\t}\n\n\t\t\tif (add) {\n\t\t\t\tif (keyMap[node.key] != null) {\n\t\t\t\t\tvar other = keyMap[node.key],\n\t\t\t\t\t\tmsg =\n\t\t\t\t\t\t\t\"clones.treeRegisterNode: duplicate key '\" +\n\t\t\t\t\t\t\tnode.key +\n\t\t\t\t\t\t\t\"': /\" +\n\t\t\t\t\t\t\tnode.getPath(true) +\n\t\t\t\t\t\t\t\" => \" +\n\t\t\t\t\t\t\tother.getPath(true);\n\t\t\t\t\t// Sometimes this exception is not visible in the console,\n\t\t\t\t\t// so we also write it:\n\t\t\t\t\ttree.error(msg);\n\t\t\t\t\t$.error(msg);\n\t\t\t\t}\n\t\t\t\tkeyMap[key] = node;\n\n\t\t\t\tif (refKey) {\n\t\t\t\t\trefList = refMap[refKey];\n\t\t\t\t\tif (refList) {\n\t\t\t\t\t\trefList.push(key);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\trefList.length === 2 &&\n\t\t\t\t\t\t\tctx.options.clones.highlightClones\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Mark peer node, if it just became a clone (no need to\n\t\t\t\t\t\t\t// mark current node, since it will be rendered later anyway)\n\t\t\t\t\t\t\tkeyMap[refList[0]].renderStatus();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trefMap[refKey] = [key];\n\t\t\t\t\t}\n\t\t\t\t\t// node.debug(\"clones.treeRegisterNode: add clone =>\", refMap[refKey]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (keyMap[key] == null) {\n\t\t\t\t\t$.error(\n\t\t\t\t\t\t\"clones.treeRegisterNode: node.key not registered: \" +\n\t\t\t\t\t\t\tnode.key\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdelete keyMap[key];\n\t\t\t\tif (refKey) {\n\t\t\t\t\trefList = refMap[refKey];\n\t\t\t\t\t// node.debug(\"clones.treeRegisterNode: remove clone BEFORE =>\", refMap[refKey]);\n\t\t\t\t\tif (refList) {\n\t\t\t\t\t\tlen = refList.length;\n\t\t\t\t\t\tif (len <= 1) {\n\t\t\t\t\t\t\t_assert(len === 1);\n\t\t\t\t\t\t\t_assert(refList[0] === key);\n\t\t\t\t\t\t\tdelete refMap[refKey];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_removeArrayMember(refList, key);\n\t\t\t\t\t\t\t// Unmark peer node, if this was the only clone\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlen === 2 &&\n\t\t\t\t\t\t\t\tctx.options.clones.highlightClones\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t//\t\t\t\t\t\t\tnode.debug(\"clones.treeRegisterNode: last =>\", node.getCloneList());\n\t\t\t\t\t\t\t\tkeyMap[refList[0]].renderStatus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// node.debug(\"clones.treeRegisterNode: remove clone =>\", refMap[refKey]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._super(ctx, add, node);\n\t\t},\n\t\tnodeRenderStatus: function(ctx) {\n\t\t\tvar $span,\n\t\t\t\tres,\n\t\t\t\tnode = ctx.node;\n\n\t\t\tres = this._super(ctx);\n\n\t\t\tif (ctx.options.clones.highlightClones) {\n\t\t\t\t$span = $(node[ctx.tree.statusClassPropName]);\n\t\t\t\t// Only if span already exists\n\t\t\t\tif ($span.length && node.isClone()) {\n\t\t\t\t\t//\t\t\t\tnode.debug(\"clones.nodeRenderStatus: \", ctx.options.clones.highlightClones);\n\t\t\t\t\t$span.addClass(\"fancytree-clone\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\tnodeSetActive: function(ctx, flag, callOpts) {\n\t\t\tvar res,\n\t\t\t\tscpn = ctx.tree.statusClassPropName,\n\t\t\t\tnode = ctx.node;\n\n\t\t\tres = this._superApply(arguments);\n\n\t\t\tif (ctx.options.clones.highlightActiveClones && node.isClone()) {\n\t\t\t\t$.each(node.getCloneList(true), function(idx, n) {\n\t\t\t\t\t// n.debug(\"clones.nodeSetActive: \", flag !== false);\n\t\t\t\t\t$(n[scpn]).toggleClass(\n\t\t\t\t\t\t\"fancytree-active-clone\",\n\t\t\t\t\t\tflag !== false\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t});\n\t// Value returned by `require('jquery.fancytree..')`\n\treturn $.ui.fancytree;\n}); // End of closure\n"]},"metadata":{},"sourceType":"script"}