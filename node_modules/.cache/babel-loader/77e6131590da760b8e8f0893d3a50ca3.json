{"ast":null,"code":"import _regeneratorRuntime from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/BleuDChan/ReposBSC/autosubmitreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useReducer}from\"react\";import axios from\"axios\";import TreeContext from\"./treeContext\";import TreeReducer from\"./treeReducer\";import{GET_TREE,SET_LOADING_TREE_REFRESH,SET_LOADING_TREE_PKL,PKL_TREE_LOADED,SET_FANCYTREE,SET_LOADING_FILTER,CLEAN_TREE_DATA,CLEAN_TREE_PKL_DATA,SET_AUTOUPDATE_TREE_PKL,UPDATE_SELECTION_TREE,CLEAR_FILTER_TREE,FILTER_TREEVIEW,SET_LOADING_TREE,SET_START_TREE_SELECTION,SET_NOTIFICATION_TITLE_TREE,SET_OFF_LOADING_TREE,INCREASE_LOADING_TREE,UPDATE_RUNDETAIL_ON_TREE,GET_EXPERIMENT_RUN_JOBDATA,LOADING_PREVIOUS_RUN}from\"../types\";// import { start, end } from \"../utils\";\nimport{AUTOSUBMIT_API_SOURCE,DEBUG,NOAPI}from\"../vars\";var TreeState=function TreeState(props){var initialState={treedata:null,loadingTree:false,enabledTreeSearch:true,loadingTreePkl:false,loadingTreeRefresh:false,loadingFilterTree:false,loadingPreviousRun:false,fancyTree:null,experimentRunDetailForTree:null,currentRunIdOnTree:null,elapsedLoadingTree:1,startAutoUpdateTreePkl:false,pkltreechanges:null,selectedTreeNode:null,notificationTitleTree:null};var _useReducer=useReducer(TreeReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];var localserver=AUTOSUBMIT_API_SOURCE;var debug=DEBUG;var getExperimentTree=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(expid){var result,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setLoadingTree();result=null;//start();\nif(!NOAPI){_context.next=6;break;}result=require(\"../data/tree_\"+String(expid)+\".json\");_context.next=10;break;case 6:_context.next=8;return axios.get(\"\".concat(localserver,\"/tree/\").concat(expid)).catch(function(error){alert(error.message);setOffLoadingTree();});case 8:res=_context.sent;result=res?res.data:null;case 10:if(result){debug&&console.log(result);dispatch({type:GET_TREE,payload:result});}//end();\ncase 11:case\"end\":return _context.stop();}}},_callee);}));return function getExperimentTree(_x){return _ref.apply(this,arguments);};}();// Get experiment pkl data for tree\nvar getExperimentTreePkl=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(expid,timeStamp){var retrievedPklTree,res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0://console.log(expid, timeStamp);\nsetLoadingTreePkl();setLoadingTreeRefresh();retrievedPklTree=null;if(!NOAPI){_context2.next=7;break;}retrievedPklTree=require(\"../data/pkltreeinfo_\"+String(expid)+\".json\");_context2.next=12;break;case 7:_context2.next=9;return axios.get(\"\".concat(localserver,\"/pkltreeinfo/\").concat(expid,\"/\").concat(timeStamp));case 9:res=_context2.sent;retrievedPklTree=res.data;debug&&console.log(retrievedPklTree);case 12:dispatch({type:PKL_TREE_LOADED,payload:retrievedPklTree});case 13:case\"end\":return _context2.stop();}}},_callee2);}));return function getExperimentTreePkl(_x2,_x3){return _ref2.apply(this,arguments);};}();var getExperimentRunJobData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(expid,run_id,meta){var result,res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:setLoadingPreviousRun();result=null;if(!NOAPI){_context3.next=6;break;}result=require(\"../data/rundetail_\"+String(expid)+\"_\"+String(run_id)+\".json\").rundata;_context3.next=11;break;case 6:_context3.next=8;return axios.get(\"\".concat(localserver,\"/rundetail/\").concat(expid,\"/\").concat(run_id)).catch(function(error){alert(error.message);});case 8:res=_context3.sent;debug&&console.log(res.data);// console.log(res.data);\nresult=res?res.data.rundata:null;case 11:dispatch({type:GET_EXPERIMENT_RUN_JOBDATA,payload:{result:result,runId:run_id,meta:meta}});// setAutoUpdateTreePkl(false);\ncase 12:case\"end\":return _context3.stop();}}},_callee3);}));return function getExperimentRunJobData(_x4,_x5,_x6){return _ref3.apply(this,arguments);};}();var updateTreeContent=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(runDetail,run_id){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:// setLoadingTreePkl();\n// setLoadingTreeRefresh();\n// setLoadingTree();\ndispatch({type:UPDATE_RUNDETAIL_ON_TREE,payload:{runDetail:runDetail,runId:run_id}});case 1:case\"end\":return _context4.stop();}}},_callee4);}));return function updateTreeContent(_x7,_x8){return _ref4.apply(this,arguments);};}();var filterTreeView=function filterTreeView(string){setLoadingFilter();dispatch({type:FILTER_TREEVIEW,payload:string});};var setFancyTree=function setFancyTree(value){return dispatch({type:SET_FANCYTREE,payload:value});};var updateSelectionTree=function updateSelectionTree(currentSelected){dispatch({type:UPDATE_SELECTION_TREE,payload:currentSelected});};var cleanTreeData=function cleanTreeData(){return dispatch({type:CLEAN_TREE_DATA});};var cleanPklTreeData=function cleanPklTreeData(){return dispatch({type:CLEAN_TREE_PKL_DATA});};var clearFilterTreeView=function clearFilterTreeView(){return dispatch({type:CLEAR_FILTER_TREE});};var increaseElapsedLoadingTree=function increaseElapsedLoadingTree(){dispatch({type:INCREASE_LOADING_TREE});};var setLoadingTree=function setLoadingTree(){return dispatch({type:SET_LOADING_TREE});};//here\nvar setLoadingPreviousRun=function setLoadingPreviousRun(){return dispatch({type:LOADING_PREVIOUS_RUN});};var setOffLoadingTree=function setOffLoadingTree(){return dispatch({type:SET_OFF_LOADING_TREE});};var setLoadingFilter=function setLoadingFilter(){return dispatch({type:SET_LOADING_FILTER});};var setLoadingTreeRefresh=function setLoadingTreeRefresh(){return dispatch({type:SET_LOADING_TREE_REFRESH});};var setLoadingTreePkl=function setLoadingTreePkl(){return dispatch({type:SET_LOADING_TREE_PKL});};var setAutoUpdateTreePkl=function setAutoUpdateTreePkl(value){return dispatch({type:SET_AUTOUPDATE_TREE_PKL,payload:value});};var setStartSelection=function setStartSelection(){return dispatch({type:SET_START_TREE_SELECTION});};var setNotificationTitleTree=function setNotificationTitleTree(notification){return dispatch({type:SET_NOTIFICATION_TITLE_TREE,payload:notification});};return/*#__PURE__*/React.createElement(TreeContext.Provider,{value:{treedata:state.treedata,loadingTree:state.loadingTree,loadingTreePkl:state.loadingTreePkl,loadingFilterTree:state.loadingFilterTree,enabledTreeSearch:state.enabledTreeSearch,returnFilter:state.returnFilter,fancyTree:state.fancyTree,notificationTitleTree:state.notificationTitleTree,loadingPreviousRun:state.loadingPreviousRun,startAutoUpdateTreePkl:state.startAutoUpdateTreePkl,pkltreechanges:state.pkltreechanges,selectedTreeNode:state.selectedTreeNode,expectedLoadingTreeTime:state.expectedLoadingTreeTime,elapsedLoadingTree:state.elapsedLoadingTree,currentRunIdOnTree:state.currentRunIdOnTree,getExperimentTree:getExperimentTree,getExperimentTreePkl:getExperimentTreePkl,filterTreeView:filterTreeView,setFancyTree:setFancyTree,cleanTreeData:cleanTreeData,cleanPklTreeData:cleanPklTreeData,updateSelectionTree:updateSelectionTree,setAutoUpdateTreePkl:setAutoUpdateTreePkl,clearFilterTreeView:clearFilterTreeView,setStartSelection:setStartSelection,setNotificationTitleTree:setNotificationTitleTree,increaseElapsedLoadingTree:increaseElapsedLoadingTree,updateTreeContent:updateTreeContent,getExperimentRunJobData:getExperimentRunJobData}},props.children);};export default TreeState;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/tree/TreeState.js"],"names":["React","useReducer","axios","TreeContext","TreeReducer","GET_TREE","SET_LOADING_TREE_REFRESH","SET_LOADING_TREE_PKL","PKL_TREE_LOADED","SET_FANCYTREE","SET_LOADING_FILTER","CLEAN_TREE_DATA","CLEAN_TREE_PKL_DATA","SET_AUTOUPDATE_TREE_PKL","UPDATE_SELECTION_TREE","CLEAR_FILTER_TREE","FILTER_TREEVIEW","SET_LOADING_TREE","SET_START_TREE_SELECTION","SET_NOTIFICATION_TITLE_TREE","SET_OFF_LOADING_TREE","INCREASE_LOADING_TREE","UPDATE_RUNDETAIL_ON_TREE","GET_EXPERIMENT_RUN_JOBDATA","LOADING_PREVIOUS_RUN","AUTOSUBMIT_API_SOURCE","DEBUG","NOAPI","TreeState","props","initialState","treedata","loadingTree","enabledTreeSearch","loadingTreePkl","loadingTreeRefresh","loadingFilterTree","loadingPreviousRun","fancyTree","experimentRunDetailForTree","currentRunIdOnTree","elapsedLoadingTree","startAutoUpdateTreePkl","pkltreechanges","selectedTreeNode","notificationTitleTree","state","dispatch","localserver","debug","getExperimentTree","expid","setLoadingTree","result","require","String","get","catch","error","alert","message","setOffLoadingTree","res","data","console","log","type","payload","getExperimentTreePkl","timeStamp","setLoadingTreePkl","setLoadingTreeRefresh","retrievedPklTree","getExperimentRunJobData","run_id","meta","setLoadingPreviousRun","rundata","runId","updateTreeContent","runDetail","filterTreeView","string","setLoadingFilter","setFancyTree","value","updateSelectionTree","currentSelected","cleanTreeData","cleanPklTreeData","clearFilterTreeView","increaseElapsedLoadingTree","setAutoUpdateTreePkl","setStartSelection","setNotificationTitleTree","notification","returnFilter","expectedLoadingTreeTime","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport TreeContext from \"./treeContext\";\nimport TreeReducer from \"./treeReducer\";\n\nimport {\n  GET_TREE,\n  SET_LOADING_TREE_REFRESH,\n  SET_LOADING_TREE_PKL,\n  PKL_TREE_LOADED,\n  SET_FANCYTREE,\n  SET_LOADING_FILTER,\n  CLEAN_TREE_DATA,\n  CLEAN_TREE_PKL_DATA,\n  SET_AUTOUPDATE_TREE_PKL,\n  UPDATE_SELECTION_TREE,\n  CLEAR_FILTER_TREE,\n  FILTER_TREEVIEW,\n  SET_LOADING_TREE,\n  SET_START_TREE_SELECTION,\n  SET_NOTIFICATION_TITLE_TREE,\n  SET_OFF_LOADING_TREE,\n  INCREASE_LOADING_TREE,\n  UPDATE_RUNDETAIL_ON_TREE,\n  GET_EXPERIMENT_RUN_JOBDATA,  \n  LOADING_PREVIOUS_RUN,\n} from \"../types\";\n\n// import { start, end } from \"../utils\";\n\nimport { AUTOSUBMIT_API_SOURCE, DEBUG, NOAPI } from \"../vars\";\n\nconst TreeState = (props) => {\n  const initialState = {\n    treedata: null,\n    loadingTree: false,\n    enabledTreeSearch: true,\n    loadingTreePkl: false,\n    loadingTreeRefresh: false,\n    loadingFilterTree: false,\n    loadingPreviousRun: false,\n    fancyTree: null,\n    experimentRunDetailForTree: null,\n    currentRunIdOnTree: null,\n    elapsedLoadingTree: 1,\n    startAutoUpdateTreePkl: false,\n    pkltreechanges: null,\n    selectedTreeNode: null,\n    notificationTitleTree: null,\n  };\n\n  const [state, dispatch] = useReducer(TreeReducer, initialState);\n  const localserver = AUTOSUBMIT_API_SOURCE;\n  const debug = DEBUG;\n  \n  const getExperimentTree = async (expid) => {\n    setLoadingTree();\n    let result = null;\n    //start();\n    if (NOAPI) {\n      result = require(\"../data/tree_\"+String(expid)+\".json\");\n    } else {\n      const res = await axios\n      .get(`${localserver}/tree/${expid}`)\n      .catch((error) => {\n        alert(error.message);\n        setOffLoadingTree();\n      });\n      result = res ? res.data : null;\n    }\n  \n    if (result) {\n      debug && console.log(result);\n      dispatch({\n        type: GET_TREE,\n        payload: result,\n      });\n    }\n\n    //end();\n  };\n\n  // Get experiment pkl data for tree\n  const getExperimentTreePkl = async (expid, timeStamp) => {\n    //console.log(expid, timeStamp);\n    setLoadingTreePkl();\n    setLoadingTreeRefresh();\n    let retrievedPklTree = null;\n    if (NOAPI) {\n      retrievedPklTree = require(\"../data/pkltreeinfo_\"+String(expid)+\".json\");\n    } else {\n      const res = await axios.get(\n        `${localserver}/pkltreeinfo/${expid}/${timeStamp}`\n      );\n      retrievedPklTree = res.data;\n      debug && console.log(retrievedPklTree);\n    }\n    \n    dispatch({\n      type: PKL_TREE_LOADED,\n      payload: retrievedPklTree,\n    });\n  };\n\n  const getExperimentRunJobData = async (expid, run_id, meta) => {\n    setLoadingPreviousRun();\n    let result = null;\n    if (NOAPI) {\n      result = require(\"../data/rundetail_\"+String(expid)+\"_\"+String(run_id)+\".json\").rundata;\n    } else {\n      const res = await axios.get(`${localserver}/rundetail/${expid}/${run_id}`).catch((error) => { alert(error.message);});\n      debug && console.log(res.data);\n      // console.log(res.data);\n      result = res ? res.data.rundata : null;\n    }\n    \n    dispatch({\n      type: GET_EXPERIMENT_RUN_JOBDATA,\n      payload: {result: result, runId: run_id, meta: meta},\n    });    \n    // setAutoUpdateTreePkl(false);\n  }\n\n  const updateTreeContent = async (runDetail, run_id) => {\n    // setLoadingTreePkl();\n    // setLoadingTreeRefresh();\n    // setLoadingTree();\n    dispatch({\n      type: UPDATE_RUNDETAIL_ON_TREE,\n      payload: {runDetail: runDetail, runId: run_id},\n    })\n  }\n\n  const filterTreeView = (string) => {\n    setLoadingFilter();\n    dispatch({\n      type: FILTER_TREEVIEW,\n      payload: string,\n    });\n  };\n\n  const setFancyTree = (value) =>\n    dispatch({ type: SET_FANCYTREE, payload: value });\n\n  const updateSelectionTree = (currentSelected) => {\n    dispatch({ type: UPDATE_SELECTION_TREE, payload: currentSelected });\n  };\n\n  const cleanTreeData = () => dispatch({ type: CLEAN_TREE_DATA });\n  const cleanPklTreeData = () => dispatch({ type: CLEAN_TREE_PKL_DATA });\n  const clearFilterTreeView = () =>\n    dispatch({\n      type: CLEAR_FILTER_TREE,\n    });\n  const increaseElapsedLoadingTree = () => {\n    dispatch({ type: INCREASE_LOADING_TREE });\n  };\n\n  const setLoadingTree = () => dispatch({ type: SET_LOADING_TREE }); //here\n  const setLoadingPreviousRun = () => dispatch({ type: LOADING_PREVIOUS_RUN });\n  const setOffLoadingTree = () => dispatch({ type: SET_OFF_LOADING_TREE });\n  const setLoadingFilter = () => dispatch({ type: SET_LOADING_FILTER });\n  const setLoadingTreeRefresh = () =>\n    dispatch({ type: SET_LOADING_TREE_REFRESH });\n  const setLoadingTreePkl = () => dispatch({ type: SET_LOADING_TREE_PKL });\n  const setAutoUpdateTreePkl = (value) =>\n    dispatch({ type: SET_AUTOUPDATE_TREE_PKL, payload: value });\n\n  const setStartSelection = () => dispatch({ type: SET_START_TREE_SELECTION });\n  const setNotificationTitleTree = (notification) =>\n    dispatch({ type: SET_NOTIFICATION_TITLE_TREE, payload: notification });\n\n  return (\n    <TreeContext.Provider\n      value={{\n        treedata: state.treedata,\n        loadingTree: state.loadingTree,\n        loadingTreePkl: state.loadingTreePkl,\n        loadingFilterTree: state.loadingFilterTree,\n        enabledTreeSearch: state.enabledTreeSearch,\n        returnFilter: state.returnFilter,\n        fancyTree: state.fancyTree,\n        notificationTitleTree: state.notificationTitleTree,\n        loadingPreviousRun: state.loadingPreviousRun,\n        startAutoUpdateTreePkl: state.startAutoUpdateTreePkl,\n        pkltreechanges: state.pkltreechanges,\n        selectedTreeNode: state.selectedTreeNode,\n        expectedLoadingTreeTime: state.expectedLoadingTreeTime,\n        elapsedLoadingTree: state.elapsedLoadingTree,\n        currentRunIdOnTree: state.currentRunIdOnTree,\n        getExperimentTree,\n        getExperimentTreePkl,\n        filterTreeView,\n        setFancyTree,\n        cleanTreeData,\n        cleanPklTreeData,\n        updateSelectionTree,\n        setAutoUpdateTreePkl,\n        clearFilterTreeView,\n        setStartSelection,\n        setNotificationTitleTree,\n        increaseElapsedLoadingTree,\n        updateTreeContent,\n        getExperimentRunJobData,\n      }}\n    >\n      {props.children}\n    </TreeContext.Provider>\n  );\n};\n\nexport default TreeState;\n"]},"metadata":{},"sourceType":"module"}