{"ast":null,"code":"import { SEARCH_EXPERIMENTS, SET_LOADING, CLEAR_EXPERIMENTS, GET_EXPERIMENT, CLEAN_RUN_DATA, SET_LOADING_RUN, GET_EXPERIMENT_RUN, SET_AUTOUPDATE_RUN, GET_RUNNING_STATE, SET_LOADING_STATE, UPDATE_EXPERIMENT_TS, CURRENT_RUNNING, GET_EXPERIMENT_SUMMARY, CLEAR_SUMMARY_EXP, GET_EXPERIMENT_PERFORMANCE, CLEAN_PERFORMANCE_METRICS, ACTIVATE_SELECTION_MODE, DEACTIVATE_SELECTION_MODE, UPDATE_SELECTED_JOBS, REMOVE_SELECTED_JOB, SET_CURRENT_COMMAND, SET_LOADING_SUMMARY, CLEAN_EXPERIMENT_DATA, LOADING_PERFORMANCE_METRICS, GET_JOB_HISTORY, LOADING_JOB_HISTORY, LOADING_EXPERIMENT_RUNS, GET_EXPERIMENT_RUNS, GET_FILE_STATUS, CLEAN_FILE_STATUS_DATA } from \"../types\";\nimport { approximateLoadingTreeTime, approximateLoadingQuickView } from \"../utils\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case ACTIVATE_SELECTION_MODE:\n      return { ...state,\n        canSelect: true,\n        currentSelected: [],\n        currentCommand: null\n      };\n\n    case DEACTIVATE_SELECTION_MODE:\n      return { ...state,\n        canSelect: false,\n        currentSelected: [],\n        currentCommand: null\n      };\n\n    case CLEAN_RUN_DATA:\n      return { ...state,\n        rundata: null,\n        startAutoUpdateRun: false\n      };\n\n    case CLEAN_EXPERIMENT_DATA:\n      {\n        return { ...state,\n          experiment: null,\n          loading: false,\n          totalJobs: 0,\n          expectedLoadingTreeTime: 0,\n          expectedLoadingQuickView: 0,\n          data: null,\n          canSelect: false\n        };\n      }\n\n    case CLEAN_FILE_STATUS_DATA:\n      return { ...state,\n        esarchiveStatus: null\n      };\n\n    case LOADING_JOB_HISTORY:\n      return { ...state,\n        jobHistory: null\n      };\n\n    case GET_JOB_HISTORY:\n      return { ...state,\n        jobHistory: action.payload\n      };\n\n    case GET_FILE_STATUS:\n      return { ...state,\n        esarchiveStatus: action.payload\n      };\n\n    case LOADING_EXPERIMENT_RUNS:\n      return { ...state,\n        experimentRuns: null,\n        loadingExperimentRuns: true\n      };\n\n    case GET_EXPERIMENT_RUNS:\n      return { ...state,\n        experimentRuns: action.payload,\n        loadingExperimentRuns: false\n      };\n\n    case UPDATE_EXPERIMENT_TS:\n      //const { experiment } = state;\n      const pkl_timestamp = action.payload;\n      state.experiment.pkl_timestamp = pkl_timestamp;\n      return { ...state\n      };\n\n    case SEARCH_EXPERIMENTS:\n      return { ...state,\n        experiments: action.payload,\n        loading: false\n      };\n\n    case CURRENT_RUNNING:\n      return { ...state,\n        experiments: action.payload,\n        loading: false\n      };\n\n    case SET_AUTOUPDATE_RUN:\n      return { ...state,\n        startAutoUpdateRun: action.payload\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case SET_LOADING_STATE:\n      return { ...state,\n        loadingState: true\n      };\n\n    case SET_LOADING_RUN:\n      return { ...state,\n        loadingRun: true\n      };\n\n    case CLEAR_EXPERIMENTS:\n      return { ...state,\n        experiments: [],\n        summaries: [],\n        loading: false\n      };\n\n    case GET_EXPERIMENT:\n      const {\n        total_jobs\n      } = action.payload;\n      return { ...state,\n        experiment: action.payload,\n        loading: false,\n        totalJobs: total_jobs,\n        expectedLoadingTreeTime: approximateLoadingTreeTime(total_jobs),\n        expectedLoadingQuickView: approximateLoadingQuickView(total_jobs),\n        data: null,\n        canSelect: false\n      };\n\n    case SET_LOADING_SUMMARY:\n      {\n        const expid = action.payload;\n        state.loadingSummary.set(expid, {\n          loading: true\n        });\n        return { ...state\n        };\n      }\n\n    case GET_EXPERIMENT_SUMMARY:\n      {\n        // const { summaries, summary, expid } = action.payload;\n        // summaries.push({ key: expid, value: summary });\n        const {\n          expid,\n          summary\n        } = action.payload;\n        state.summaries[expid] = summary;\n        state.loadingSummary.delete(expid);\n        return { ...state\n        };\n      }\n\n    case CLEAR_SUMMARY_EXP:\n      {\n        const expid = action.payload;\n\n        if (state.summaries[expid]) {\n          state.summaries[expid] = null;\n        }\n\n        return { ...state\n        };\n      }\n\n    case GET_EXPERIMENT_PERFORMANCE:\n      return { ...state,\n        performancedata: action.payload,\n        loadingPerformance: false\n      };\n\n    case CLEAN_PERFORMANCE_METRICS:\n      return { ...state,\n        performancedata: null\n      };\n\n    case GET_EXPERIMENT_RUN:\n      return { ...state,\n        rundata: action.payload,\n        loadingRun: false\n      };\n\n    case GET_RUNNING_STATE:\n      return { ...state,\n        experimentRunning: action.payload,\n        loadingState: false\n      };\n\n    case UPDATE_SELECTED_JOBS:\n      const currentNode = action.payload;\n      const existingJob = state.currentSelected.find(job => job.name === currentNode.name);\n\n      if (state.canSelect === false || existingJob) {\n        return { ...state\n        };\n      }\n\n      return { ...state,\n        currentSelected: [...state.currentSelected, currentNode],\n        currentCommand: null\n      };\n\n    case SET_CURRENT_COMMAND:\n      return { ...state,\n        currentCommand: action.payload\n      };\n\n    case LOADING_PERFORMANCE_METRICS:\n      return { ...state,\n        loadingPerformance: true\n      };\n\n    case REMOVE_SELECTED_JOB:\n      const name = action.payload;\n      let current = [];\n\n      for (var i = 0; i < state.currentSelected.length; i++) {\n        if (state.currentSelected[i].name !== name) {\n          current.push(state.currentSelected[i]);\n        }\n      }\n\n      state.currentSelected.find(job => job.name === name);\n      return { ...state,\n        currentSelected: current,\n        currentCommand: null\n      };\n\n    default:\n      return null;\n  }\n});","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/context/experiment/experimentReducer.js"],"names":["SEARCH_EXPERIMENTS","SET_LOADING","CLEAR_EXPERIMENTS","GET_EXPERIMENT","CLEAN_RUN_DATA","SET_LOADING_RUN","GET_EXPERIMENT_RUN","SET_AUTOUPDATE_RUN","GET_RUNNING_STATE","SET_LOADING_STATE","UPDATE_EXPERIMENT_TS","CURRENT_RUNNING","GET_EXPERIMENT_SUMMARY","CLEAR_SUMMARY_EXP","GET_EXPERIMENT_PERFORMANCE","CLEAN_PERFORMANCE_METRICS","ACTIVATE_SELECTION_MODE","DEACTIVATE_SELECTION_MODE","UPDATE_SELECTED_JOBS","REMOVE_SELECTED_JOB","SET_CURRENT_COMMAND","SET_LOADING_SUMMARY","CLEAN_EXPERIMENT_DATA","LOADING_PERFORMANCE_METRICS","GET_JOB_HISTORY","LOADING_JOB_HISTORY","LOADING_EXPERIMENT_RUNS","GET_EXPERIMENT_RUNS","GET_FILE_STATUS","CLEAN_FILE_STATUS_DATA","approximateLoadingTreeTime","approximateLoadingQuickView","state","action","type","canSelect","currentSelected","currentCommand","rundata","startAutoUpdateRun","experiment","loading","totalJobs","expectedLoadingTreeTime","expectedLoadingQuickView","data","esarchiveStatus","jobHistory","payload","experimentRuns","loadingExperimentRuns","pkl_timestamp","experiments","loadingState","loadingRun","summaries","total_jobs","expid","loadingSummary","set","summary","delete","performancedata","loadingPerformance","experimentRunning","currentNode","existingJob","find","job","name","current","i","length","push"],"mappings":"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","sourcesContent":["import {\n  SEARCH_EXPERIMENTS,\n  SET_LOADING,\n  CLEAR_EXPERIMENTS,\n  GET_EXPERIMENT,\n  CLEAN_RUN_DATA,\n  SET_LOADING_RUN,\n  GET_EXPERIMENT_RUN,\n  SET_AUTOUPDATE_RUN,\n  GET_RUNNING_STATE,\n  SET_LOADING_STATE,\n  UPDATE_EXPERIMENT_TS,\n  CURRENT_RUNNING,\n  GET_EXPERIMENT_SUMMARY,\n  CLEAR_SUMMARY_EXP,\n  GET_EXPERIMENT_PERFORMANCE,\n  CLEAN_PERFORMANCE_METRICS,\n  ACTIVATE_SELECTION_MODE,\n  DEACTIVATE_SELECTION_MODE,\n  UPDATE_SELECTED_JOBS,\n  REMOVE_SELECTED_JOB,\n  SET_CURRENT_COMMAND,\n  SET_LOADING_SUMMARY,\n  CLEAN_EXPERIMENT_DATA,\n  LOADING_PERFORMANCE_METRICS,\n  GET_JOB_HISTORY,\n  LOADING_JOB_HISTORY,\n  LOADING_EXPERIMENT_RUNS,\n  GET_EXPERIMENT_RUNS,\n  GET_FILE_STATUS,\n  CLEAN_FILE_STATUS_DATA,\n} from \"../types\";\n\nimport {\n  approximateLoadingTreeTime,\n  approximateLoadingQuickView,\n} from \"../utils\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case ACTIVATE_SELECTION_MODE:\n      return {\n        ...state,\n        canSelect: true,\n        currentSelected: [],\n        currentCommand: null,\n      };\n    case DEACTIVATE_SELECTION_MODE:\n      return {\n        ...state,\n        canSelect: false,\n        currentSelected: [],\n        currentCommand: null,\n      };\n    case CLEAN_RUN_DATA:\n      return {\n        ...state,\n        rundata: null,\n        startAutoUpdateRun: false,\n      };\n    case CLEAN_EXPERIMENT_DATA: {\n      return {\n        ...state,\n        experiment: null,\n        loading: false,\n        totalJobs: 0,\n        expectedLoadingTreeTime: 0,\n        expectedLoadingQuickView: 0,\n        data: null,\n        canSelect: false,\n      };\n    }\n    case CLEAN_FILE_STATUS_DATA:\n      return {\n        ...state,\n        esarchiveStatus: null,\n      };\n    case LOADING_JOB_HISTORY:\n      return {\n        ...state,\n        jobHistory: null,\n      };\n    case GET_JOB_HISTORY:\n      return {\n        ...state,\n        jobHistory: action.payload,\n      };\n    case GET_FILE_STATUS:\n      return {\n        ...state,\n        esarchiveStatus: action.payload,\n      };\n    case LOADING_EXPERIMENT_RUNS:\n      return {\n        ...state,\n        experimentRuns: null,\n        loadingExperimentRuns: true,\n      }\n    case GET_EXPERIMENT_RUNS:\n      return {\n        ...state,\n        experimentRuns: action.payload,\n        loadingExperimentRuns: false,\n      }\n    case UPDATE_EXPERIMENT_TS:\n      //const { experiment } = state;\n      const pkl_timestamp = action.payload;\n      state.experiment.pkl_timestamp = pkl_timestamp;\n      return {\n        ...state,\n      };\n    case SEARCH_EXPERIMENTS:\n      return {\n        ...state,\n        experiments: action.payload,\n        loading: false,\n      };\n    case CURRENT_RUNNING:\n      return {\n        ...state,\n        experiments: action.payload,\n        loading: false,\n      };\n    case SET_AUTOUPDATE_RUN:\n      return {\n        ...state,\n        startAutoUpdateRun: action.payload,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case SET_LOADING_STATE:\n      return {\n        ...state,\n        loadingState: true,\n      };\n    case SET_LOADING_RUN:\n      return {\n        ...state,\n        loadingRun: true,\n      };\n    case CLEAR_EXPERIMENTS:\n      return {\n        ...state,\n        experiments: [],\n        summaries: [],\n        loading: false,\n      };\n\n    case GET_EXPERIMENT:\n      const { total_jobs } = action.payload;\n      return {\n        ...state,\n        experiment: action.payload,\n        loading: false,\n        totalJobs: total_jobs,\n        expectedLoadingTreeTime: approximateLoadingTreeTime(total_jobs),\n        expectedLoadingQuickView: approximateLoadingQuickView(total_jobs),\n        data: null,\n        canSelect: false,\n      };\n    case SET_LOADING_SUMMARY: {\n      const expid = action.payload;\n      state.loadingSummary.set(expid, { loading: true });\n      return {\n        ...state,\n      };\n    }\n    case GET_EXPERIMENT_SUMMARY: {\n      // const { summaries, summary, expid } = action.payload;\n      // summaries.push({ key: expid, value: summary });\n      const { expid, summary } = action.payload;\n      state.summaries[expid] = summary;\n      state.loadingSummary.delete(expid);\n      return {\n        ...state,\n      };\n    }\n    case CLEAR_SUMMARY_EXP: {\n      const expid = action.payload;\n      if (state.summaries[expid]) {\n        state.summaries[expid] = null;\n      }\n      return {\n        ...state,\n      };\n    }\n    case GET_EXPERIMENT_PERFORMANCE:\n      return {\n        ...state,\n        performancedata: action.payload,\n        loadingPerformance: false,\n      };\n    case CLEAN_PERFORMANCE_METRICS:\n      return {\n        ...state,\n        performancedata: null,\n      };\n\n    case GET_EXPERIMENT_RUN:\n      return {\n        ...state,\n        rundata: action.payload,\n        loadingRun: false,\n      };\n\n    case GET_RUNNING_STATE:\n      return {\n        ...state,\n        experimentRunning: action.payload,\n        loadingState: false,\n      };\n    case UPDATE_SELECTED_JOBS:\n      const currentNode = action.payload;\n      const existingJob = state.currentSelected.find(\n        (job) => job.name === currentNode.name\n      );\n      if (state.canSelect === false || existingJob) {\n        return {\n          ...state,\n        };\n      }\n      return {\n        ...state,\n        currentSelected: [...state.currentSelected, currentNode],\n        currentCommand: null,\n      };\n    case SET_CURRENT_COMMAND:\n      return {\n        ...state,\n        currentCommand: action.payload,\n      };\n    case LOADING_PERFORMANCE_METRICS:\n      return {\n        ...state,\n        loadingPerformance: true,\n      };\n    case REMOVE_SELECTED_JOB:\n      const name = action.payload;\n      let current = [];\n      for (var i = 0; i < state.currentSelected.length; i++) {\n        if (state.currentSelected[i].name !== name) {\n          current.push(state.currentSelected[i]);\n        }\n      }\n      state.currentSelected.find((job) => job.name === name);\n      return {\n        ...state,\n        currentSelected: current,\n        currentCommand: null,\n      };\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}