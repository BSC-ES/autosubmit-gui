{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/Graph.js\";\nimport React, { Component } from 'react';\nimport vis from 'vis-network';\n\nclass Graph extends Component {\n  componentDidMount() {\n    var nodes_array = [];\n    var edges_array = [];\n    console.log(this.props.nodes_prop);\n    console.log(this.props.edges_prop);\n\n    if (typeof this.props.nodes_prop != 'undefined' || typeof this.props.edges_prop != 'undefined') {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: 'black'\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n      var nodes = new vis.DataSet(nodes_array);\n      var edges = new vis.DataSet(edges_array);\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n      var options = {\n        edges: {\n          arrows: {\n            to: {\n              enabled: true\n            }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false\n        }\n      };\n      var network = new vis.Network({\n        container: \"myNetwork\",\n        data: data,\n        options: options\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"myNetwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/Graph.js"],"names":["React","Component","vis","Graph","componentDidMount","nodes_array","edges_array","console","log","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","nodes","DataSet","edges","data","options","arrows","enabled","layout","improvedLayout","hierarchical","parentCentralization","treeSpacing","nodeSpacing","interaction","dragNodes","hoverConnectedEdges","physics","network","Network","container","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAE1BG,EAAAA,iBAAiB,GAAG;AAElB,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,UAAvB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWE,UAAvB;;AACA,QAAI,OAAO,KAAKF,KAAL,CAAWC,UAAlB,IAAgC,WAAhC,IAA+C,OAAO,KAAKD,KAAL,CAAWE,UAAlB,IAAgC,WAAnF,EAA+F;AAC7F,WAAKF,KAAL,CAAWC,UAAX,CAAsBE,GAAtB,CAA2BC,IAAD,IACxBR,WAAW,CAACS,IAAZ,CAAiB;AAACC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAV;AAAcC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAA1B;AAAiCC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC;AAAxC,OAAjB,CADF;AAKA,WAAKX,KAAL,CAAWE,UAAX,CAAsBC,GAAtB,CAA2BS,IAAD,IAAU;AAChCf,QAAAA,WAAW,CAACQ,IAAZ,CAAiB;AAACQ,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAZ;AAAkBC,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAA3B,SAAjB;AACH,OAFD;AAIA,UAAIC,KAAK,GAAG,IAAItB,GAAG,CAACuB,OAAR,CACVpB,WADU,CAAZ;AAIA,UAAIqB,KAAK,GAAG,IAAIxB,GAAG,CAACuB,OAAR,CACVnB,WADU,CAAZ;AAIA,UAAIqB,IAAI,GAAG;AACTH,QAAAA,KAAK,EAAEA,KADE;AAETE,QAAAA,KAAK,EAAEA;AAFE,OAAX;AAKA,UAAIE,OAAO,GAAG;AACZF,QAAAA,KAAK,EAAE;AACLG,UAAAA,MAAM,EAAG;AACPN,YAAAA,EAAE,EAAG;AAACO,cAAAA,OAAO,EAAE;AAAV;AADE;AADJ,SADK;AAMZC,QAAAA,MAAM,EAAE;AACNC,UAAAA,cAAc,EAAE,IADV;AAENC,UAAAA,YAAY,EAAE;AACZC,YAAAA,oBAAoB,EAAE,IADV;AAEZC,YAAAA,WAAW,EAAE,GAFD;AAGZC,YAAAA,WAAW,EAAE;AAHD;AAFR,SANI;AAcZC,QAAAA,WAAW,EAAE;AACXC,UAAAA,SAAS,EAAE,IADA;AAEXC,UAAAA,mBAAmB,EAAE;AAFV,SAdD;AAkBZC,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAE;AADF;AAlBG,OAAd;AAuBA,UAAIW,OAAO,GAAG,IAAIvC,GAAG,CAACwC,OAAR,CAAgB;AAACC,QAAAA,SAAS,EAAE,WAAZ;AAAyBhB,QAAAA,IAAI,EAAEA,IAA/B;AAAqCC,QAAAA,OAAO,EAAEA;AAA9C,OAAhB,CAAd;AACD;AAEF;;AAEDgB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA/DyB;;AAkE9B,eAAezC,KAAf","sourcesContent":["import React, { Component } from 'react'\nimport vis from 'vis-network'\n\nclass Graph extends Component {    \n\n    componentDidMount() {\n      \n      var nodes_array = [];\n      var edges_array = [];\n      console.log(this.props.nodes_prop);\n      console.log(this.props.edges_prop);\n      if (typeof this.props.nodes_prop != 'undefined' || typeof this.props.edges_prop != 'undefined'){\n        this.props.nodes_prop.map((node) => (\n          nodes_array.push({id: node.id, label: node.label, color: { background: node.status_color, border: 'black'}})\n          \n        ))\n\n        this.props.edges_prop.map((edge) => {\n            edges_array.push({from: edge.from, to: edge.to})            \n        })\n\n        var nodes = new vis.DataSet(\n          nodes_array\n        );\n  \n        var edges = new vis.DataSet(\n          edges_array\n        );\n       \n        var data = {\n          nodes: nodes,\n          edges: edges\n        };\n\n        var options = {\n          edges: {\n            arrows : {\n              to : {enabled: true}\n            }\n          },\n          layout: {\n            improvedLayout: true,\n            hierarchical: {\n              parentCentralization: true,\n              treeSpacing: 100,\n              nodeSpacing: 250,\n            },\n          },\n          interaction: {\n            dragNodes: true,\n            hoverConnectedEdges: true,\n          },\n          physics: {\n            enabled: false,\n          }\n        };\n        \n        var network = new vis.Network({container: \"myNetwork\", data: data, options: options});\n      }\n      \n    }\n\n    render() {\n      return (\n        <div id=\"myNetwork\"></div>\n      );\n    }\n  }\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}