{"ast":null,"code":"var _jsxFileName = \"/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/layout/LoadingCounter.js\";\nimport React, { useEffect, useContext } from \"react\";\nimport TreeContext from \"../context/tree/treeContext\";\nimport LighterContext from \"../context/lighter/lighterContext\";\nimport ExperimentContext from \"../context/experiment/experimentContext\";\nimport { maxReponseTimeThreshold } from \"../context/vars\";\n\nconst LoadingCounter = ({\n  loadsource\n}) => {\n  //const { source_load } = source;\n  //console.log(loadsource);\n  const treeContext = useContext(TreeContext);\n  const lighterContext = useContext(LighterContext);\n  const experimentContext = useContext(ExperimentContext);\n  const {\n    expectedLoadingTreeTime,\n    expectedLoadingQuickView\n  } = experimentContext;\n  const {\n    increaseElapsedLoadingTree,\n    elapsedLoadingTree\n  } = treeContext;\n  const {\n    increaseElapsedLoadingQuickView,\n    elapsedLoadingQuickView\n  } = lighterContext;\n  const increaseFunction = loadsource === \"tree\" ? increaseElapsedLoadingTree : increaseElapsedLoadingQuickView;\n  const elapsedTime = loadsource === \"tree\" ? elapsedLoadingTree : elapsedLoadingQuickView;\n  const approximatedTime = loadsource === \"tree\" ? expectedLoadingTreeTime : expectedLoadingQuickView; //const { expectedLoadingTreeTime } = experimentContext;\n\n  const fetchMessage = loadsource === \"tree\" ? \"Fetching this tree view will take about \" + approximatedTime + \" seconds.\" : \"Loading this not-so-quick view will take about \" + approximatedTime + \" seconds.\";\n  useEffect(() => {\n    const interval = setInterval(() => {\n      increaseFunction();\n    }, 1000);\n    return () => clearInterval(interval); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pb-4 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, approximatedTime > maxReponseTimeThreshold && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"This experiment might be too heavy to fetch in due time. If an error message is prompted, try the \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 40\n    }\n  }, \"Quick View\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, fetchMessage), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    style: {\n      width: approximatedTime > 0 && elapsedTime <= approximatedTime ? elapsedTime / approximatedTime * 100 + \"%\" : \"100%\"\n    },\n    \"aria-valuenow\": elapsedTime,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": approximatedTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, elapsedTime)))));\n};\n\nexport default LoadingCounter;","map":{"version":3,"sources":["/Users/BleuDChan/ReposBSC/autosubmitreact/src/components/layout/LoadingCounter.js"],"names":["React","useEffect","useContext","TreeContext","LighterContext","ExperimentContext","maxReponseTimeThreshold","LoadingCounter","loadsource","treeContext","lighterContext","experimentContext","expectedLoadingTreeTime","expectedLoadingQuickView","increaseElapsedLoadingTree","elapsedLoadingTree","increaseElapsedLoadingQuickView","elapsedLoadingQuickView","increaseFunction","elapsedTime","approximatedTime","fetchMessage","interval","setInterval","clearInterval","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAASC,uBAAT,QAAwC,iBAAxC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACzC;AACA;AACA,QAAMC,WAAW,GAAGP,UAAU,CAACC,WAAD,CAA9B;AACA,QAAMO,cAAc,GAAGR,UAAU,CAACE,cAAD,CAAjC;AACA,QAAMO,iBAAiB,GAAGT,UAAU,CAACG,iBAAD,CAApC;AACA,QAAM;AACJO,IAAAA,uBADI;AAEJC,IAAAA;AAFI,MAGFF,iBAHJ;AAIA,QAAM;AAAEG,IAAAA,0BAAF;AAA8BC,IAAAA;AAA9B,MAAqDN,WAA3D;AACA,QAAM;AACJO,IAAAA,+BADI;AAEJC,IAAAA;AAFI,MAGFP,cAHJ;AAKA,QAAMQ,gBAAgB,GACpBV,UAAU,KAAK,MAAf,GACIM,0BADJ,GAEIE,+BAHN;AAIA,QAAMG,WAAW,GACfX,UAAU,KAAK,MAAf,GAAwBO,kBAAxB,GAA6CE,uBAD/C;AAEA,QAAMG,gBAAgB,GACpBZ,UAAU,KAAK,MAAf,GAAwBI,uBAAxB,GAAkDC,wBADpD,CAtByC,CAwBzC;;AACA,QAAMQ,YAAY,GAChBb,UAAU,KAAK,MAAf,GACI,6CACAY,gBADA,GAEA,WAHJ,GAII,oDACAA,gBADA,GAEA,WAPN;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCL,MAAAA,gBAAgB;AACjB,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMM,aAAa,CAACF,QAAD,CAA1B,CAJc,CAKd;AACD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,gBAAgB,GAAGd,uBAAnB,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wHAE+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAF/B,MAFJ,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIe,YAAJ,CAPF,eAQE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,KAAK,EAAE;AACLI,MAAAA,KAAK,EACHL,gBAAgB,GAAG,CAAnB,IAAwBD,WAAW,IAAIC,gBAAvC,GACKD,WAAW,GAAGC,gBAAf,GAAmC,GAAnC,GAAyC,GAD7C,GAEI;AAJD,KAHT;AASE,qBAAeD,WATjB;AAUE,qBAAc,GAVhB;AAWE,qBAAeC,gBAXjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGD,WAbH,CADF,CADF,CADF,CARF,CADF;AAgCD,CA1ED;;AA4EA,eAAeZ,cAAf","sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport TreeContext from \"../context/tree/treeContext\";\nimport LighterContext from \"../context/lighter/lighterContext\";\nimport ExperimentContext from \"../context/experiment/experimentContext\";\nimport { maxReponseTimeThreshold } from \"../context/vars\";\n\nconst LoadingCounter = ({ loadsource }) => {\n  //const { source_load } = source;\n  //console.log(loadsource);\n  const treeContext = useContext(TreeContext);\n  const lighterContext = useContext(LighterContext);\n  const experimentContext = useContext(ExperimentContext);\n  const {\n    expectedLoadingTreeTime,\n    expectedLoadingQuickView,\n  } = experimentContext;\n  const { increaseElapsedLoadingTree, elapsedLoadingTree } = treeContext;\n  const {\n    increaseElapsedLoadingQuickView,\n    elapsedLoadingQuickView,\n  } = lighterContext;\n\n  const increaseFunction =\n    loadsource === \"tree\"\n      ? increaseElapsedLoadingTree\n      : increaseElapsedLoadingQuickView;\n  const elapsedTime =\n    loadsource === \"tree\" ? elapsedLoadingTree : elapsedLoadingQuickView;\n  const approximatedTime =\n    loadsource === \"tree\" ? expectedLoadingTreeTime : expectedLoadingQuickView;\n  //const { expectedLoadingTreeTime } = experimentContext;\n  const fetchMessage =\n    loadsource === \"tree\"\n      ? \"Fetching this tree view will take about \" +\n        approximatedTime +\n        \" seconds.\"\n      : \"Loading this not-so-quick view will take about \" +\n        approximatedTime +\n        \" seconds.\";\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      increaseFunction();\n    }, 1000);\n    return () => clearInterval(interval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className='pb-4 text-center'>\n      {approximatedTime > maxReponseTimeThreshold && (\n        <p>\n          This experiment might be too heavy to fetch in due time. If an error\n          message is prompted, try the <b>Quick View</b>.\n        </p>\n      )}\n      <p>{fetchMessage}</p>\n      <div className='row'>\n        <div className='col'>\n          <div className='progress'>\n            <div\n              className='progress-bar'\n              role='progressbar'\n              style={{\n                width:\n                  approximatedTime > 0 && elapsedTime <= approximatedTime\n                    ? (elapsedTime / approximatedTime) * 100 + \"%\"\n                    : \"100%\",\n              }}\n              aria-valuenow={elapsedTime}\n              aria-valuemin='0'\n              aria-valuemax={approximatedTime}\n            >\n              {elapsedTime}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingCounter;\n"]},"metadata":{},"sourceType":"module"}