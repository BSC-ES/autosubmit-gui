{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js\";\nimport React, { Component } from \"react\";\nimport vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\n\nclass GraphRepresentation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.experimentStyle = {\n      height: 1200\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"In Graph\");\n    let container = document.getElementById(\"myNetwork\");\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop !== \"undefined\" || typeof this.props.edges_prop !== \"undefined\") {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n      var nodes = new vis.DataSet(nodes_array);\n      var edges = new vis.DataSet(edges_array);\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n      var options = {\n        edges: {\n          arrows: {\n            to: {\n              enabled: true\n            }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false\n        } // configure: {\n        //   enabled: true,\n        //   filter: 'nodes,edges',\n        //   container: undefined,\n        //   showButton: true\n        // }\n\n      };\n      var network = new vis.Network(container, data, options); //window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanParent(); // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  render() {\n    // if (this.props.loading) {\n    //   console.log(\"Spinning\");\n    //   return <Spinner />;\n    // }\n    // console.log(\"Not Spinning\");\n    return React.createElement(\"div\", {\n      style: this.experimentStyle,\n      id: \"myNetwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/GraphRepresentation.js"],"names":["React","Component","vis","Spinner","GraphRepresentation","experimentStyle","height","componentDidMount","console","log","container","document","getElementById","nodes_array","edges_array","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","nodes","DataSet","edges","data","options","arrows","enabled","layout","improvedLayout","hierarchical","parentCentralization","treeSpacing","nodeSpacing","interaction","dragNodes","hoverConnectedEdges","physics","network","Network","componentWillUnmount","cleanParent","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\n\nclass GraphRepresentation extends Component {\n  componentDidMount() {\n    console.log(\"In Graph\");\n\n    let container = document.getElementById(\"myNetwork\");\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (\n      typeof this.props.nodes_prop !== \"undefined\" ||\n      typeof this.props.edges_prop !== \"undefined\"\n    ) {\n      this.props.nodes_prop.map(node =>\n        nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: { background: node.status_color, border: \"black\" }\n        })\n      );\n\n      this.props.edges_prop.map(edge => {\n        edges_array.push({ from: edge.from, to: edge.to });\n      });\n\n      var nodes = new vis.DataSet(nodes_array);\n\n      var edges = new vis.DataSet(edges_array);\n\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n\n      var options = {\n        edges: {\n          arrows: {\n            to: { enabled: true }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false,\n        },\n        // configure: {\n        //   enabled: true,\n        //   filter: 'nodes,edges',\n        //   container: undefined,\n        //   showButton: true\n        // }\n      };\n\n      var network = new vis.Network(container, data, options);\n      //window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanParent();\n    // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  experimentStyle = {\n    height: 1200\n  };\n\n  render() {\n    // if (this.props.loading) {\n    //   console.log(\"Spinning\");\n    //   return <Spinner />;\n    // }\n    // console.log(\"Not Spinning\");\n    return <div style={this.experimentStyle} id='myNetwork' />;\n  }\n}\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}