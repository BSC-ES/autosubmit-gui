{"ast":null,"code":"import React, { Component } from \"react\";\nimport vis from \"vis-network\";\n\nclass Graph extends Component {\n  componentWillMount() {\n    console.log(\"In Graph\");\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop !== \"undefined\" || typeof this.props.edges_prop !== \"undefined\") {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n      var nodes = new vis.DataSet(nodes_array);\n      var edges = new vis.DataSet(edges_array);\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n      var options = {\n        edges: {\n          arrows: {\n            to: {\n              enabled: true\n            }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false\n        }\n      };\n      var network = new vis.Network({\n        container: \"myNetwork\",\n        data: data,\n        options: options\n      }); //window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {// if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/components/experiment/Graph.js"],"names":["React","Component","vis","Graph","componentWillMount","console","log","nodes_array","edges_array","props","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","nodes","DataSet","edges","data","options","arrows","enabled","layout","improvedLayout","hierarchical","parentCentralization","treeSpacing","nodeSpacing","interaction","dragNodes","hoverConnectedEdges","physics","network","Network","container","componentWillUnmount","render"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC5BG,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,QACE,OAAO,KAAKC,KAAL,CAAWC,UAAlB,KAAiC,WAAjC,IACA,OAAO,KAAKD,KAAL,CAAWE,UAAlB,KAAiC,WAFnC,EAGE;AACA,WAAKF,KAAL,CAAWC,UAAX,CAAsBE,GAAtB,CAA0BC,IAAI,IAC5BN,WAAW,CAACO,IAAZ,CAAiB;AACfC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADM;AAEfC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAFG;AAGfC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEL,IAAI,CAACM,YAAnB;AAAiCC,UAAAA,MAAM,EAAE;AAAzC;AAHQ,OAAjB,CADF;AAQA,WAAKX,KAAL,CAAWE,UAAX,CAAsBC,GAAtB,CAA0BS,IAAI,IAAI;AAChCb,QAAAA,WAAW,CAACM,IAAZ,CAAiB;AAAEQ,UAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBC,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAA5B,SAAjB;AACD,OAFD;AAIA,UAAIC,KAAK,GAAG,IAAItB,GAAG,CAACuB,OAAR,CAAgBlB,WAAhB,CAAZ;AAEA,UAAImB,KAAK,GAAG,IAAIxB,GAAG,CAACuB,OAAR,CAAgBjB,WAAhB,CAAZ;AAEA,UAAImB,IAAI,GAAG;AACTH,QAAAA,KAAK,EAAEA,KADE;AAETE,QAAAA,KAAK,EAAEA;AAFE,OAAX;AAKA,UAAIE,OAAO,GAAG;AACZF,QAAAA,KAAK,EAAE;AACLG,UAAAA,MAAM,EAAE;AACNN,YAAAA,EAAE,EAAE;AAAEO,cAAAA,OAAO,EAAE;AAAX;AADE;AADH,SADK;AAMZC,QAAAA,MAAM,EAAE;AACNC,UAAAA,cAAc,EAAE,IADV;AAENC,UAAAA,YAAY,EAAE;AACZC,YAAAA,oBAAoB,EAAE,IADV;AAEZC,YAAAA,WAAW,EAAE,GAFD;AAGZC,YAAAA,WAAW,EAAE;AAHD;AAFR,SANI;AAcZC,QAAAA,WAAW,EAAE;AACXC,UAAAA,SAAS,EAAE,IADA;AAEXC,UAAAA,mBAAmB,EAAE;AAFV,SAdD;AAkBZC,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAE;AADF;AAlBG,OAAd;AAuBA,UAAIW,OAAO,GAAG,IAAIvC,GAAG,CAACwC,OAAR,CAAgB;AAC5BC,QAAAA,SAAS,EAAE,WADiB;AAE5BhB,QAAAA,IAAI,EAAEA,IAFsB;AAG5BC,QAAAA,OAAO,EAAEA;AAHmB,OAAhB,CAAd,CA7CA,CAkDA;AACD;AACF;;AAEDgB,EAAAA,oBAAoB,GAAG,CACrB;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AAxE2B;;AA2E9B,eAAe1C,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport vis from \"vis-network\";\n\nclass Graph extends Component {\n  componentWillMount() {\n    console.log(\"In Graph\");\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (\n      typeof this.props.nodes_prop !== \"undefined\" ||\n      typeof this.props.edges_prop !== \"undefined\"\n    ) {\n      this.props.nodes_prop.map(node =>\n        nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: { background: node.status_color, border: \"black\" }\n        })\n      );\n\n      this.props.edges_prop.map(edge => {\n        edges_array.push({ from: edge.from, to: edge.to });\n      });\n\n      var nodes = new vis.DataSet(nodes_array);\n\n      var edges = new vis.DataSet(edges_array);\n\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n\n      var options = {\n        edges: {\n          arrows: {\n            to: { enabled: true }\n          }\n        },\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            parentCentralization: true,\n            treeSpacing: 100,\n            nodeSpacing: 250\n          }\n        },\n        interaction: {\n          dragNodes: true,\n          hoverConnectedEdges: true\n        },\n        physics: {\n          enabled: false\n        }\n      };\n\n      var network = new vis.Network({\n        container: \"myNetwork\",\n        data: data,\n        options: options\n      });\n      //window.test(nodes_array, edges_array);\n    }\n  }\n\n  componentWillUnmount() {\n    // if (typeof this.props.nodes_prop !== 'undefined' || typeof this.props.edges_prop !== 'undefined'){\n    //   console.log(\"Unmounting\")\n    //   window.clearIt();\n    // }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}