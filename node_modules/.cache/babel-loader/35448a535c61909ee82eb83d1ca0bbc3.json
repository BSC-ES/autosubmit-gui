{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/pages/ExperimentCentral.js\";\nimport React, { Fragment, useContext } from 'react';\nimport Experiment from '../experiment/Experiment'; // import GraphRepresentation from '../experiment/GraphRepresentation';\n\nimport GraphNativeRep from '../experiment/GraphNativeRep';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport StatsContext from '../context/statistics/statsContext';\nimport Selection from '../experiment/Selection'; // import OpenRun from '../experiment/OpenRun';\n\nimport Running from '../experiment/Running';\nimport JobMonitor from '../experiment/JobMonitor';\nimport Navigator from '../experiment/Navigator';\nimport StatsSearch from '../statistics/StatsSearch';\nimport JobSearcher from '../experiment/JobSearcher';\n\nconst ExperimentCentral = ({\n  match\n}) => {\n  const expid = match.params.expid;\n  const experimentContext = useContext(ExperimentContext);\n  const statsContext = useContext(StatsContext);\n  const data = experimentContext.data,\n        updateSelection = experimentContext.updateSelection,\n        loadingGraph = experimentContext.loadingGraph,\n        loadingRun = experimentContext.loadingRun,\n        shouldUpdateGraph = experimentContext.shouldUpdateGraph,\n        cleanGraphData = experimentContext.cleanGraphData,\n        cleanRunData = experimentContext.cleanRunData,\n        cleanNavData = experimentContext.cleanNavData,\n        getExperimentRun = experimentContext.getExperimentRun,\n        getExperimentPkl = experimentContext.getExperimentPkl,\n        cleanPklData = experimentContext.cleanPklData,\n        startAutoUpdateRun = experimentContext.startAutoUpdateRun,\n        startAutoUpdatePkl = experimentContext.startAutoUpdatePkl,\n        setAutoUpdateRun = experimentContext.setAutoUpdateRun,\n        rundata = experimentContext.rundata,\n        pklchanges = experimentContext.pklchanges,\n        experiment = experimentContext.experiment,\n        setVisData = experimentContext.setVisData,\n        setVisNetwork = experimentContext.setVisNetwork,\n        visNetwork = experimentContext.visNetwork,\n        navigateGraph = experimentContext.navigateGraph,\n        navToLatest = experimentContext.navToLatest,\n        experimentRunning = experimentContext.experimentRunning;\n  const clearStats = statsContext.clearStats;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Experiment, {\n    expidToken: expid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, experiment && data && React.createElement(\"div\", {\n    className: \"card-header p-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(JobSearcher, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-9 pr-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(GraphNativeRep, {\n    data: data,\n    updateSelection: updateSelection,\n    loadingGraph: loadingGraph,\n    cleanGraphData: cleanGraphData,\n    shouldUpdateGraph: shouldUpdateGraph,\n    setVisData: setVisData,\n    setVisNetwork: setVisNetwork,\n    navigateGraph: navigateGraph,\n    navToLatest: navToLatest,\n    clearStats: clearStats,\n    cleanNavData: cleanNavData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-3 pl-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, data && React.createElement(Selection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), startAutoUpdatePkl && React.createElement(JobMonitor, {\n    experiment: experiment,\n    getExperimentPkl: getExperimentPkl,\n    cleanPklData: cleanPklData,\n    pklchanges: pklchanges,\n    experimentRunning: experimentRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"card-footer p-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, data && visNetwork && React.createElement(Navigator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card-footer p-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, startAutoUpdateRun && React.createElement(Running, {\n    rundata: rundata,\n    loadingRun: loadingRun,\n    cleanRunData: cleanRunData,\n    getExperimentRun: getExperimentRun,\n    experiment: experiment,\n    startAutoUpdateRun: startAutoUpdateRun,\n    setAutoUpdateRun: setAutoUpdateRun,\n    experimentRunning: experimentRunning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), !startAutoUpdateRun && React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12 text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Press \", React.createElement(\"span\", {\n    className: \"badge badge-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Show Log\"), \" to see the last 50 lines of the running log of this experiment. If the experiment is running, the log will update automatically.\"))))), React.createElement(\"div\", {\n    className: \"card mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header py-0 text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Statistics\")), React.createElement(\"div\", {\n    className: \"card-body p-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(StatsSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })))))));\n};\n\nexport default ExperimentCentral;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-autosubmitreact/autosubmitreact/src/components/pages/ExperimentCentral.js"],"names":["React","Fragment","useContext","Experiment","GraphNativeRep","ExperimentContext","StatsContext","Selection","Running","JobMonitor","Navigator","StatsSearch","JobSearcher","ExperimentCentral","match","expid","params","experimentContext","statsContext","data","updateSelection","loadingGraph","loadingRun","shouldUpdateGraph","cleanGraphData","cleanRunData","cleanNavData","getExperimentRun","getExperimentPkl","cleanPklData","startAutoUpdateRun","startAutoUpdatePkl","setAutoUpdateRun","rundata","pklchanges","experiment","setVisData","setVisNetwork","visNetwork","navigateGraph","navToLatest","experimentRunning","clearStats"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport Experiment from '../experiment/Experiment';\n// import GraphRepresentation from '../experiment/GraphRepresentation';\nimport GraphNativeRep from '../experiment/GraphNativeRep';\nimport ExperimentContext from '../context/experiment/experimentContext';\nimport StatsContext from '../context/statistics/statsContext';\nimport Selection from '../experiment/Selection';\n// import OpenRun from '../experiment/OpenRun';\nimport Running from '../experiment/Running';\nimport JobMonitor from '../experiment/JobMonitor';\nimport Navigator from '../experiment/Navigator';\nimport StatsSearch from '../statistics/StatsSearch';\nimport JobSearcher from '../experiment/JobSearcher';\n\nconst ExperimentCentral = ({ match }) => {\n    const expid = match.params.expid;\n    const experimentContext = useContext(ExperimentContext);\n    const statsContext = useContext(StatsContext);\n    const {data, \n        updateSelection, \n        loadingGraph, \n        loadingRun, \n        shouldUpdateGraph,\n        cleanGraphData, \n        cleanRunData, \n        cleanNavData,\n        getExperimentRun,\n        getExperimentPkl, \n        cleanPklData,\n        startAutoUpdateRun, \n        startAutoUpdatePkl,\n        setAutoUpdateRun,\n        rundata,\n        pklchanges,\n        experiment,\n        setVisData,\n        setVisNetwork,\n        visNetwork,\n        navigateGraph,\n        navToLatest,\n        experimentRunning } = experimentContext;\n    \n    const { clearStats } = statsContext;\n\n    return (\n    <Fragment>\n        <Experiment expidToken={expid} />     \n        <div className=\"row mt-2\">\n            <div className=\"col-12\">\n                <div className='card'>\n                    {experiment && data &&    \n                        <div className=\"card-header p-1\">\n                            <JobSearcher />                        \n                        </div>\n                    }\n                    <div className='row'>                        \n                        <div className='col-9 pr-0'>\n                            <GraphNativeRep \n                                data={data} \n                                updateSelection={updateSelection} \n                                loadingGraph={loadingGraph} \n                                cleanGraphData={cleanGraphData} \n                                shouldUpdateGraph={shouldUpdateGraph} \n                                setVisData={setVisData}\n                                setVisNetwork={setVisNetwork}\n                                navigateGraph={navigateGraph}\n                                navToLatest={navToLatest}\n                                clearStats={clearStats}\n                                cleanNavData={cleanNavData}\n                            />\n                            {/* <GraphRepresentation \n                                data={data} \n                                updateSelection={updateSelection} \n                                loadingGraph={loadingGraph} \n                                cleanGraphData={cleanGraphData} \n                                shouldUpdateGraph={shouldUpdateGraph} \n                            /> */}\n                        </div>\n                        <div className='col-3 pl-0'>\n                            {data && <Selection /> }\n                            {startAutoUpdatePkl &&\n                                <JobMonitor \n                                    experiment={experiment} \n                                    getExperimentPkl={getExperimentPkl} \n                                    cleanPklData={cleanPklData}\n                                    pklchanges={pklchanges}\n                                    experimentRunning={experimentRunning} />\n                            }               \n                        </div>\n                    </div> \n                    <div className=\"card-footer p-0\">\n                        {data && visNetwork && <Navigator />}\n                    </div>\n                    <div className=\"card-footer p-0\">\n\n\n                        {startAutoUpdateRun && <Running \n                            rundata={rundata}\n                            loadingRun={loadingRun} \n                            cleanRunData={cleanRunData} \n                            getExperimentRun={getExperimentRun}\n                            experiment={experiment}  \n                            startAutoUpdateRun={startAutoUpdateRun}\n                            setAutoUpdateRun={setAutoUpdateRun}\n                            experimentRunning={experimentRunning}\n                        />} \n\n                        {!startAutoUpdateRun &&\n                            <div className=\"row\">\n                                <div className=\"col-12 text-center\">\n                                    <p className=\"lead\">\n                                        Press <span className='badge badge-dark'>Show Log</span> to see the last 50 lines of the running log of this experiment. \n                                        If the experiment is running, the log will update automatically.\n                                    </p>                                            \n                                </div>                                            \n                            </div>\n                        }\n                          \n\n                    </div>              \n                </div> \n                <div className=\"card mt-2\">\n                    <div className=\"card-header py-0 text-muted\">\n                        <small>Statistics</small>\n                    </div>\n                    <div className=\"card-body p-1\">\n                        <div className='col-12'>\n                            <StatsSearch />    \n                        </div>\n                    </div>                                             \n                </div>\n            </div>\n        </div>                           \n        \n        {/* <OpenRun/> */}\n        \n        \n        \n    </Fragment>\n    );\n};  \n\nexport default ExperimentCentral;"]},"metadata":{},"sourceType":"module"}