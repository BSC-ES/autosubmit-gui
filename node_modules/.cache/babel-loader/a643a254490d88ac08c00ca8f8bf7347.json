{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphRepresentation.js\";\nimport React, { Component } from \"react\"; // import vis from \"vis-network\";\n\nimport Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\n\nclass GraphRepresentation extends Component {\n  // { data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n  // console.log(\"Entering GraphRep\")\n  // useEffect(() => {\n  //   return () => {\n  //     cleanGraphData();\n  //   };\n  //   // eslint-disable-next-line\n  // }, []);\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.shouldUpdateGraph === true) {\n      return true;\n    } else if (nextProps.data && this.props.data && nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp) {\n      console.log(\"Rerendering\");\n      return true;\n    } else if (nextProps.loadingGraph !== this.props.loadingGraph) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanGraphData();\n  }\n\n  render() {\n    //const experimentContext = useContext(ExperimentContext);\n    //{ data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n    if (this.props.loadingGraph) return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n\n    if (this.props.data === null) {\n      return React.createElement(\"div\", {\n        className: \"card-body text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Press the button to show the Graph.\");\n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (this.props.data.nodes !== null || this.props.data.edges !== null) {\n      this.props.data.nodes.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: \"black\"\n        } //level: node.priority,\n\n      }));\n      this.props.data.edges.map(edge => edges_array.push({\n        from: edge.from,\n        to: edge.to\n      }));\n    }\n\n    const graph = {\n      nodes: nodes_array,\n      edges: edges_array\n    };\n    const options = {\n      edges: {\n        arrows: {\n          to: {\n            enabled: true\n          }\n        }\n      },\n      layout: {\n        improvedLayout: true,\n        hierarchical: {\n          nodeSpacing: 250,\n          edgeMinimization: false,\n          blockShifting: false,\n          parentCentralization: false,\n          direction: 'UD',\n          sortMethod: 'directed'\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        // multiselect: true,\n        navigationButtons: true\n      },\n      physics: {\n        enabled: false\n      },\n      nodes: {\n        shape: 'dot'\n      }\n    };\n    const events = {\n      select: event => {\n        //var { nodes, edges } = event;\n        var nodes = event.nodes; //setCurrent(nodes);\n        // console.log(nodes);\n        // console.log(edges);\n\n        this.props.updateSelection(nodes); //setCurrent(nodes);\n        // console.log(\"Selected edges:\");\n        // console.log(edges);\n      }\n    };\n\n    if (this.props.data.error === false) {\n      return React.createElement(\"div\", {\n        className: \"card-body p-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Graph, {\n        style: experimentStyle,\n        graph: graph,\n        options: options,\n        events: events,\n        getNetwork: network => {//  if you want access to vis.js network api you can set the state in a parent component using this property\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, this.props.data.error_message);\n    }\n  }\n\n}\n\nconst experimentStyle = {\n  height: 500\n};\nexport default GraphRepresentation;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/autosubmitreact/src/components/experiment/GraphRepresentation.js"],"names":["React","Component","Spinner","Graph","GraphRepresentation","shouldComponentUpdate","nextProps","nextState","props","shouldUpdateGraph","data","pkl_timestamp","console","log","loadingGraph","componentWillUnmount","cleanGraphData","render","nodes_array","edges_array","nodes","edges","map","node","push","id","label","color","background","status_color","border","edge","from","to","graph","options","arrows","enabled","layout","improvedLayout","hierarchical","nodeSpacing","edgeMinimization","blockShifting","parentCentralization","direction","sortMethod","interaction","dragNodes","hoverConnectedEdges","navigationButtons","physics","shape","events","select","event","updateSelection","error","experimentStyle","network","error_message","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import vis from \"vis-network\";\nimport Spinner from \"../layout/Spinner\";\nimport Graph from 'react-graph-vis';\n\nclass GraphRepresentation extends Component {\n\n \n  // { data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n  // console.log(\"Entering GraphRep\")\n\n  // useEffect(() => {\n  //   return () => {\n  //     cleanGraphData();\n  //   };\n  //   // eslint-disable-next-line\n  // }, []);\n\n  shouldComponentUpdate(nextProps, nextState){ \n    \n    if (this.props.shouldUpdateGraph === true){\n      return true\n    }else if (nextProps.data && this.props.data && (nextProps.data.pkl_timestamp !== this.props.data.pkl_timestamp)){\n      console.log(\"Rerendering\")\n      return true;\n    }else if (nextProps.loadingGraph !== this.props.loadingGraph){\n      return true;    \n    }else{\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanGraphData();\n  }\n\n  render(){\n    //const experimentContext = useContext(ExperimentContext);\n    //{ data, loadingGraph, cleanGraphData, updateSelection } = experimentContext;\n\n    if (this.props.loadingGraph) return <Spinner />;\n\n    if (this.props.data === null){\n      return(\n        <div className=\"card-body text-center\">\n          Press the button to show the Graph.\n        </div>              \n      );       \n    }\n\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (\n      this.props.data.nodes !== null ||\n      this.props.data.edges !== null\n    ) {\n      this.props.data.nodes.map(node =>\n        nodes_array.push({\n          id: node.id,\n          label: node.label,\n          color: { background: node.status_color, border: \"black\" },\n          //level: node.priority,\n        })\n      );\n\n      this.props.data.edges.map(edge => \n        edges_array.push({ from: edge.from, to: edge.to })\n      );\n    }\n\n    const graph = {\n      nodes : nodes_array,\n      edges : edges_array\n    };\n\n\n    const options = {\n      edges: {\n        arrows: {\n          to: { enabled: true }\n        }\n      },\n      layout: {\n        improvedLayout: true,\n        hierarchical: {\n\n          nodeSpacing: 250,\n          edgeMinimization: false,\n          blockShifting: false,\n          parentCentralization: false,\n          direction: 'UD',\n          sortMethod: 'directed',\n        }\n      },\n      interaction: {\n        dragNodes: true,\n        hoverConnectedEdges: true,\n        // multiselect: true,\n        navigationButtons: true,\n      },\n      physics: {\n        enabled: false,\n      },\n      nodes: {\n        shape: 'dot',\n      }\n    };\n    \n    \n\n    const events = {\n      select: (event) => {\n        //var { nodes, edges } = event;\n        var { nodes } = event;\n        //setCurrent(nodes);\n        // console.log(nodes);\n        // console.log(edges);\n        this.props.updateSelection(nodes);\n        //setCurrent(nodes);\n        // console.log(\"Selected edges:\");\n        // console.log(edges);\n      }\n    };\n    \n\n    if (this.props.data.error === false) {\n      return (\n          <div className='card-body p-0'>\n              <Graph\n                style={experimentStyle}\n                graph={graph}\n                options={options}\n                events={events}\n                getNetwork={network => {\n                  //  if you want access to vis.js network api you can set the state in a parent component using this property\n                }}\n              />    \n          </div>            \n      );\n    }\n    else {\n      return (\n        <div className=\"card-body\">\n            {this.props.data.error_message}\n        </div>\n      )\n    }    \n  }\n   \n}\n\nconst experimentStyle = {\n    height: 500\n  };\n\nexport default GraphRepresentation;\n"]},"metadata":{},"sourceType":"module"}