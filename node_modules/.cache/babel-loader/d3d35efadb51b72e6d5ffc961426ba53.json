{"ast":null,"code":"var _jsxFileName = \"/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/App.js\";\nimport React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Nodes from './components/nodes';\nimport { rejects } from 'assert';\nimport { reject } from 'q'; //import Graph from './components/graph'\n\nclass Graph extends Component {\n  render() {\n    var rendering = \"Rendering data from \" + this.props.expid;\n    var nodes_array = [];\n    var edges_array = [];\n\n    if (typeof this.props.nodes_prop != 'undefined' || typeof this.props.edges_prop != 'undefined') {\n      this.props.nodes_prop.map(node => nodes_array.push({\n        id: node.id,\n        label: node.label,\n        color: {\n          background: node.status_color,\n          border: 'black'\n        }\n      }));\n      this.props.edges_prop.map(edge => {\n        edges_array.push({\n          from: edge.from,\n          to: edge.to\n        });\n      });\n      window.test(nodes_array, edges_array);\n    } else {\n      rendering = \"No data.\"; //window.test(null, null)\n    }\n\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, rendering);\n  }\n\n}\n\nclass AutosubmitIndex extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expid: null,\n      contacts: [],\n      nodes: [],\n      total: [],\n      errorMessage: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    // const getGraphData = expid => new Promise((resolves, rejects) => {\n    //   const api = 'http://84.88.185.94:5002/graph/'+expid\n    //   const request = new XMLHttpRequest()\n    //   request.open('GET', api)\n    //   request.onload = () =>\n    //     (request.status === 200)?\n    //     resolves(JSON.parse(request.response).results) :\n    //     reject(Error(request.statusText))      \n    //   request.onerror = (err) => rejects(err)\n    //   request.send()\n    // })\n    // getGraphData(this.state.expid).then(\n    //   data => this.setState({contacts: data['edges'], nodes : data['nodes'], total : data, errorMessage: ''}),\n    //   err => this.setState({errorMessage: err}),\n    // )\n    var honk = false;\n    var error = \"\";\n    fetch('http://84.88.185.94:5002/graph/' + this.state.expid).then(res => res.json()).then(data => {\n      this.setState({\n        contacts: data['edges'],\n        nodes: data['nodes'],\n        total: data,\n        errorMessage: 'SUCCESFUL'\n      });\n    }).catch(err => {\n      console.log(err);\n      honk = true;\n    });\n    console.log(honk); //console.log(error)\n    //this.setState({shouldShow: true});\n\n    if (honk === true) {\n      this.setState({\n        errorMessage: error\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    //this.setState({shouldShow: false});\n    this.setState({\n      expid: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Experiment Id:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.expid,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.errorMessage), React.createElement(Graph, {\n      nodes_prop: this.state.total.nodes,\n      edges_prop: this.state.total.edges,\n      expid: this.state.expid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })); // if (this.state.shouldShow == true && typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n    //       <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n    //     </div>\n    //   );\n    // }else{\n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n    //     </div>\n    //   );\n    // }   \n  }\n\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      nodes: [],\n      total: []\n    };\n  }\n\n  componentDidMount() {\n    //const {expid} = this.props.match.params;\n    //console.log(this.props);\n    fetch('http://84.88.185.94:5002/graph/a22l').then(res => res.json()).then(data => {\n      this.setState({\n        contacts: data['edges'],\n        nodes: data['nodes'],\n        total: data\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    if (typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Graph, {\n        nodes_prop: this.state.total.nodes,\n        edges_prop: this.state.total.edges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"No data\"));\n    }\n  }\n\n}\n\nexport default AutosubmitIndex;","map":{"version":3,"sources":["/home/Earth/wuruchi/Documents/ReactProj/dev-react-api/src/App.js"],"names":["React","Component","Contacts","Nodes","rejects","reject","Graph","render","rendering","props","expid","nodes_array","edges_array","nodes_prop","edges_prop","map","node","push","id","label","color","background","status_color","border","edge","from","to","window","test","AutosubmitIndex","constructor","state","contacts","nodes","total","errorMessage","handleChange","bind","handleSubmit","event","honk","error","fetch","then","res","json","data","setState","catch","err","console","log","preventDefault","target","value","edges","App","componentDidMount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Contacts from './components/contacts';\nimport Nodes from './components/nodes';\nimport { rejects } from 'assert';\nimport { reject } from 'q';\n//import Graph from './components/graph'\n\n\nclass Graph extends Component {\n  render() {\n    var rendering = \"Rendering data from \" + this.props.expid\n    var nodes_array = []\n    var edges_array = []\n    if (typeof this.props.nodes_prop != 'undefined' || typeof this.props.edges_prop != 'undefined'){\n      this.props.nodes_prop.map((node) => (\n          nodes_array.push({id: node.id, label: node.label, color: { background: node.status_color, border: 'black'}})\n      ))\n      this.props.edges_prop.map((edge) => {\n          edges_array.push({from: edge.from, to: edge.to})\n      })\n      window.test(nodes_array, edges_array)\n    } else {\n      rendering = \"No data.\";\n      \n      //window.test(null, null)\n    }\n\n    \n\n    return (\n      <h3>{rendering}</h3>\n    );\n\n  }\n}\n\nclass AutosubmitIndex extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      expid : null,\n      contacts: [],\n      nodes: [],\n      total : [],\n      errorMessage : ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n\n    // const getGraphData = expid => new Promise((resolves, rejects) => {\n    //   const api = 'http://84.88.185.94:5002/graph/'+expid\n    //   const request = new XMLHttpRequest()\n    //   request.open('GET', api)\n    //   request.onload = () =>\n    //     (request.status === 200)?\n    //     resolves(JSON.parse(request.response).results) :\n    //     reject(Error(request.statusText))      \n    //   request.onerror = (err) => rejects(err)\n    //   request.send()\n    // })\n    \n    // getGraphData(this.state.expid).then(\n    //   data => this.setState({contacts: data['edges'], nodes : data['nodes'], total : data, errorMessage: ''}),\n    //   err => this.setState({errorMessage: err}),\n    // )\n\n    var honk = false;\n    var error = \"\";\n    fetch('http://84.88.185.94:5002/graph/'+this.state.expid)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ contacts: data['edges'], nodes : data['nodes'], total : data, errorMessage: 'SUCCESFUL' })\n    })\n    .catch((err) => {console.log(err); honk = true});\n    console.log(honk)\n    //console.log(error)\n    //this.setState({shouldShow: true});\n    if (honk === true){\n      this.setState({ errorMessage: error})\n    }\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    //this.setState({shouldShow: false});\n    this.setState({expid: event.target.value});\n  }\n  \n  render() {\n\n    return(\n      <div>\n        <form onSubmit={this.handleSubmit}>\n        <label>\n          Experiment Id:\n          <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n        </label>\n        <input type=\"submit\" value=\"Submit\"></input>\n        </form>\n        <h3>{this.state.errorMessage}</h3>\n        <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} expid={this.state.expid}/>\n      </div>\n    );\n\n    // if (this.state.shouldShow == true && typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n\n    //       <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n    //     </div>\n    //   );\n    // }else{\n      \n    //   return(\n    //     <div>\n    //       <form onSubmit={this.handleSubmit}>\n    //       <label>\n    //         Experiment Id:\n    //         <input type=\"text\" value={this.state.expid} onChange={this.handleChange}></input>\n    //       </label>\n    //       <input type=\"submit\" value=\"Submit\"></input>\n    //       </form>\n    //     </div>\n    //   );\n    // }   \n  }\n}\n\nclass App extends Component{\n\n  componentDidMount() {\n\n    //const {expid} = this.props.match.params;\n    //console.log(this.props);\n\n    fetch('http://84.88.185.94:5002/graph/a22l')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ contacts: data['edges'], nodes : data['nodes'], total : data })\n    })\n    .catch(console.log)\n  }\n\n  state = {\n    contacts: [],\n    nodes: [],\n    total : []\n  }\n\n  render() {\n    if (typeof this.state.total.nodes != \"undefined\" && typeof this.state.total.edges != \"undefined\"){\n      return (\n        <div>        \n          <Graph nodes_prop={this.state.total.nodes} edges_prop={this.state.total.edges} />\n          {/* <Contacts contacts={this.state.contacts} />\n          <Nodes nodes={this.state.nodes} />  */}\n        </div>      \n      );\n    } else {\n      return (\n        <div>\n          <p>No data</p>\n        </div>\n      );\n    }\n   \n  }\n}\n\nexport default AutosubmitIndex;\n"]},"metadata":{},"sourceType":"module"}